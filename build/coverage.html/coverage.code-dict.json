{"/home/travis/build/npmtest/node-npmtest-blessed/test.js":"/* istanbul instrument in package npmtest_blessed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blessed/lib.npmtest_blessed.js":"/* istanbul instrument in package npmtest_blessed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_blessed = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_blessed = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-blessed/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-blessed && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_blessed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_blessed\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_blessed.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_blessed.rollup.js'] =\n            local.assetsDict['/assets.npmtest_blessed.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_blessed.__dirname +\n                    '/lib.npmtest_blessed.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/blessed.js":"/**\n * blessed - a high-level terminal interface library for node.js\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Blessed\n */\n\nfunction blessed() {\n  return blessed.program.apply(null, arguments);\n}\n\nblessed.program = blessed.Program = require('./program');\nblessed.tput = blessed.Tput = require('./tput');\nblessed.widget = require('./widget');\nblessed.colors = require('./colors');\nblessed.unicode = require('./unicode');\nblessed.helpers = require('./helpers');\n\nblessed.helpers.sprintf = blessed.tput.sprintf;\nblessed.helpers.tryRead = blessed.tput.tryRead;\nblessed.helpers.merge(blessed, blessed.helpers);\n\nblessed.helpers.merge(blessed, blessed.widget);\n\n/**\n * Expose\n */\n\nmodule.exports = blessed;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/program.js":"/**\n * program.js - basic curses-like functionality for blessed.\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar EventEmitter = require('events').EventEmitter\n  , StringDecoder = require('string_decoder').StringDecoder\n  , cp = require('child_process')\n  , util = require('util')\n  , fs = require('fs');\n\nvar Tput = require('./tput')\n  , colors = require('./colors')\n  , slice = Array.prototype.slice;\n\nvar nextTick = global.setImmediate || process.nextTick.bind(process);\n\n/**\n * Program\n */\n\nfunction Program(options) {\n  var self = this;\n\n  if (!(this instanceof Program)) {\n    return new Program(options);\n  }\n\n  Program.bind(this);\n\n  EventEmitter.call(this);\n\n  if (!options || options.__proto__ !== Object.prototype) {\n    options = {\n      input: arguments[0],\n      output: arguments[1]\n    };\n  }\n\n  this.options = options;\n  this.input = options.input || process.stdin;\n  this.output = options.output || process.stdout;\n\n  options.log = options.log || options.dump;\n  if (options.log) {\n    this._logger = fs.createWriteStream(options.log);\n    if (options.dump) this.setupDump();\n  }\n\n  this.zero = options.zero !== false;\n  this.useBuffer = options.buffer;\n\n  this.x = 0;\n  this.y = 0;\n  this.savedX = 0;\n  this.savedY = 0;\n\n  this.cols = this.output.columns || 1;\n  this.rows = this.output.rows || 1;\n\n  this.scrollTop = 0;\n  this.scrollBottom = this.rows - 1;\n\n  this._terminal = options.terminal\n    || options.term\n    || process.env.TERM\n    || (process.platform === 'win32' ? 'windows-ansi' : 'xterm');\n\n  this._terminal = this._terminal.toLowerCase();\n\n  // OSX\n  this.isOSXTerm = process.env.TERM_PROGRAM === 'Apple_Terminal';\n  this.isiTerm2 = process.env.TERM_PROGRAM === 'iTerm.app'\n    || !!process.env.ITERM_SESSION_ID;\n\n  // VTE\n  // NOTE: lxterminal does not provide an env variable to check for.\n  // NOTE: gnome-terminal and sakura use a later version of VTE\n  // which provides VTE_VERSION as well as supports SGR events.\n  this.isXFCE = /xfce/i.test(process.env.COLORTERM);\n  this.isTerminator = !!process.env.TERMINATOR_UUID;\n  this.isLXDE = false;\n  this.isVTE = !!process.env.VTE_VERSION\n    || this.isXFCE\n    || this.isTerminator\n    || this.isLXDE;\n\n  // xterm and rxvt - not accurate\n  this.isRxvt = /rxvt/i.test(process.env.COLORTERM);\n  this.isXterm = false;\n\n  this.tmux = !!process.env.TMUX;\n  this.tmuxVersion = (function() {\n    if (!self.tmux) return 2;\n    try {\n      var version = cp.execFileSync('tmux', ['-V'], { encoding: 'utf8' });\n      return +/^tmux ([\\d.]+)/i.exec(version.trim().split('\\n')[0])[1];\n    } catch (e) {\n      return 2;\n    }\n  })();\n\n  this._buf = '';\n  this._flush = this.flush.bind(this);\n\n  if (options.tput !== false) {\n    this.setupTput();\n  }\n\n  this.listen();\n}\n\nProgram.global = null;\n\nProgram.total = 0;\n\nProgram.instances = [];\n\nProgram.bind = function(program) {\n  if (!Program.global) {\n    Program.global = program;\n  }\n\n  if (!~Program.instances.indexOf(program)) {\n    Program.instances.push(program);\n    program.index = Program.total;\n    Program.total++;\n  }\n\n  if (Program._bound) return;\n  Program._bound = true;\n\n  unshiftEvent(process, 'exit', Program._exitHandler = function() {\n    Program.instances.forEach(function(program) {\n      // Potentially reset window title on exit:\n      // if (program._originalTitle) {\n      //   program.setTitle(program._originalTitle);\n      // }\n      // Ensure the buffer is flushed (it should\n      // always be at this point, but who knows).\n      program.flush();\n      // Ensure _exiting is set (could technically\n      // use process._exiting).\n      program._exiting = true;\n    });\n  });\n};\n\nProgram.prototype.__proto__ = EventEmitter.prototype;\n\nProgram.prototype.type = 'program';\n\nProgram.prototype.log = function() {\n  return this._log('LOG',  util.format.apply(util, arguments));\n};\n\nProgram.prototype.debug = function() {\n  if (!this.options.debug) return;\n  return this._log('DEBUG',  util.format.apply(util, arguments));\n};\n\nProgram.prototype._log = function(pre, msg) {\n  if (!this._logger) return;\n  return this._logger.write(pre + ': ' + msg + '\\n-\\n');\n};\n\nProgram.prototype.setupDump = function() {\n  var self = this\n    , write = this.output.write\n    , decoder = new StringDecoder('utf8');\n\n  function stringify(data) {\n    return caret(data\n      .replace(/\\r/g, '\\\\r')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\t/g, '\\\\t'))\n      .replace(/[^ -~]/g, function(ch) {\n        if (ch.charCodeAt(0) > 0xff) return ch;\n        ch = ch.charCodeAt(0).toString(16);\n        if (ch.length > 2) {\n          if (ch.length < 4) ch = '0' + ch;\n          return '\\\\u' + ch;\n        }\n        if (ch.length < 2) ch = '0' + ch;\n        return '\\\\x' + ch;\n      });\n  }\n\n  function caret(data) {\n    return data.replace(/[\\0\\x80\\x1b-\\x1f\\x7f\\x01-\\x1a]/g, function(ch) {\n      switch (ch) {\n        case '\\0':\n        case '\\200':\n          ch = '@';\n          break;\n        case '\\x1b':\n          ch = '[';\n          break;\n        case '\\x1c':\n          ch = '\\\\';\n          break;\n        case '\\x1d':\n          ch = ']';\n          break;\n        case '\\x1e':\n          ch = '^';\n          break;\n        case '\\x1f':\n          ch = '_';\n          break;\n        case '\\x7f':\n          ch = '?';\n          break;\n        default:\n          ch = ch.charCodeAt(0);\n          // From ('A' - 64) to ('Z' - 64).\n          if (ch >= 1 && ch <= 26) {\n            ch = String.fromCharCode(ch + 64);\n          } else {\n            return String.fromCharCode(ch);\n          }\n          break;\n      }\n      return '^' + ch;\n    });\n  }\n\n  this.input.on('data', function(data) {\n    self._log('IN', stringify(decoder.write(data)));\n  });\n\n  this.output.write = function(data) {\n    self._log('OUT', stringify(data));\n    return write.apply(this, arguments);\n  };\n};\n\nProgram.prototype.setupTput = function() {\n  if (this._tputSetup) return;\n  this._tputSetup = true;\n\n  var self = this\n    , options = this.options\n    , write = this._write.bind(this);\n\n  var tput = this.tput = new Tput({\n    terminal: this.terminal,\n    padding: options.padding,\n    extended: options.extended,\n    printf: options.printf,\n    termcap: options.termcap,\n    forceUnicode: options.forceUnicode\n  });\n\n  if (tput.error) {\n    nextTick(function() {\n      self.emit('warning', tput.error.message);\n    });\n  }\n\n  if (tput.padding) {\n    nextTick(function() {\n      self.emit('warning', 'Terminfo padding has been enabled.');\n    });\n  }\n\n  this.put = function() {\n    var args = slice.call(arguments)\n      , cap = args.shift();\n\n    if (tput[cap]) {\n      return this._write(tput[cap].apply(tput, args));\n    }\n  };\n\n  Object.keys(tput).forEach(function(key) {\n    if (self[key] == null) {\n      self[key] = tput[key];\n    }\n\n    if (typeof tput[key] !== 'function') {\n      self.put[key] = tput[key];\n      return;\n    }\n\n    if (tput.padding) {\n      self.put[key] = function() {\n        return tput._print(tput[key].apply(tput, arguments), write);\n      };\n    } else {\n      self.put[key] = function() {\n        return self._write(tput[key].apply(tput, arguments));\n      };\n    }\n  });\n};\n\nProgram.prototype.__defineGetter__('terminal', function() {\n  return this._terminal;\n});\n\nProgram.prototype.__defineSetter__('terminal', function(terminal) {\n  this.setTerminal(terminal);\n  return this.terminal;\n});\n\nProgram.prototype.setTerminal = function(terminal) {\n  this._terminal = terminal.toLowerCase();\n  delete this._tputSetup;\n  this.setupTput();\n};\n\nProgram.prototype.has = function(name) {\n  return this.tput\n    ? this.tput.has(name)\n    : false;\n};\n\nProgram.prototype.term = function(is) {\n  return this.terminal.indexOf(is) === 0;\n};\n\nProgram.prototype.listen = function() {\n  var self = this;\n\n  // Potentially reset window title on exit:\n  // if (!this.isRxvt) {\n  //   if (!this.isVTE) this.setTitleModeFeature(3);\n  //   this.manipulateWindow(21, function(err, data) {\n  //     if (err) return;\n  //     self._originalTitle = data.text;\n  //   });\n  // }\n\n  // Listen for keys/mouse on input\n  if (!this.input._blessedInput) {\n    this.input._blessedInput = 1;\n    this._listenInput();\n  } else {\n    this.input._blessedInput++;\n  }\n\n  this.on('newListener', this._newHandler = function fn(type) {\n    if (type === 'keypress' || type === 'mouse') {\n      self.removeListener('newListener', fn);\n      if (self.input.setRawMode && !self.input.isRaw) {\n        self.input.setRawMode(true);\n        self.input.resume();\n      }\n    }\n  });\n\n  this.on('newListener', function fn(type) {\n    if (type === 'mouse') {\n      self.removeListener('newListener', fn);\n      self.bindMouse();\n    }\n  });\n\n  // Listen for resize on output\n  if (!this.output._blessedOutput) {\n    this.output._blessedOutput = 1;\n    this._listenOutput();\n  } else {\n    this.output._blessedOutput++;\n  }\n};\n\nProgram.prototype._listenInput = function() {\n  var keys = require('./keys')\n    , self = this;\n\n  // Input\n  this.input.on('keypress', this.input._keypressHandler = function(ch, key) {\n    key = key || { ch: ch };\n\n    if (key.name === 'undefined'\n        && (key.code === '[M' || key.code === '[I' || key.code === '[O')) {\n      // A mouse sequence. The `keys` module doesn't understand these.\n      return;\n    }\n\n    if (key.name === 'undefined') {\n      // Not sure what this is, but we should probably ignore it.\n      return;\n    }\n\n    if (key.name === 'enter' && key.sequence === '\\n') {\n      key.name = 'linefeed';\n    }\n\n    if (key.name === 'return' && key.sequence === '\\r') {\n      self.input.emit('keypress', ch, merge({}, key, { name: 'enter' }));\n    }\n\n    var name = (key.ctrl ? 'C-' : '')\n      + (key.meta ? 'M-' : '')\n      + (key.shift && key.name ? 'S-' : '')\n      + (key.name || ch);\n\n    key.full = name;\n\n    Program.instances.forEach(function(program) {\n      if (program.input !== self.input) return;\n      program.emit('keypress', ch, key);\n      program.emit('key ' + name, ch, key);\n    });\n  });\n\n  this.input.on('data', this.input._dataHandler = function(data) {\n    Program.instances.forEach(function(program) {\n      if (program.input !== self.input) return;\n      program.emit('data', data);\n    });\n  });\n\n  keys.emitKeypressEvents(this.input);\n};\n\nProgram.prototype._listenOutput = function() {\n  var self = this;\n\n  if (!this.output.isTTY) {\n    nextTick(function() {\n      self.emit('warning', 'Output is not a TTY');\n    });\n  }\n\n  // Output\n  function resize() {\n    Program.instances.forEach(function(program) {\n      if (program.output !== self.output) return;\n      program.cols = program.output.columns;\n      program.rows = program.output.rows;\n      program.emit('resize');\n    });\n  }\n\n  this.output.on('resize', this.output._resizeHandler = function() {\n    Program.instances.forEach(function(program) {\n      if (program.output !== self.output) return;\n      if (!program.options.resizeTimeout) {\n        return resize();\n      }\n      if (program._resizeTimer) {\n        clearTimeout(program._resizeTimer);\n        delete program._resizeTimer;\n      }\n      var time = typeof program.options.resizeTimeout === 'number'\n        ? program.options.resizeTimeout\n        : 300;\n      program._resizeTimer = setTimeout(resize, time);\n    });\n  });\n};\n\nProgram.prototype.destroy = function() {\n  var index = Program.instances.indexOf(this);\n\n  if (~index) {\n    Program.instances.splice(index, 1);\n    Program.total--;\n\n    this.flush();\n    this._exiting = true;\n\n    Program.global = Program.instances[0];\n\n    if (Program.total === 0) {\n      Program.global = null;\n\n      process.removeListener('exit', Program._exitHandler);\n      delete Program._exitHandler;\n\n      delete Program._bound;\n    }\n\n    this.input._blessedInput--;\n    this.output._blessedOutput--;\n\n    if (this.input._blessedInput === 0) {\n      this.input.removeListener('keypress', this.input._keypressHandler);\n      this.input.removeListener('data', this.input._dataHandler);\n      delete this.input._keypressHandler;\n      delete this.input._dataHandler;\n\n      if (this.input.setRawMode) {\n        if (this.input.isRaw) {\n          this.input.setRawMode(false);\n        }\n        if (!this.input.destroyed) {\n          this.input.pause();\n        }\n      }\n    }\n\n    if (this.output._blessedOutput === 0) {\n      this.output.removeListener('resize', this.output._resizeHandler);\n      delete this.output._resizeHandler;\n    }\n\n    this.removeListener('newListener', this._newHandler);\n    delete this._newHandler;\n\n    this.destroyed = true;\n    this.emit('destroy');\n  }\n};\n\nProgram.prototype.key = function(key, listener) {\n  if (typeof key === 'string') key = key.split(/\\s*,\\s*/);\n  key.forEach(function(key) {\n    return this.on('key ' + key, listener);\n  }, this);\n};\n\nProgram.prototype.onceKey = function(key, listener) {\n  if (typeof key === 'string') key = key.split(/\\s*,\\s*/);\n  key.forEach(function(key) {\n    return this.once('key ' + key, listener);\n  }, this);\n};\n\nProgram.prototype.unkey =\nProgram.prototype.removeKey = function(key, listener) {\n  if (typeof key === 'string') key = key.split(/\\s*,\\s*/);\n  key.forEach(function(key) {\n    return this.removeListener('key ' + key, listener);\n  }, this);\n};\n\n// XTerm mouse events\n// http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking\n// To better understand these\n// the xterm code is very helpful:\n// Relevant files:\n//   button.c, charproc.c, misc.c\n// Relevant functions in xterm/button.c:\n//   BtnCode, EmitButtonCode, EditorButton, SendMousePosition\n// send a mouse event:\n// regular/utf8: ^[[M Cb Cx Cy\n// urxvt: ^[[ Cb ; Cx ; Cy M\n// sgr: ^[[ Cb ; Cx ; Cy M/m\n// vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \\r\n// locator: CSI P e ; P b ; P r ; P c ; P p & w\n// motion example of a left click:\n// ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<\n// mouseup, mousedown, mousewheel\n// left click: ^[[M 3<^[[M#3<\n// mousewheel up: ^[[M`3>\nProgram.prototype.bindMouse = function() {\n  if (this._boundMouse) return;\n  this._boundMouse = true;\n\n  var decoder = new StringDecoder('utf8')\n    , self = this;\n\n  this.on('data', function(data) {\n    var text = decoder.write(data);\n    if (!text) return;\n    self._bindMouse(text, data);\n  });\n};\n\nProgram.prototype._bindMouse = function(s, buf) {\n  var self = this\n    , key\n    , parts\n    , b\n    , x\n    , y\n    , mod\n    , params\n    , down\n    , page\n    , button;\n\n  key = {\n    name: undefined,\n    ctrl: false,\n    meta: false,\n    shift: false\n  };\n\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === undefined) {\n      s[0] -= 128;\n      s = '\\x1b' + s.toString('utf-8');\n    } else {\n      s = s.toString('utf-8');\n    }\n  }\n\n  // if (this.8bit) {\n  //   s = s.replace(/\\233/g, '\\x1b[');\n  //   buf = new Buffer(s, 'utf8');\n  // }\n\n  // XTerm / X10 for buggy VTE\n  // VTE can only send unsigned chars and no unicode for coords. This limits\n  // them to 0xff. However, normally the x10 protocol does not allow a byte\n  // under 0x20, but since VTE can have the bytes overflow, we can consider\n  // bytes below 0x20 to be up to 0xff + 0x20. This gives a limit of 287. Since\n  // characters ranging from 223 to 248 confuse javascript's utf parser, we\n  // need to parse the raw binary. We can detect whether the terminal is using\n  // a bugged VTE version by examining the coordinates and seeing whether they\n  // are a value they would never otherwise be with a properly implemented x10\n  // protocol. This method of detecting VTE is only 99% reliable because we\n  // can't check if the coords are 0x00 (255) since that is a valid x10 coord\n  // technically.\n  var bx = s.charCodeAt(4);\n  var by = s.charCodeAt(5);\n  if (buf[0] === 0x1b && buf[1] === 0x5b && buf[2] === 0x4d\n      && (this.isVTE\n      || bx >= 65533 || by >= 65533\n      || (bx > 0x00 && bx < 0x20)\n      || (by > 0x00 && by < 0x20)\n      || (buf[4] > 223 && buf[4] < 248 && buf.length === 6)\n      || (buf[5] > 223 && buf[5] < 248 && buf.length === 6))) {\n    b = buf[3];\n    x = buf[4];\n    y = buf[5];\n\n    // unsigned char overflow.\n    if (x < 0x20) x += 0xff;\n    if (y < 0x20) y += 0xff;\n\n    // Convert the coordinates into a\n    // properly formatted x10 utf8 sequence.\n    s = '\\x1b[M'\n      + String.fromCharCode(b)\n      + String.fromCharCode(x)\n      + String.fromCharCode(y);\n  }\n\n  // XTerm / X10\n  if (parts = /^\\x1b\\[M([\\x00\\u0020-\\uffff]{3})/.exec(s)) {\n    b = parts[1].charCodeAt(0);\n    x = parts[1].charCodeAt(1);\n    y = parts[1].charCodeAt(2);\n\n    key.name = 'mouse';\n    key.type = 'X10';\n\n    key.raw = [b, x, y, parts[0]];\n    key.buf = buf;\n    key.x = x - 32;\n    key.y = y - 32;\n\n    if (this.zero) key.x--, key.y--;\n\n    if (x === 0) key.x = 255;\n    if (y === 0) key.y = 255;\n\n    mod = b >> 2;\n    key.shift = !!(mod & 1);\n    key.meta = !!((mod >> 1) & 1);\n    key.ctrl = !!((mod >> 2) & 1);\n\n    b -= 32;\n\n    if ((b >> 6) & 1) {\n      key.action = b & 1 ? 'wheeldown' : 'wheelup';\n      key.button = 'middle';\n    } else if (b === 3) {\n      // NOTE: x10 and urxvt have no way\n      // of telling which button mouseup used.\n      key.action = 'mouseup';\n      key.button = this._lastButton || 'unknown';\n      delete this._lastButton;\n    } else {\n      key.action = 'mousedown';\n      button = b & 3;\n      key.button =\n        button === 0 ? 'left'\n        : button === 1 ? 'middle'\n        : button === 2 ? 'right'\n        : 'unknown';\n      this._lastButton = key.button;\n    }\n\n    // Probably a movement.\n    // The *newer* VTE gets mouse movements comepletely wrong.\n    // This presents a problem: older versions of VTE that get it right might\n    // be confused by the second conditional in the if statement.\n    // NOTE: Possibly just switch back to the if statement below.\n    // none, shift, ctrl, alt\n    // gnome: 32, 36, 48, 40\n    // xterm: 35, _, 51, _\n    // urxvt: 35, _, _, _\n    // if (key.action === 'mousedown' && key.button === 'unknown') {\n    if (b === 35 || b === 39 || b === 51 || b === 43\n        || (this.isVTE && (b === 32 || b === 36 || b === 48 || b === 40))) {\n      delete key.button;\n      key.action = 'mousemove';\n    }\n\n    self.emit('mouse', key);\n\n    return;\n  }\n\n  // URxvt\n  if (parts = /^\\x1b\\[(\\d+;\\d+;\\d+)M/.exec(s)) {\n    params = parts[1].split(';');\n    b = +params[0];\n    x = +params[1];\n    y = +params[2];\n\n    key.name = 'mouse';\n    key.type = 'urxvt';\n\n    key.raw = [b, x, y, parts[0]];\n    key.buf = buf;\n    key.x = x;\n    key.y = y;\n\n    if (this.zero) key.x--, key.y--;\n\n    mod = b >> 2;\n    key.shift = !!(mod & 1);\n    key.meta = !!((mod >> 1) & 1);\n    key.ctrl = !!((mod >> 2) & 1);\n\n    // XXX Bug in urxvt after wheelup/down on mousemove\n    // NOTE: This may be different than 128/129 depending\n    // on mod keys.\n    if (b === 128 || b === 129) {\n      b = 67;\n    }\n\n    b -= 32;\n\n    if ((b >> 6) & 1) {\n      key.action = b & 1 ? 'wheeldown' : 'wheelup';\n      key.button = 'middle';\n    } else if (b === 3) {\n      // NOTE: x10 and urxvt have no way\n      // of telling which button mouseup used.\n      key.action = 'mouseup';\n      key.button = this._lastButton || 'unknown';\n      delete this._lastButton;\n    } else {\n      key.action = 'mousedown';\n      button = b & 3;\n      key.button =\n        button === 0 ? 'left'\n        : button === 1 ? 'middle'\n        : button === 2 ? 'right'\n        : 'unknown';\n      // NOTE: 0/32 = mousemove, 32/64 = mousemove with left down\n      // if ((b >> 1) === 32)\n      this._lastButton = key.button;\n    }\n\n    // Probably a movement.\n    // The *newer* VTE gets mouse movements comepletely wrong.\n    // This presents a problem: older versions of VTE that get it right might\n    // be confused by the second conditional in the if statement.\n    // NOTE: Possibly just switch back to the if statement below.\n    // none, shift, ctrl, alt\n    // urxvt: 35, _, _, _\n    // gnome: 32, 36, 48, 40\n    // if (key.action === 'mousedown' && key.button === 'unknown') {\n    if (b === 35 || b === 39 || b === 51 || b === 43\n        || (this.isVTE && (b === 32 || b === 36 || b === 48 || b === 40))) {\n      delete key.button;\n      key.action = 'mousemove';\n    }\n\n    self.emit('mouse', key);\n\n    return;\n  }\n\n  // SGR\n  if (parts = /^\\x1b\\[<(\\d+;\\d+;\\d+)([mM])/.exec(s)) {\n    down = parts[2] === 'M';\n    params = parts[1].split(';');\n    b = +params[0];\n    x = +params[1];\n    y = +params[2];\n\n    key.name = 'mouse';\n    key.type = 'sgr';\n\n    key.raw = [b, x, y, parts[0]];\n    key.buf = buf;\n    key.x = x;\n    key.y = y;\n\n    if (this.zero) key.x--, key.y--;\n\n    mod = b >> 2;\n    key.shift = !!(mod & 1);\n    key.meta = !!((mod >> 1) & 1);\n    key.ctrl = !!((mod >> 2) & 1);\n\n    if ((b >> 6) & 1) {\n      key.action = b & 1 ? 'wheeldown' : 'wheelup';\n      key.button = 'middle';\n    } else {\n      key.action = down\n        ? 'mousedown'\n        : 'mouseup';\n      button = b & 3;\n      key.button =\n        button === 0 ? 'left'\n        : button === 1 ? 'middle'\n        : button === 2 ? 'right'\n        : 'unknown';\n    }\n\n    // Probably a movement.\n    // The *newer* VTE gets mouse movements comepletely wrong.\n    // This presents a problem: older versions of VTE that get it right might\n    // be confused by the second conditional in the if statement.\n    // NOTE: Possibly just switch back to the if statement below.\n    // none, shift, ctrl, alt\n    // xterm: 35, _, 51, _\n    // gnome: 32, 36, 48, 40\n    // if (key.action === 'mousedown' && key.button === 'unknown') {\n    if (b === 35 || b === 39 || b === 51 || b === 43\n        || (this.isVTE && (b === 32 || b === 36 || b === 48 || b === 40))) {\n      delete key.button;\n      key.action = 'mousemove';\n    }\n\n    self.emit('mouse', key);\n\n    return;\n  }\n\n  // DEC\n  // The xterm mouse documentation says there is a\n  // `<` prefix, the DECRQLP says there is no prefix.\n  if (parts = /^\\x1b\\[<(\\d+;\\d+;\\d+;\\d+)&w/.exec(s)) {\n    params = parts[1].split(';');\n    b = +params[0];\n    x = +params[1];\n    y = +params[2];\n    page = +params[3];\n\n    key.name = 'mouse';\n    key.type = 'dec';\n\n    key.raw = [b, x, y, parts[0]];\n    key.buf = buf;\n    key.x = x;\n    key.y = y;\n    key.page = page;\n\n    if (this.zero) key.x--, key.y--;\n\n    key.action = b === 3\n      ? 'mouseup'\n      : 'mousedown';\n\n    key.button =\n      b === 2 ? 'left'\n      : b === 4 ? 'middle'\n      : b === 6 ? 'right'\n      : 'unknown';\n\n    self.emit('mouse', key);\n\n    return;\n  }\n\n  // vt300\n  if (parts = /^\\x1b\\[24([0135])~\\[(\\d+),(\\d+)\\]\\r/.exec(s)) {\n    b = +parts[1];\n    x = +parts[2];\n    y = +parts[3];\n\n    key.name = 'mouse';\n    key.type = 'vt300';\n\n    key.raw = [b, x, y, parts[0]];\n    key.buf = buf;\n    key.x = x;\n    key.y = y;\n\n    if (this.zero) key.x--, key.y--;\n\n    key.action = 'mousedown';\n    key.button =\n      b === 1 ? 'left'\n      : b === 2 ? 'middle'\n      : b === 5 ? 'right'\n      : 'unknown';\n\n    self.emit('mouse', key);\n\n    return;\n  }\n\n  if (parts = /^\\x1b\\[(O|I)/.exec(s)) {\n    key.action = parts[1] === 'I'\n      ? 'focus'\n      : 'blur';\n\n    self.emit('mouse', key);\n    self.emit(key.action);\n\n    return;\n  }\n};\n\n// gpm support for linux vc\nProgram.prototype.enableGpm = function() {\n  var self = this;\n  var gpmclient = require('./gpmclient');\n\n  if (this.gpm) return;\n\n  this.gpm = gpmclient();\n\n  this.gpm.on('btndown', function(btn, modifier, x, y) {\n    x--, y--;\n\n    var key = {\n      name: 'mouse',\n      type: 'GPM',\n      action: 'mousedown',\n      button: self.gpm.ButtonName(btn),\n      raw: [btn, modifier, x, y],\n      x: x,\n      y: y,\n      shift: self.gpm.hasShiftKey(modifier),\n      meta: self.gpm.hasMetaKey(modifier),\n      ctrl: self.gpm.hasCtrlKey(modifier)\n    };\n\n    self.emit('mouse', key);\n  });\n\n  this.gpm.on('btnup', function(btn, modifier, x, y) {\n    x--, y--;\n\n    var key = {\n      name: 'mouse',\n      type: 'GPM',\n      action: 'mouseup',\n      button: self.gpm.ButtonName(btn),\n      raw: [btn, modifier, x, y],\n      x: x,\n      y: y,\n      shift: self.gpm.hasShiftKey(modifier),\n      meta: self.gpm.hasMetaKey(modifier),\n      ctrl: self.gpm.hasCtrlKey(modifier)\n    };\n\n    self.emit('mouse', key);\n  });\n\n  this.gpm.on('move', function(btn, modifier, x, y) {\n    x--, y--;\n\n    var key = {\n      name: 'mouse',\n      type: 'GPM',\n      action: 'mousemove',\n      button: self.gpm.ButtonName(btn),\n      raw: [btn, modifier, x, y],\n      x: x,\n      y: y,\n      shift: self.gpm.hasShiftKey(modifier),\n      meta: self.gpm.hasMetaKey(modifier),\n      ctrl: self.gpm.hasCtrlKey(modifier)\n    };\n\n    self.emit('mouse', key);\n  });\n\n  this.gpm.on('drag', function(btn, modifier, x, y) {\n    x--, y--;\n\n    var key = {\n      name: 'mouse',\n      type: 'GPM',\n      action: 'mousemove',\n      button: self.gpm.ButtonName(btn),\n      raw: [btn, modifier, x, y],\n      x: x,\n      y: y,\n      shift: self.gpm.hasShiftKey(modifier),\n      meta: self.gpm.hasMetaKey(modifier),\n      ctrl: self.gpm.hasCtrlKey(modifier)\n    };\n\n    self.emit('mouse', key);\n  });\n\n  this.gpm.on('mousewheel', function(btn, modifier, x, y, dx, dy) {\n    var key = {\n      name: 'mouse',\n      type: 'GPM',\n      action: dy > 0 ? 'wheelup' : 'wheeldown',\n      button: self.gpm.ButtonName(btn),\n      raw: [btn, modifier, x, y, dx, dy],\n      x: x,\n      y: y,\n      shift: self.gpm.hasShiftKey(modifier),\n      meta: self.gpm.hasMetaKey(modifier),\n      ctrl: self.gpm.hasCtrlKey(modifier)\n    };\n\n    self.emit('mouse', key);\n  });\n};\n\nProgram.prototype.disableGpm = function() {\n  if (this.gpm) {\n    this.gpm.stop();\n    delete this.gpm;\n  }\n};\n\n// All possible responses from the terminal\nProgram.prototype.bindResponse = function() {\n  if (this._boundResponse) return;\n  this._boundResponse = true;\n\n  var decoder = new StringDecoder('utf8')\n    , self = this;\n\n  this.on('data', function(data) {\n    data = decoder.write(data);\n    if (!data) return;\n    self._bindResponse(data);\n  });\n};\n\nProgram.prototype._bindResponse = function(s) {\n  var out = {}\n    , parts;\n\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === undefined) {\n      s[0] -= 128;\n      s = '\\x1b' + s.toString('utf-8');\n    } else {\n      s = s.toString('utf-8');\n    }\n  }\n\n  // CSI P s c\n  // Send Device Attributes (Primary DA).\n  // CSI > P s c\n  // Send Device Attributes (Secondary DA).\n  if (parts = /^\\x1b\\[(\\?|>)(\\d*(?:;\\d*)*)c/.exec(s)) {\n    parts = parts[2].split(';').map(function(ch) {\n      return +ch || 0;\n    });\n\n    out.event = 'device-attributes';\n    out.code = 'DA';\n\n    if (parts[1] === '?') {\n      out.type = 'primary-attribute';\n      // VT100-style params:\n      if (parts[0] === 1 && parts[2] === 2) {\n        out.term = 'vt100';\n        out.advancedVideo = true;\n      } else if (parts[0] === 1 && parts[2] === 0) {\n        out.term = 'vt101';\n      } else if (parts[0] === 6) {\n        out.term = 'vt102';\n      } else if (parts[0] === 60\n        && parts[1] === 1 && parts[2] === 2\n        && parts[3] === 6 && parts[4] === 8\n        && parts[5] === 9 && parts[6] === 15) {\n        out.term = 'vt220';\n      } else {\n        // VT200-style params:\n        parts.forEach(function(attr) {\n          switch (attr) {\n            case 1:\n              out.cols132 = true;\n              break;\n            case 2:\n              out.printer = true;\n              break;\n            case 6:\n              out.selectiveErase = true;\n              break;\n            case 8:\n              out.userDefinedKeys = true;\n              break;\n            case 9:\n              out.nationalReplacementCharsets = true;\n              break;\n            case 15:\n              out.technicalCharacters = true;\n              break;\n            case 18:\n              out.userWindows = true;\n              break;\n            case 21:\n              out.horizontalScrolling = true;\n              break;\n            case 22:\n              out.ansiColor = true;\n              break;\n            case 29:\n              out.ansiTextLocator = true;\n              break;\n          }\n        });\n      }\n    } else {\n      out.type = 'secondary-attribute';\n      switch (parts[0]) {\n        case 0:\n          out.term = 'vt100';\n          break;\n        case 1:\n          out.term = 'vt220';\n          break;\n        case 2:\n          out.term = 'vt240';\n          break;\n        case 18:\n          out.term = 'vt330';\n          break;\n        case 19:\n          out.term = 'vt340';\n          break;\n        case 24:\n          out.term = 'vt320';\n          break;\n        case 41:\n          out.term = 'vt420';\n          break;\n        case 61:\n          out.term = 'vt510';\n          break;\n        case 64:\n          out.term = 'vt520';\n          break;\n        case 65:\n          out.term = 'vt525';\n          break;\n      }\n      out.firmwareVersion = parts[1];\n      out.romCartridgeRegistrationNumber = parts[2];\n    }\n\n    // LEGACY\n    out.deviceAttributes = out;\n\n    this.emit('response', out);\n    this.emit('response ' + out.event, out);\n\n    return;\n  }\n\n  // CSI Ps n  Device Status Report (DSR).\n  //     Ps = 5  -> Status Report.  Result (``OK'') is\n  //   CSI 0 n\n  // CSI ? Ps n\n  //   Device Status Report (DSR, DEC-specific).\n  //     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n  //     or CSI ? 1 1  n  (not ready).\n  //     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n  //     or CSI ? 2 1  n  (locked).\n  //     Ps = 2 6  -> Report Keyboard status as\n  //   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n  //   The last two parameters apply to VT400 & up, and denote key-\n  //   board ready and LK01 respectively.\n  //     Ps = 5 3  -> Report Locator status as\n  //   CSI ? 5 3  n  Locator available, if compiled-in, or\n  //   CSI ? 5 0  n  No Locator, if not.\n  if (parts = /^\\x1b\\[(\\?)?(\\d+)(?:;(\\d+);(\\d+);(\\d+))?n/.exec(s)) {\n    out.event = 'device-status';\n    out.code = 'DSR';\n\n    if (!parts[1] && parts[2] === '0' && !parts[3]) {\n      out.type = 'device-status';\n      out.status = 'OK';\n\n      // LEGACY\n      out.deviceStatus = out.status;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] && (parts[2] === '10' || parts[2] === '11') && !parts[3]) {\n      out.type = 'printer-status';\n      out.status = parts[2] === '10'\n        ? 'ready'\n        : 'not ready';\n\n      // LEGACY\n      out.printerStatus = out.status;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] && (parts[2] === '20' || parts[2] === '21') && !parts[3]) {\n      out.type = 'udk-status';\n      out.status = parts[2] === '20'\n        ? 'unlocked'\n        : 'locked';\n\n      // LEGACY\n      out.UDKStatus = out.status;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1]\n        && parts[2] === '27'\n        && parts[3] === '1'\n        && parts[4] === '0'\n        && parts[5] === '0') {\n      out.type = 'keyboard-status';\n      out.status = 'OK';\n\n      // LEGACY\n      out.keyboardStatus = out.status;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] && (parts[2] === '53' || parts[2] === '50') && !parts[3]) {\n      out.type = 'locator-status';\n      out.status = parts[2] === '53'\n          ? 'available'\n          : 'unavailable';\n\n      // LEGACY\n      out.locator = out.status;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    out.type = 'error';\n    out.text = 'Unhandled: ' + JSON.stringify(parts);\n\n    // LEGACY\n    out.error = out.text;\n\n    this.emit('response', out);\n    this.emit('response ' + out.event, out);\n\n    return;\n  }\n\n  // CSI Ps n  Device Status Report (DSR).\n  //     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n  //   Result is\n  //   CSI r ; c R\n  // CSI ? Ps n\n  //   Device Status Report (DSR, DEC-specific).\n  //     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n  //     ? r ; c R (assumes page is zero).\n  if (parts = /^\\x1b\\[(\\?)?(\\d+);(\\d+)R/.exec(s)) {\n    out.event = 'device-status';\n    out.code = 'DSR';\n    out.type = 'cursor-status';\n\n    out.status = {\n      x: +parts[3],\n      y: +parts[2],\n      page: !parts[1] ? undefined : 0\n    };\n\n    out.x = out.status.x;\n    out.y = out.status.y;\n    out.page = out.status.page;\n\n    // LEGACY\n    out.cursor = out.status;\n\n    this.emit('response', out);\n    this.emit('response ' + out.event, out);\n\n    return;\n  }\n\n  // CSI Ps ; Ps ; Ps t\n  //   Window manipulation (from dtterm, as well as extensions).\n  //   These controls may be disabled using the allowWindowOps\n  //   resource.  Valid values for the first (and any additional\n  //   parameters) are:\n  //     Ps = 1 1  -> Report xterm window state.  If the xterm window\n  //     is open (non-iconified), it returns CSI 1 t .  If the xterm\n  //     window is iconified, it returns CSI 2 t .\n  //     Ps = 1 3  -> Report xterm window position.  Result is CSI 3\n  //     ; x ; y t\n  //     Ps = 1 4  -> Report xterm window in pixels.  Result is CSI\n  //     4  ;  height ;  width t\n  //     Ps = 1 8  -> Report the size of the text area in characters.\n  //     Result is CSI  8  ;  height ;  width t\n  //     Ps = 1 9  -> Report the size of the screen in characters.\n  //     Result is CSI  9  ;  height ;  width t\n  if (parts = /^\\x1b\\[(\\d+)(?:;(\\d+);(\\d+))?t/.exec(s)) {\n    out.event = 'window-manipulation';\n    out.code = '';\n\n    if ((parts[1] === '1' || parts[1] === '2') && !parts[2]) {\n      out.type = 'window-state';\n      out.state = parts[1] === '1'\n        ? 'non-iconified'\n        : 'iconified';\n\n      // LEGACY\n      out.windowState = out.state;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] === '3' && parts[2]) {\n      out.type = 'window-position';\n\n      out.position = {\n        x: +parts[2],\n        y: +parts[3]\n      };\n      out.x = out.position.x;\n      out.y = out.position.y;\n\n      // LEGACY\n      out.windowPosition = out.position;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] === '4' && parts[2]) {\n      out.type = 'window-size-pixels';\n      out.size = {\n        height: +parts[2],\n        width: +parts[3]\n      };\n      out.height = out.size.height;\n      out.width = out.size.width;\n\n      // LEGACY\n      out.windowSizePixels = out.size;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] === '8' && parts[2]) {\n      out.type = 'textarea-size';\n      out.size = {\n        height: +parts[2],\n        width: +parts[3]\n      };\n      out.height = out.size.height;\n      out.width = out.size.width;\n\n      // LEGACY\n      out.textAreaSizeCharacters = out.size;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] === '9' && parts[2]) {\n      out.type = 'screen-size';\n      out.size = {\n        height: +parts[2],\n        width: +parts[3]\n      };\n      out.height = out.size.height;\n      out.width = out.size.width;\n\n      // LEGACY\n      out.screenSizeCharacters = out.size;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    out.type = 'error';\n    out.text = 'Unhandled: ' + JSON.stringify(parts);\n\n    // LEGACY\n    out.error = out.text;\n\n    this.emit('response', out);\n    this.emit('response ' + out.event, out);\n\n    return;\n  }\n\n  // rxvt-unicode does not support window manipulation\n  //   Result Normal: OSC l/L 0xEF 0xBF 0xBD\n  //   Result ASCII: OSC l/L 0x1c (file separator)\n  //   Result UTF8->ASCII: OSC l/L 0xFD\n  // Test with:\n  //   echo -ne '\\ePtmux;\\e\\e[>3t\\e\\\\'\n  //   sleep 2 && echo -ne '\\ePtmux;\\e\\e[21t\\e\\\\' & cat -v\n  //   -\n  //   echo -ne '\\e[>3t'\n  //   sleep 2 && echo -ne '\\e[21t' & cat -v\n  if (parts = /^\\x1b\\](l|L)([^\\x07\\x1b]*)$/.exec(s)) {\n    parts[2] = 'rxvt';\n    s = '\\x1b]' + parts[1] + parts[2] + '\\x1b\\\\';\n  }\n\n  // CSI Ps ; Ps ; Ps t\n  //   Window manipulation (from dtterm, as well as extensions).\n  //   These controls may be disabled using the allowWindowOps\n  //   resource.  Valid values for the first (and any additional\n  //   parameters) are:\n  //     Ps = 2 0  -> Report xterm window's icon label.  Result is\n  //     OSC  L  label ST\n  //     Ps = 2 1  -> Report xterm window's title.  Result is OSC  l\n  //     label ST\n  if (parts = /^\\x1b\\](l|L)([^\\x07\\x1b]*)(?:\\x07|\\x1b\\\\)/.exec(s)) {\n    out.event = 'window-manipulation';\n    out.code = '';\n\n    if (parts[1] === 'L') {\n      out.type = 'window-icon-label';\n      out.text = parts[2];\n\n      // LEGACY\n      out.windowIconLabel = out.text;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    if (parts[1] === 'l') {\n      out.type = 'window-title';\n      out.text = parts[2];\n\n      // LEGACY\n      out.windowTitle = out.text;\n\n      this.emit('response', out);\n      this.emit('response ' + out.event, out);\n\n      return;\n    }\n\n    out.type = 'error';\n    out.text = 'Unhandled: ' + JSON.stringify(parts);\n\n    // LEGACY\n    out.error = out.text;\n\n    this.emit('response', out);\n    this.emit('response ' + out.event, out);\n\n    return;\n  }\n\n  // CSI Ps ' |\n  //   Request Locator Position (DECRQLP).\n  //     -> CSI Pe ; Pb ; Pr ; Pc ; Pp &  w\n  //   Parameters are [event;button;row;column;page].\n  //   Valid values for the event:\n  //     Pe = 0  -> locator unavailable - no other parameters sent.\n  //     Pe = 1  -> request - xterm received a DECRQLP.\n  //     Pe = 2  -> left button down.\n  //     Pe = 3  -> left button up.\n  //     Pe = 4  -> middle button down.\n  //     Pe = 5  -> middle button up.\n  //     Pe = 6  -> right button down.\n  //     Pe = 7  -> right button up.\n  //     Pe = 8  -> M4 button down.\n  //     Pe = 9  -> M4 button up.\n  //     Pe = 1 0  -> locator outside filter rectangle.\n  //   ``button'' parameter is a bitmask indicating which buttons are\n  //     pressed:\n  //     Pb = 0  <- no buttons down.\n  //     Pb & 1  <- right button down.\n  //     Pb & 2  <- middle button down.\n  //     Pb & 4  <- left button down.\n  //     Pb & 8  <- M4 button down.\n  //   ``row'' and ``column'' parameters are the coordinates of the\n  //     locator position in the xterm window, encoded as ASCII deci-\n  //     mal.\n  //   The ``page'' parameter is not used by xterm, and will be omit-\n  //   ted.\n  // NOTE:\n  // This is already implemented in the _bindMouse\n  // method, but it might make more sense here.\n  // The xterm mouse documentation says there is a\n  // `<` prefix, the DECRQLP says there is no prefix.\n  if (parts = /^\\x1b\\[(\\d+(?:;\\d+){4})&w/.exec(s)) {\n    parts = parts[1].split(';').map(function(ch) {\n      return +ch;\n    });\n\n    out.event = 'locator-position';\n    out.code = 'DECRQLP';\n\n    switch (parts[0]) {\n      case 0:\n        out.status = 'locator-unavailable';\n        break;\n      case 1:\n        out.status = 'request';\n        break;\n      case 2:\n        out.status = 'left-button-down';\n        break;\n      case 3:\n        out.status = 'left-button-up';\n        break;\n      case 4:\n        out.status = 'middle-button-down';\n        break;\n      case 5:\n        out.status = 'middle-button-up';\n        break;\n      case 6:\n        out.status = 'right-button-down';\n        break;\n      case 7:\n        out.status = 'right-button-up';\n        break;\n      case 8:\n        out.status = 'm4-button-down';\n        break;\n      case 9:\n        out.status = 'm4-button-up';\n        break;\n      case 10:\n        out.status = 'locator-outside';\n        break;\n    }\n\n    out.mask = parts[1];\n    out.row = parts[2];\n    out.col = parts[3];\n    out.page = parts[4];\n\n    // LEGACY\n    out.locatorPosition = out;\n\n    this.emit('response', out);\n    this.emit('response ' + out.event, out);\n\n    return;\n  }\n\n  // OSC Ps ; Pt BEL\n  // OSC Ps ; Pt ST\n  // Set Text Parameters\n  if (parts = /^\\x1b\\](\\d+);([^\\x07\\x1b]+)(?:\\x07|\\x1b\\\\)/.exec(s)) {\n    out.event = 'text-params';\n    out.code = 'Set Text Parameters';\n    out.ps = +s[1];\n    out.pt = s[2];\n    this.emit('response', out);\n    this.emit('response ' + out.event, out);\n  }\n};\n\nProgram.prototype.response = function(name, text, callback, noBypass) {\n  var self = this;\n\n  if (arguments.length === 2) {\n    callback = text;\n    text = name;\n    name = null;\n  }\n\n  if (!callback) {\n    callback = function() {};\n  }\n\n  this.bindResponse();\n\n  name = name\n    ? 'response ' + name\n    : 'response';\n\n  var onresponse;\n\n  this.once(name, onresponse = function(event) {\n    if (timeout) clearTimeout(timeout);\n    if (event.type === 'error') {\n      return callback(new Error(event.event + ': ' + event.text));\n    }\n    return callback(null, event);\n  });\n\n  var timeout = setTimeout(function() {\n    self.removeListener(name, onresponse);\n    return callback(new Error('Timeout.'));\n  }, 2000);\n\n  return noBypass\n    ? this._write(text)\n    : this._twrite(text);\n};\n\nProgram.prototype._owrite =\nProgram.prototype.write = function(text) {\n  if (!this.output.writable) return;\n  return this.output.write(text);\n};\n\nProgram.prototype._buffer = function(text) {\n  if (this._exiting) {\n    this.flush();\n    this._owrite(text);\n    return;\n  }\n\n  if (this._buf) {\n    this._buf += text;\n    return;\n  }\n\n  this._buf = text;\n\n  nextTick(this._flush);\n\n  return true;\n};\n\nProgram.prototype.flush = function() {\n  if (!this._buf) return;\n  this._owrite(this._buf);\n  this._buf = '';\n};\n\nProgram.prototype._write = function(text) {\n  if (this.ret) return text;\n  if (this.useBuffer) {\n    return this._buffer(text);\n  }\n  return this._owrite(text);\n};\n\n// Example: `DCS tmux; ESC Pt ST`\n// Real: `DCS tmux; ESC Pt ESC \\`\nProgram.prototype._twrite = function(data) {\n  var self = this\n    , iterations = 0\n    , timer;\n\n  if (this.tmux) {\n    // Replace all STs with BELs so they can be nested within the DCS code.\n    data = data.replace(/\\x1b\\\\/g, '\\x07');\n\n    // Wrap in tmux forward DCS:\n    data = '\\x1bPtmux;\\x1b' + data + '\\x1b\\\\';\n\n    // If we've never even flushed yet, it means we're still in\n    // the normal buffer. Wait for alt screen buffer.\n    if (this.output.bytesWritten === 0) {\n      timer = setInterval(function() {\n        if (self.output.bytesWritten > 0 || ++iterations === 50) {\n          clearInterval(timer);\n          self.flush();\n          self._owrite(data);\n        }\n      }, 100);\n      return true;\n    }\n\n    // NOTE: Flushing the buffer is required in some cases.\n    // The DCS code must be at the start of the output.\n    this.flush();\n\n    // Write out raw now that the buffer is flushed.\n    return this._owrite(data);\n  }\n\n  return this._write(data);\n};\n\nProgram.prototype.echo =\nProgram.prototype.print = function(text, attr) {\n  return attr\n    ? this._write(this.text(text, attr))\n    : this._write(text);\n};\n\nProgram.prototype._ncoords = function() {\n  if (this.x < 0) this.x = 0;\n  else if (this.x >= this.cols) this.x = this.cols - 1;\n  if (this.y < 0) this.y = 0;\n  else if (this.y >= this.rows) this.y = this.rows - 1;\n};\n\nProgram.prototype.setx = function(x) {\n  return this.cursorCharAbsolute(x);\n  // return this.charPosAbsolute(x);\n};\n\nProgram.prototype.sety = function(y) {\n  return this.linePosAbsolute(y);\n};\n\nProgram.prototype.move = function(x, y) {\n  return this.cursorPos(y, x);\n};\n\n// TODO: Fix cud and cuu calls.\nProgram.prototype.omove = function(x, y) {\n  if (!this.zero) {\n    x = (x || 1) - 1;\n    y = (y || 1) - 1;\n  } else {\n    x = x || 0;\n    y = y || 0;\n  }\n  if (y === this.y && x === this.x) {\n    return;\n  }\n  if (y === this.y) {\n    if (x > this.x) {\n      this.cuf(x - this.x);\n    } else if (x < this.x) {\n      this.cub(this.x - x);\n    }\n  } else if (x === this.x) {\n    if (y > this.y) {\n      this.cud(y - this.y);\n    } else if (y < this.y) {\n      this.cuu(this.y - y);\n    }\n  } else {\n    if (!this.zero) x++, y++;\n    this.cup(y, x);\n  }\n};\n\nProgram.prototype.rsetx = function(x) {\n  // return this.HPositionRelative(x);\n  if (!x) return;\n  return x > 0\n    ? this.forward(x)\n    : this.back(-x);\n};\n\nProgram.prototype.rsety = function(y) {\n  // return this.VPositionRelative(y);\n  if (!y) return;\n  return y > 0\n    ? this.up(y)\n    : this.down(-y);\n};\n\nProgram.prototype.rmove = function(x, y) {\n  this.rsetx(x);\n  this.rsety(y);\n};\n\nProgram.prototype.simpleInsert = function(ch, i, attr) {\n  return this._write(this.repeat(ch, i), attr);\n};\n\nProgram.prototype.repeat = function(ch, i) {\n  if (!i || i < 0) i = 0;\n  return Array(i + 1).join(ch);\n};\n\nProgram.prototype.__defineGetter__('title', function() {\n  return this._title;\n});\n\nProgram.prototype.__defineSetter__('title', function(title) {\n  this.setTitle(title);\n  return this._title;\n});\n\n// Specific to iTerm2, but I think it's really cool.\n// Example:\n//  if (!screen.copyToClipboard(text)) {\n//    execClipboardProgram(text);\n//  }\nProgram.prototype.copyToClipboard = function(text) {\n  if (this.isiTerm2) {\n    this._twrite('\\x1b]50;CopyToCliboard=' + text + '\\x07');\n    return true;\n  }\n  return false;\n};\n\n// Only XTerm and iTerm2. If you know of any others, post them.\nProgram.prototype.cursorShape = function(shape, blink) {\n  if (this.isiTerm2) {\n    switch (shape) {\n      case 'block':\n        if (!blink) {\n          this._twrite('\\x1b]50;CursorShape=0;BlinkingCursorEnabled=0\\x07');\n        } else {\n          this._twrite('\\x1b]50;CursorShape=0;BlinkingCursorEnabled=1\\x07');\n        }\n        break;\n      case 'underline':\n        if (!blink) {\n          // this._twrite('\\x1b]50;CursorShape=n;BlinkingCursorEnabled=0\\x07');\n        } else {\n          // this._twrite('\\x1b]50;CursorShape=n;BlinkingCursorEnabled=1\\x07');\n        }\n        break;\n      case 'line':\n        if (!blink) {\n          this._twrite('\\x1b]50;CursorShape=1;BlinkingCursorEnabled=0\\x07');\n        } else {\n          this._twrite('\\x1b]50;CursorShape=1;BlinkingCursorEnabled=1\\x07');\n        }\n        break;\n    }\n    return true;\n  } else if (this.term('xterm') || this.term('screen')) {\n    switch (shape) {\n      case 'block':\n        if (!blink) {\n          this._twrite('\\x1b[0 q');\n        } else {\n          this._twrite('\\x1b[1 q');\n        }\n        break;\n      case 'underline':\n        if (!blink) {\n          this._twrite('\\x1b[2 q');\n        } else {\n          this._twrite('\\x1b[3 q');\n        }\n        break;\n      case 'line':\n        if (!blink) {\n          this._twrite('\\x1b[4 q');\n        } else {\n          this._twrite('\\x1b[5 q');\n        }\n        break;\n    }\n    return true;\n  }\n  return false;\n};\n\nProgram.prototype.cursorColor = function(color) {\n  if (this.term('xterm') || this.term('rxvt') || this.term('screen')) {\n    this._twrite('\\x1b]12;' + color + '\\x07');\n    return true;\n  }\n  return false;\n};\n\nProgram.prototype.cursorReset =\nProgram.prototype.resetCursor = function() {\n  if (this.term('xterm') || this.term('rxvt') || this.term('screen')) {\n    // XXX\n    // return this.resetColors();\n    this._twrite('\\x1b[0 q');\n    this._twrite('\\x1b]112\\x07');\n    // urxvt doesnt support OSC 112\n    this._twrite('\\x1b]12;white\\x07');\n    return true;\n  }\n  return false;\n};\n\nProgram.prototype.getTextParams = function(param, callback) {\n  return this.response('text-params', '\\x1b]' + param + ';?\\x07', function(err, data) {\n    if (err) return callback(err);\n    return callback(null, data.pt);\n  });\n};\n\nProgram.prototype.getCursorColor = function(callback) {\n  return this.getTextParams(12, callback);\n};\n\n/**\n * Normal\n */\n\n//Program.prototype.pad =\nProgram.prototype.nul = function() {\n  //if (this.has('pad')) return this.put.pad();\n  return this._write('\\200');\n};\n\nProgram.prototype.bel =\nProgram.prototype.bell = function() {\n  if (this.has('bel')) return this.put.bel();\n  return this._write('\\x07');\n};\n\nProgram.prototype.vtab = function() {\n  this.y++;\n  this._ncoords();\n  return this._write('\\x0b');\n};\n\nProgram.prototype.ff =\nProgram.prototype.form = function() {\n  if (this.has('ff')) return this.put.ff();\n  return this._write('\\x0c');\n};\n\nProgram.prototype.kbs =\nProgram.prototype.backspace = function() {\n  this.x--;\n  this._ncoords();\n  if (this.has('kbs')) return this.put.kbs();\n  return this._write('\\x08');\n};\n\nProgram.prototype.ht =\nProgram.prototype.tab = function() {\n  this.x += 8;\n  this._ncoords();\n  if (this.has('ht')) return this.put.ht();\n  return this._write('\\t');\n};\n\nProgram.prototype.shiftOut = function() {\n  // if (this.has('S2')) return this.put.S2();\n  return this._write('\\x0e');\n};\n\nProgram.prototype.shiftIn = function() {\n  // if (this.has('S3')) return this.put.S3();\n  return this._write('\\x0f');\n};\n\nProgram.prototype.cr =\nProgram.prototype.return = function() {\n  this.x = 0;\n  if (this.has('cr')) return this.put.cr();\n  return this._write('\\r');\n};\n\nProgram.prototype.nel =\nProgram.prototype.newline =\nProgram.prototype.feed = function() {\n  if (this.tput && this.tput.bools.eat_newline_glitch && this.x >= this.cols) {\n    return;\n  }\n  this.x = 0;\n  this.y++;\n  this._ncoords();\n  if (this.has('nel')) return this.put.nel();\n  return this._write('\\n');\n};\n\n/**\n * Esc\n */\n\n// ESC D Index (IND is 0x84).\nProgram.prototype.ind =\nProgram.prototype.index = function() {\n  this.y++;\n  this._ncoords();\n  if (this.tput) return this.put.ind();\n  return this._write('\\x1bD');\n};\n\n// ESC M Reverse Index (RI is 0x8d).\nProgram.prototype.ri =\nProgram.prototype.reverse =\nProgram.prototype.reverseIndex = function() {\n  this.y--;\n  this._ncoords();\n  if (this.tput) return this.put.ri();\n  return this._write('\\x1bM');\n};\n\n// ESC E Next Line (NEL is 0x85).\nProgram.prototype.nextLine = function() {\n  this.y++;\n  this.x = 0;\n  this._ncoords();\n  if (this.has('nel')) return this.put.nel();\n  return this._write('\\x1bE');\n};\n\n// ESC c Full Reset (RIS).\nProgram.prototype.reset = function() {\n  this.x = this.y = 0;\n  if (this.has('rs1') || this.has('ris')) {\n    return this.has('rs1')\n      ? this.put.rs1()\n      : this.put.ris();\n  }\n  return this._write('\\x1bc');\n};\n\n// ESC H Tab Set (HTS is 0x88).\nProgram.prototype.tabSet = function() {\n  if (this.tput) return this.put.hts();\n  return this._write('\\x1bH');\n};\n\n// ESC 7 Save Cursor (DECSC).\nProgram.prototype.sc =\nProgram.prototype.saveCursor = function(key) {\n  if (key) return this.lsaveCursor(key);\n  this.savedX = this.x || 0;\n  this.savedY = this.y || 0;\n  if (this.tput) return this.put.sc();\n  return this._write('\\x1b7');\n};\n\n// ESC 8 Restore Cursor (DECRC).\nProgram.prototype.rc =\nProgram.prototype.restoreCursor = function(key, hide) {\n  if (key) return this.lrestoreCursor(key, hide);\n  this.x = this.savedX || 0;\n  this.y = this.savedY || 0;\n  if (this.tput) return this.put.rc();\n  return this._write('\\x1b8');\n};\n\n// Save Cursor Locally\nProgram.prototype.lsaveCursor = function(key) {\n  key = key || 'local';\n  this._saved = this._saved || {};\n  this._saved[key] = this._saved[key] || {};\n  this._saved[key].x = this.x;\n  this._saved[key].y = this.y;\n  this._saved[key].hidden = this.cursorHidden;\n};\n\n// Restore Cursor Locally\nProgram.prototype.lrestoreCursor = function(key, hide) {\n  var pos;\n  key = key || 'local';\n  if (!this._saved || !this._saved[key]) return;\n  pos = this._saved[key];\n  //delete this._saved[key];\n  this.cup(pos.y, pos.x);\n  if (hide && pos.hidden !== this.cursorHidden) {\n    if (pos.hidden) {\n      this.hideCursor();\n    } else {\n      this.showCursor();\n    }\n  }\n};\n\n// ESC # 3 DEC line height/width\nProgram.prototype.lineHeight = function() {\n  return this._write('\\x1b#');\n};\n\n// ESC (,),*,+,-,. Designate G0-G2 Character Set.\nProgram.prototype.charset = function(val, level) {\n  level = level || 0;\n\n  // See also:\n  // acs_chars / acsc / ac\n  // enter_alt_charset_mode / smacs / as\n  // exit_alt_charset_mode / rmacs / ae\n  // enter_pc_charset_mode / smpch / S2\n  // exit_pc_charset_mode / rmpch / S3\n\n  switch (level) {\n    case 0:\n      level = '(';\n      break;\n    case 1:\n      level = ')';\n      break;\n    case 2:\n      level = '*';\n      break;\n    case 3:\n      level = '+';\n      break;\n  }\n\n  var name = typeof val === 'string'\n    ? val.toLowerCase()\n    : val;\n\n  switch (name) {\n    case 'acs':\n    case 'scld': // DEC Special Character and Line Drawing Set.\n      if (this.tput) return this.put.smacs();\n      val = '0';\n      break;\n    case 'uk': // UK\n      val = 'A';\n      break;\n    case 'us': // United States (USASCII).\n    case 'usascii':\n    case 'ascii':\n      if (this.tput) return this.put.rmacs();\n      val = 'B';\n      break;\n    case 'dutch': // Dutch\n      val = '4';\n      break;\n    case 'finnish': // Finnish\n      val = 'C';\n      val = '5';\n      break;\n    case 'french': // French\n      val = 'R';\n      break;\n    case 'frenchcanadian': // FrenchCanadian\n      val = 'Q';\n      break;\n    case 'german':  // German\n      val = 'K';\n      break;\n    case 'italian': // Italian\n      val = 'Y';\n      break;\n    case 'norwegiandanish': // NorwegianDanish\n      val = 'E';\n      val = '6';\n      break;\n    case 'spanish': // Spanish\n      val = 'Z';\n      break;\n    case 'swedish': // Swedish\n      val = 'H';\n      val = '7';\n      break;\n    case 'swiss': // Swiss\n      val = '=';\n      break;\n    case 'isolatin': // ISOLatin (actually /A)\n      val = '/A';\n      break;\n    default: // Default\n      if (this.tput) return this.put.rmacs();\n      val = 'B';\n      break;\n  }\n\n  return this._write('\\x1b(' + val);\n};\n\nProgram.prototype.enter_alt_charset_mode =\nProgram.prototype.as =\nProgram.prototype.smacs = function() {\n  return this.charset('acs');\n};\n\nProgram.prototype.exit_alt_charset_mode =\nProgram.prototype.ae =\nProgram.prototype.rmacs = function() {\n  return this.charset('ascii');\n};\n\n// ESC N\n// Single Shift Select of G2 Character Set\n// ( SS2 is 0x8e). This affects next character only.\n// ESC O\n// Single Shift Select of G3 Character Set\n// ( SS3 is 0x8f). This affects next character only.\n// ESC n\n// Invoke the G2 Character Set as GL (LS2).\n// ESC o\n// Invoke the G3 Character Set as GL (LS3).\n// ESC |\n// Invoke the G3 Character Set as GR (LS3R).\n// ESC }\n// Invoke the G2 Character Set as GR (LS2R).\n// ESC ~\n// Invoke the G1 Character Set as GR (LS1R).\nProgram.prototype.setG = function(val) {\n  // if (this.tput) return this.put.S2();\n  // if (this.tput) return this.put.S3();\n  switch (val) {\n    case 1:\n      val = '~'; // GR\n      break;\n    case 2:\n      val = 'n'; // GL\n      val = '}'; // GR\n      val = 'N'; // Next Char Only\n      break;\n    case 3:\n      val = 'o'; // GL\n      val = '|'; // GR\n      val = 'O'; // Next Char Only\n      break;\n  }\n  return this._write('\\x1b' + val);\n};\n\n/**\n * OSC\n */\n\n// OSC Ps ; Pt ST\n// OSC Ps ; Pt BEL\n//   Set Text Parameters.\nProgram.prototype.setTitle = function(title) {\n  this._title = title;\n\n  // if (this.term('screen')) {\n  //   // Tmux pane\n  //   // if (this.tmux) {\n  //   //   return this._write('\\x1b]2;' + title + '\\x1b\\\\');\n  //   // }\n  //   return this._write('\\x1bk' + title + '\\x1b\\\\');\n  // }\n\n  return this._twrite('\\x1b]0;' + title + '\\x07');\n};\n\n// OSC Ps ; Pt ST\n// OSC Ps ; Pt BEL\n//   Reset colors\nProgram.prototype.resetColors = function(param) {\n  if (this.has('Cr')) {\n    return this.put.Cr(param);\n  }\n  return this._twrite('\\x1b]112\\x07');\n  //return this._twrite('\\x1b]112;' + param + '\\x07');\n};\n\n// OSC Ps ; Pt ST\n// OSC Ps ; Pt BEL\n//   Change dynamic colors\nProgram.prototype.dynamicColors = function(param) {\n  if (this.has('Cs')) {\n    return this.put.Cs(param);\n  }\n  return this._twrite('\\x1b]12;' + param + '\\x07');\n};\n\n// OSC Ps ; Pt ST\n// OSC Ps ; Pt BEL\n//   Sel data\nProgram.prototype.selData = function(a, b) {\n  if (this.has('Ms')) {\n    return this.put.Ms(a, b);\n  }\n  return this._twrite('\\x1b]52;' + a + ';' + b + '\\x07');\n};\n\n/**\n * CSI\n */\n\n// CSI Ps A\n// Cursor Up Ps Times (default = 1) (CUU).\nProgram.prototype.cuu =\nProgram.prototype.up =\nProgram.prototype.cursorUp = function(param) {\n  this.y -= param || 1;\n  this._ncoords();\n  if (this.tput) {\n    if (!this.tput.strings.parm_up_cursor) {\n      return this._write(this.repeat(this.tput.cuu1(), param));\n    }\n    return this.put.cuu(param);\n  }\n  return this._write('\\x1b[' + (param || '') + 'A');\n};\n\n// CSI Ps B\n// Cursor Down Ps Times (default = 1) (CUD).\nProgram.prototype.cud =\nProgram.prototype.down =\nProgram.prototype.cursorDown = function(param) {\n  this.y += param || 1;\n  this._ncoords();\n  if (this.tput) {\n    if (!this.tput.strings.parm_down_cursor) {\n      return this._write(this.repeat(this.tput.cud1(), param));\n    }\n    return this.put.cud(param);\n  }\n  return this._write('\\x1b[' + (param || '') + 'B');\n};\n\n// CSI Ps C\n// Cursor Forward Ps Times (default = 1) (CUF).\nProgram.prototype.cuf =\nProgram.prototype.right =\nProgram.prototype.forward =\nProgram.prototype.cursorForward = function(param) {\n  this.x += param || 1;\n  this._ncoords();\n  if (this.tput) {\n    if (!this.tput.strings.parm_right_cursor) {\n      return this._write(this.repeat(this.tput.cuf1(), param));\n    }\n    return this.put.cuf(param);\n  }\n  return this._write('\\x1b[' + (param || '') + 'C');\n};\n\n// CSI Ps D\n// Cursor Backward Ps Times (default = 1) (CUB).\nProgram.prototype.cub =\nProgram.prototype.left =\nProgram.prototype.back =\nProgram.prototype.cursorBackward = function(param) {\n  this.x -= param || 1;\n  this._ncoords();\n  if (this.tput) {\n    if (!this.tput.strings.parm_left_cursor) {\n      return this._write(this.repeat(this.tput.cub1(), param));\n    }\n    return this.put.cub(param);\n  }\n  return this._write('\\x1b[' + (param || '') + 'D');\n};\n\n// CSI Ps ; Ps H\n// Cursor Position [row;column] (default = [1,1]) (CUP).\nProgram.prototype.cup =\nProgram.prototype.pos =\nProgram.prototype.cursorPos = function(row, col) {\n  if (!this.zero) {\n    row = (row || 1) - 1;\n    col = (col || 1) - 1;\n  } else {\n    row = row || 0;\n    col = col || 0;\n  }\n  this.x = col;\n  this.y = row;\n  this._ncoords();\n  if (this.tput) return this.put.cup(row, col);\n  return this._write('\\x1b[' + (row + 1) + ';' + (col + 1) + 'H');\n};\n\n// CSI Ps J  Erase in Display (ED).\n//     Ps = 0  -> Erase Below (default).\n//     Ps = 1  -> Erase Above.\n//     Ps = 2  -> Erase All.\n//     Ps = 3  -> Erase Saved Lines (xterm).\n// CSI ? Ps J\n//   Erase in Display (DECSED).\n//     Ps = 0  -> Selective Erase Below (default).\n//     Ps = 1  -> Selective Erase Above.\n//     Ps = 2  -> Selective Erase All.\nProgram.prototype.ed =\nProgram.prototype.eraseInDisplay = function(param) {\n  if (this.tput) {\n    switch (param) {\n      case 'above':\n        param = 1;\n        break;\n      case 'all':\n        param = 2;\n        break;\n      case 'saved':\n        param = 3;\n        break;\n      case 'below':\n      default:\n        param = 0;\n        break;\n    }\n    // extended tput.E3 = ^[[3;J\n    return this.put.ed(param);\n  }\n  switch (param) {\n    case 'above':\n      return this._write('\\X1b[1J');\n    case 'all':\n      return this._write('\\x1b[2J');\n    case 'saved':\n      return this._write('\\x1b[3J');\n    case 'below':\n    default:\n      return this._write('\\x1b[J');\n  }\n};\n\nProgram.prototype.clear = function() {\n  this.x = 0;\n  this.y = 0;\n  if (this.tput) return this.put.clear();\n  return this._write('\\x1b[H\\x1b[J');\n};\n\n// CSI Ps K  Erase in Line (EL).\n//     Ps = 0  -> Erase to Right (default).\n//     Ps = 1  -> Erase to Left.\n//     Ps = 2  -> Erase All.\n// CSI ? Ps K\n//   Erase in Line (DECSEL).\n//     Ps = 0  -> Selective Erase to Right (default).\n//     Ps = 1  -> Selective Erase to Left.\n//     Ps = 2  -> Selective Erase All.\nProgram.prototype.el =\nProgram.prototype.eraseInLine = function(param) {\n  if (this.tput) {\n    //if (this.tput.back_color_erase) ...\n    switch (param) {\n      case 'left':\n        param = 1;\n        break;\n      case 'all':\n        param = 2;\n        break;\n      case 'right':\n      default:\n        param = 0;\n        break;\n    }\n    return this.put.el(param);\n  }\n  switch (param) {\n    case 'left':\n      return this._write('\\x1b[1K');\n    case 'all':\n      return this._write('\\x1b[2K');\n    case 'right':\n    default:\n      return this._write('\\x1b[K');\n  }\n};\n\n// CSI Pm m  Character Attributes (SGR).\n//     Ps = 0  -> Normal (default).\n//     Ps = 1  -> Bold.\n//     Ps = 4  -> Underlined.\n//     Ps = 5  -> Blink (appears as Bold).\n//     Ps = 7  -> Inverse.\n//     Ps = 8  -> Invisible, i.e., hidden (VT300).\n//     Ps = 2 2  -> Normal (neither bold nor faint).\n//     Ps = 2 4  -> Not underlined.\n//     Ps = 2 5  -> Steady (not blinking).\n//     Ps = 2 7  -> Positive (not inverse).\n//     Ps = 2 8  -> Visible, i.e., not hidden (VT300).\n//     Ps = 3 0  -> Set foreground color to Black.\n//     Ps = 3 1  -> Set foreground color to Red.\n//     Ps = 3 2  -> Set foreground color to Green.\n//     Ps = 3 3  -> Set foreground color to Yellow.\n//     Ps = 3 4  -> Set foreground color to Blue.\n//     Ps = 3 5  -> Set foreground color to Magenta.\n//     Ps = 3 6  -> Set foreground color to Cyan.\n//     Ps = 3 7  -> Set foreground color to White.\n//     Ps = 3 9  -> Set foreground color to default (original).\n//     Ps = 4 0  -> Set background color to Black.\n//     Ps = 4 1  -> Set background color to Red.\n//     Ps = 4 2  -> Set background color to Green.\n//     Ps = 4 3  -> Set background color to Yellow.\n//     Ps = 4 4  -> Set background color to Blue.\n//     Ps = 4 5  -> Set background color to Magenta.\n//     Ps = 4 6  -> Set background color to Cyan.\n//     Ps = 4 7  -> Set background color to White.\n//     Ps = 4 9  -> Set background color to default (original).\n\n//   If 16-color support is compiled, the following apply.  Assume\n//   that xterm's resources are set so that the ISO color codes are\n//   the first 8 of a set of 16.  Then the aixterm colors are the\n//   bright versions of the ISO colors:\n//     Ps = 9 0  -> Set foreground color to Black.\n//     Ps = 9 1  -> Set foreground color to Red.\n//     Ps = 9 2  -> Set foreground color to Green.\n//     Ps = 9 3  -> Set foreground color to Yellow.\n//     Ps = 9 4  -> Set foreground color to Blue.\n//     Ps = 9 5  -> Set foreground color to Magenta.\n//     Ps = 9 6  -> Set foreground color to Cyan.\n//     Ps = 9 7  -> Set foreground color to White.\n//     Ps = 1 0 0  -> Set background color to Black.\n//     Ps = 1 0 1  -> Set background color to Red.\n//     Ps = 1 0 2  -> Set background color to Green.\n//     Ps = 1 0 3  -> Set background color to Yellow.\n//     Ps = 1 0 4  -> Set background color to Blue.\n//     Ps = 1 0 5  -> Set background color to Magenta.\n//     Ps = 1 0 6  -> Set background color to Cyan.\n//     Ps = 1 0 7  -> Set background color to White.\n\n//   If xterm is compiled with the 16-color support disabled, it\n//   supports the following, from rxvt:\n//     Ps = 1 0 0  -> Set foreground and background color to\n//     default.\n\n//   If 88- or 256-color support is compiled, the following apply.\n//     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second\n//     Ps.\n//     Ps = 4 8  ; 5  ; Ps -> Set background color to the second\n//     Ps.\nProgram.prototype.sgr =\nProgram.prototype.attr =\nProgram.prototype.charAttributes = function(param, val) {\n  return this._write(this._attr(param, val));\n};\n\nProgram.prototype.text = function(text, attr) {\n  return this._attr(attr, true) + text + this._attr(attr, false);\n};\n\n// NOTE: sun-color may not allow multiple params for SGR.\nProgram.prototype._attr = function(param, val) {\n  var self = this\n    , parts\n    , color\n    , m;\n\n  if (Array.isArray(param)) {\n    parts = param;\n    param = parts[0] || 'normal';\n  } else {\n    param = param || 'normal';\n    parts = param.split(/\\s*[,;]\\s*/);\n  }\n\n  if (parts.length > 1) {\n    var used = {}\n      , out = [];\n\n    parts.forEach(function(part) {\n      part = self._attr(part, val).slice(2, -1);\n      if (part === '') return;\n      if (used[part]) return;\n      used[part] = true;\n      out.push(part);\n    });\n\n    return '\\x1b[' + out.join(';') + 'm';\n  }\n\n  if (param.indexOf('no ') === 0) {\n    param = param.substring(3);\n    val = false;\n  } else if (param.indexOf('!') === 0) {\n    param = param.substring(1);\n    val = false;\n  }\n\n  switch (param) {\n    // attributes\n    case 'normal':\n    case 'default':\n      if (val === false) return '';\n      return '\\x1b[m';\n    case 'bold':\n      return val === false\n        ? '\\x1b[22m'\n        : '\\x1b[1m';\n    case 'ul':\n    case 'underline':\n    case 'underlined':\n      return val === false\n        ? '\\x1b[24m'\n        : '\\x1b[4m';\n    case 'blink':\n      return val === false\n        ? '\\x1b[25m'\n        : '\\x1b[5m';\n    case 'inverse':\n      return val === false\n        ? '\\x1b[27m'\n        : '\\x1b[7m';\n    case 'invisible':\n      return val === false\n        ? '\\x1b[28m'\n        : '\\x1b[8m';\n\n    // 8-color foreground\n    case 'black fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[30m';\n    case 'red fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[31m';\n    case 'green fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[32m';\n    case 'yellow fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[33m';\n    case 'blue fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[34m';\n    case 'magenta fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[35m';\n    case 'cyan fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[36m';\n    case 'white fg':\n    case 'light grey fg':\n    case 'light gray fg':\n    case 'bright grey fg':\n    case 'bright gray fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[37m';\n    case 'default fg':\n      if (val === false) return '';\n      return '\\x1b[39m';\n\n    // 8-color background\n    case 'black bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[40m';\n    case 'red bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[41m';\n    case 'green bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[42m';\n    case 'yellow bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[43m';\n    case 'blue bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[44m';\n    case 'magenta bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[45m';\n    case 'cyan bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[46m';\n    case 'white bg':\n    case 'light grey bg':\n    case 'light gray bg':\n    case 'bright grey bg':\n    case 'bright gray bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[47m';\n    case 'default bg':\n      if (val === false) return '';\n      return '\\x1b[49m';\n\n    // 16-color foreground\n    case 'light black fg':\n    case 'bright black fg':\n    case 'grey fg':\n    case 'gray fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[90m';\n    case 'light red fg':\n    case 'bright red fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[91m';\n    case 'light green fg':\n    case 'bright green fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[92m';\n    case 'light yellow fg':\n    case 'bright yellow fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[93m';\n    case 'light blue fg':\n    case 'bright blue fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[94m';\n    case 'light magenta fg':\n    case 'bright magenta fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[95m';\n    case 'light cyan fg':\n    case 'bright cyan fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[96m';\n    case 'light white fg':\n    case 'bright white fg':\n      return val === false\n        ? '\\x1b[39m'\n        : '\\x1b[97m';\n\n    // 16-color background\n    case 'light black bg':\n    case 'bright black bg':\n    case 'grey bg':\n    case 'gray bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[100m';\n    case 'light red bg':\n    case 'bright red bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[101m';\n    case 'light green bg':\n    case 'bright green bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[102m';\n    case 'light yellow bg':\n    case 'bright yellow bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[103m';\n    case 'light blue bg':\n    case 'bright blue bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[104m';\n    case 'light magenta bg':\n    case 'bright magenta bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[105m';\n    case 'light cyan bg':\n    case 'bright cyan bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[106m';\n    case 'light white bg':\n    case 'bright white bg':\n      return val === false\n        ? '\\x1b[49m'\n        : '\\x1b[107m';\n\n    // non-16-color rxvt default fg and bg\n    case 'default fg bg':\n      if (val === false) return '';\n      return this.term('rxvt')\n        ? '\\x1b[100m'\n        : '\\x1b[39;49m';\n\n    default:\n      // 256-color fg and bg\n      if (param[0] === '#') {\n        param = param.replace(/#(?:[0-9a-f]{3}){1,2}/i, colors.match);\n      }\n\n      m = /^(-?\\d+) (fg|bg)$/.exec(param);\n      if (m) {\n        color = +m[1];\n\n        if (val === false || color === -1) {\n          return this._attr('default ' + m[2]);\n        }\n\n        color = colors.reduce(color, this.tput.colors);\n\n        if (color < 16 || (this.tput && this.tput.colors <= 16)) {\n          if (m[2] === 'fg') {\n            if (color < 8) {\n              color += 30;\n            } else if (color < 16) {\n              color -= 8;\n              color += 90;\n            }\n          } else if (m[2] === 'bg') {\n            if (color < 8) {\n              color += 40;\n            } else if (color < 16) {\n              color -= 8;\n              color += 100;\n            }\n          }\n          return '\\x1b[' + color + 'm';\n        }\n\n        if (m[2] === 'fg') {\n          return '\\x1b[38;5;' + color + 'm';\n        }\n\n        if (m[2] === 'bg') {\n          return '\\x1b[48;5;' + color + 'm';\n        }\n      }\n\n      if (/^[\\d;]*$/.test(param)) {\n        return '\\x1b[' + param + 'm';\n      }\n\n      return null;\n  }\n};\n\nProgram.prototype.fg =\nProgram.prototype.setForeground = function(color, val) {\n  color = color.split(/\\s*[,;]\\s*/).join(' fg, ') + ' fg';\n  return this.attr(color, val);\n};\n\nProgram.prototype.bg =\nProgram.prototype.setBackground = function(color, val) {\n  color = color.split(/\\s*[,;]\\s*/).join(' bg, ') + ' bg';\n  return this.attr(color, val);\n};\n\n// CSI Ps n  Device Status Report (DSR).\n//     Ps = 5  -> Status Report.  Result (``OK'') is\n//   CSI 0 n\n//     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n//   Result is\n//   CSI r ; c R\n// CSI ? Ps n\n//   Device Status Report (DSR, DEC-specific).\n//     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n//     ? r ; c R (assumes page is zero).\n//     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n//     or CSI ? 1 1  n  (not ready).\n//     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n//     or CSI ? 2 1  n  (locked).\n//     Ps = 2 6  -> Report Keyboard status as\n//   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n//   The last two parameters apply to VT400 & up, and denote key-\n//   board ready and LK01 respectively.\n//     Ps = 5 3  -> Report Locator status as\n//   CSI ? 5 3  n  Locator available, if compiled-in, or\n//   CSI ? 5 0  n  No Locator, if not.\nProgram.prototype.dsr =\nProgram.prototype.deviceStatus = function(param, callback, dec, noBypass) {\n  if (dec) {\n    return this.response('device-status',\n      '\\x1b[?' + (param || '0') + 'n', callback, noBypass);\n  }\n  return this.response('device-status',\n    '\\x1b[' + (param || '0') + 'n', callback, noBypass);\n};\n\nProgram.prototype.getCursor = function(callback) {\n  return this.deviceStatus(6, callback, false, true);\n};\n\nProgram.prototype.saveReportedCursor = function(callback) {\n  var self = this;\n  if (this.tput.strings.user7 === '\\x1b[6n' || this.term('screen')) {\n    return this.getCursor(function(err, data) {\n      if (data) {\n        self._rx = data.status.x;\n        self._ry = data.status.y;\n      }\n      if (!callback) return;\n      return callback(err);\n    });\n  }\n  if (!callback) return;\n  return callback();\n};\n\nProgram.prototype.restoreReportedCursor = function() {\n  if (this._rx == null) return;\n  return this.cup(this._ry, this._rx);\n  // return this.nel();\n};\n\n/**\n * Additions\n */\n\n// CSI Ps @\n// Insert Ps (Blank) Character(s) (default = 1) (ICH).\nProgram.prototype.ich =\nProgram.prototype.insertChars = function(param) {\n  this.x += param || 1;\n  this._ncoords();\n  if (this.tput) return this.put.ich(param);\n  return this._write('\\x1b[' + (param || 1) + '@');\n};\n\n// CSI Ps E\n// Cursor Next Line Ps Times (default = 1) (CNL).\n// same as CSI Ps B ?\nProgram.prototype.cnl =\nProgram.prototype.cursorNextLine = function(param) {\n  this.y += param || 1;\n  this._ncoords();\n  return this._write('\\x1b[' + (param || '') + 'E');\n};\n\n// CSI Ps F\n// Cursor Preceding Line Ps Times (default = 1) (CNL).\n// reuse CSI Ps A ?\nProgram.prototype.cpl =\nProgram.prototype.cursorPrecedingLine = function(param) {\n  this.y -= param || 1;\n  this._ncoords();\n  return this._write('\\x1b[' + (param || '') + 'F');\n};\n\n// CSI Ps G\n// Cursor Character Absolute  [column] (default = [row,1]) (CHA).\nProgram.prototype.cha =\nProgram.prototype.cursorCharAbsolute = function(param) {\n  if (!this.zero) {\n    param = (param || 1) - 1;\n  } else {\n    param = param || 0;\n  }\n  this.x = param;\n  this.y = 0;\n  this._ncoords();\n  if (this.tput) return this.put.hpa(param);\n  return this._write('\\x1b[' + (param + 1) + 'G');\n};\n\n// CSI Ps L\n// Insert Ps Line(s) (default = 1) (IL).\nProgram.prototype.il =\nProgram.prototype.insertLines = function(param) {\n  if (this.tput) return this.put.il(param);\n  return this._write('\\x1b[' + (param || '') + 'L');\n};\n\n// CSI Ps M\n// Delete Ps Line(s) (default = 1) (DL).\nProgram.prototype.dl =\nProgram.prototype.deleteLines = function(param) {\n  if (this.tput) return this.put.dl(param);\n  return this._write('\\x1b[' + (param || '') + 'M');\n};\n\n// CSI Ps P\n// Delete Ps Character(s) (default = 1) (DCH).\nProgram.prototype.dch =\nProgram.prototype.deleteChars = function(param) {\n  if (this.tput) return this.put.dch(param);\n  return this._write('\\x1b[' + (param || '') + 'P');\n};\n\n// CSI Ps X\n// Erase Ps Character(s) (default = 1) (ECH).\nProgram.prototype.ech =\nProgram.prototype.eraseChars = function(param) {\n  if (this.tput) return this.put.ech(param);\n  return this._write('\\x1b[' + (param || '') + 'X');\n};\n\n// CSI Pm `  Character Position Absolute\n//   [column] (default = [row,1]) (HPA).\nProgram.prototype.hpa =\nProgram.prototype.charPosAbsolute = function(param) {\n  this.x = param || 0;\n  this._ncoords();\n  if (this.tput) {\n    return this.put.hpa.apply(this.put, arguments);\n  }\n  param = slice.call(arguments).join(';');\n  return this._write('\\x1b[' + (param || '') + '`');\n};\n\n// 141 61 a * HPR -\n// Horizontal Position Relative\n// reuse CSI Ps C ?\nProgram.prototype.hpr =\nProgram.prototype.HPositionRelative = function(param) {\n  if (this.tput) return this.cuf(param);\n  this.x += param || 1;\n  this._ncoords();\n  // Does not exist:\n  // if (this.tput) return this.put.hpr(param);\n  return this._write('\\x1b[' + (param || '') + 'a');\n};\n\n// CSI Ps c  Send Device Attributes (Primary DA).\n//     Ps = 0  or omitted -> request attributes from terminal.  The\n//     response depends on the decTerminalID resource setting.\n//     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n//     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n//     -> CSI ? 6 c  (``VT102'')\n//     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n//   The VT100-style response parameters do not mean anything by\n//   themselves.  VT220 parameters do, telling the host what fea-\n//   tures the terminal supports:\n//     Ps = 1  -> 132-columns.\n//     Ps = 2  -> Printer.\n//     Ps = 6  -> Selective erase.\n//     Ps = 8  -> User-defined keys.\n//     Ps = 9  -> National replacement character sets.\n//     Ps = 1 5  -> Technical characters.\n//     Ps = 2 2  -> ANSI color, e.g., VT525.\n//     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n// CSI > Ps c\n//   Send Device Attributes (Secondary DA).\n//     Ps = 0  or omitted -> request the terminal's identification\n//     code.  The response depends on the decTerminalID resource set-\n//     ting.  It should apply only to VT220 and up, but xterm extends\n//     this to VT100.\n//     -> CSI  > Pp ; Pv ; Pc c\n//   where Pp denotes the terminal type\n//     Pp = 0  -> ``VT100''.\n//     Pp = 1  -> ``VT220''.\n//   and Pv is the firmware version (for xterm, this was originally\n//   the XFree86 patch number, starting with 95).  In a DEC termi-\n//   nal, Pc indicates the ROM cartridge registration number and is\n//   always zero.\n// More information:\n//   xterm/charproc.c - line 2012, for more information.\n//   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\nProgram.prototype.da =\nProgram.prototype.sendDeviceAttributes = function(param, callback) {\n  return this.response('device-attributes',\n    '\\x1b[' + (param || '') + 'c', callback);\n};\n\n// CSI Pm d\n// Line Position Absolute  [row] (default = [1,column]) (VPA).\n// NOTE: Can't find in terminfo, no idea why it has multiple params.\nProgram.prototype.vpa =\nProgram.prototype.linePosAbsolute = function(param) {\n  this.y = param || 1;\n  this._ncoords();\n  if (this.tput) {\n    return this.put.vpa.apply(this.put, arguments);\n  }\n  param = slice.call(arguments).join(';');\n  return this._write('\\x1b[' + (param || '') + 'd');\n};\n\n// 145 65 e * VPR - Vertical Position Relative\n// reuse CSI Ps B ?\nProgram.prototype.vpr =\nProgram.prototype.VPositionRelative = function(param) {\n  if (this.tput) return this.cud(param);\n  this.y += param || 1;\n  this._ncoords();\n  // Does not exist:\n  // if (this.tput) return this.put.vpr(param);\n  return this._write('\\x1b[' + (param || '') + 'e');\n};\n\n// CSI Ps ; Ps f\n//   Horizontal and Vertical Position [row;column] (default =\n//   [1,1]) (HVP).\nProgram.prototype.hvp =\nProgram.prototype.HVPosition = function(row, col) {\n  if (!this.zero) {\n    row = (row || 1) - 1;\n    col = (col || 1) - 1;\n  } else {\n    row = row || 0;\n    col = col || 0;\n  }\n  this.y = row;\n  this.x = col;\n  this._ncoords();\n  // Does not exist (?):\n  // if (this.tput) return this.put.hvp(row, col);\n  if (this.tput) return this.put.cup(row, col);\n  return this._write('\\x1b[' + (row + 1) + ';' + (col + 1) + 'f');\n};\n\n// CSI Pm h  Set Mode (SM).\n//     Ps = 2  -> Keyboard Action Mode (AM).\n//     Ps = 4  -> Insert Mode (IRM).\n//     Ps = 1 2  -> Send/receive (SRM).\n//     Ps = 2 0  -> Automatic Newline (LNM).\n// CSI ? Pm h\n//   DEC Private Mode Set (DECSET).\n//     Ps = 1  -> Application Cursor Keys (DECCKM).\n//     Ps = 2  -> Designate USASCII for character sets G0-G3\n//     (DECANM), and set VT100 mode.\n//     Ps = 3  -> 132 Column Mode (DECCOLM).\n//     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n//     Ps = 5  -> Reverse Video (DECSCNM).\n//     Ps = 6  -> Origin Mode (DECOM).\n//     Ps = 7  -> Wraparound Mode (DECAWM).\n//     Ps = 8  -> Auto-repeat Keys (DECARM).\n//     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n//     tion Mouse Tracking.\n//     Ps = 1 0  -> Show toolbar (rxvt).\n//     Ps = 1 2  -> Start Blinking Cursor (att610).\n//     Ps = 1 8  -> Print form feed (DECPFF).\n//     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n//     Ps = 2 5  -> Show Cursor (DECTCEM).\n//     Ps = 3 0  -> Show scrollbar (rxvt).\n//     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n//     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n//     Ps = 4 0  -> Allow 80 -> 132 Mode.\n//     Ps = 4 1  -> more(1) fix (see curses resource).\n//     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n//     RCM).\n//     Ps = 4 4  -> Turn On Margin Bell.\n//     Ps = 4 5  -> Reverse-wraparound Mode.\n//     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n//     compile-time option.\n//     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n//     abled by the titeInhibit resource).\n//     Ps = 6 6  -> Application keypad (DECNKM).\n//     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n//     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n//     release.  See the section Mouse Tracking.\n//     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n//     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n//     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n//     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n//     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n//     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n//     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n//     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n//     (enables the eightBitInput resource).\n//     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n//     Lock keys.  (This enables the numLock resource).\n//     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n//     enables the metaSendsEscape resource).\n//     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n//     key.\n//     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n//     enables the altSendsEscape resource).\n//     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n//     (This enables the keepSelection resource).\n//     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n//     the selectToClipboard resource).\n//     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n//     Control-G is received.  (This enables the bellIsUrgent\n//     resource).\n//     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n//     is received.  (enables the popOnBell resource).\n//     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n//     disabled by the titeInhibit resource).\n//     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n//     abled by the titeInhibit resource).\n//     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n//     Screen Buffer, clearing it first.  (This may be disabled by\n//     the titeInhibit resource).  This combines the effects of the 1\n//     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n//     applications rather than the 4 7  mode.\n//     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n//     Ps = 1 0 5 1  -> Set Sun function-key mode.\n//     Ps = 1 0 5 2  -> Set HP function-key mode.\n//     Ps = 1 0 5 3  -> Set SCO function-key mode.\n//     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n//     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n//     Ps = 2 0 0 4  -> Set bracketed paste mode.\n// Modes:\n//   http://vt100.net/docs/vt220-rm/chapter4.html\nProgram.prototype.sm =\nProgram.prototype.setMode = function() {\n  var param = slice.call(arguments).join(';');\n  return this._write('\\x1b[' + (param || '') + 'h');\n};\n\nProgram.prototype.decset = function() {\n  var param = slice.call(arguments).join(';');\n  return this.setMode('?' + param);\n};\n\nProgram.prototype.dectcem =\nProgram.prototype.cnorm =\nProgram.prototype.cvvis =\nProgram.prototype.showCursor = function() {\n  this.cursorHidden = false;\n  // NOTE: In xterm terminfo:\n  // cnorm stops blinking cursor\n  // cvvis starts blinking cursor\n  if (this.tput) return this.put.cnorm();\n  //if (this.tput) return this.put.cvvis();\n  // return this._write('\\x1b[?12l\\x1b[?25h'); // cursor_normal\n  // return this._write('\\x1b[?12;25h'); // cursor_visible\n  return this.setMode('?25');\n};\n\nProgram.prototype.alternate =\nProgram.prototype.smcup =\nProgram.prototype.alternateBuffer = function() {\n  this.isAlt = true;\n  if (this.tput) return this.put.smcup();\n  if (this.term('vt') || this.term('linux')) return;\n  this.setMode('?47');\n  return this.setMode('?1049');\n};\n\n// CSI Pm l  Reset Mode (RM).\n//     Ps = 2  -> Keyboard Action Mode (AM).\n//     Ps = 4  -> Replace Mode (IRM).\n//     Ps = 1 2  -> Send/receive (SRM).\n//     Ps = 2 0  -> Normal Linefeed (LNM).\n// CSI ? Pm l\n//   DEC Private Mode Reset (DECRST).\n//     Ps = 1  -> Normal Cursor Keys (DECCKM).\n//     Ps = 2  -> Designate VT52 mode (DECANM).\n//     Ps = 3  -> 80 Column Mode (DECCOLM).\n//     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n//     Ps = 5  -> Normal Video (DECSCNM).\n//     Ps = 6  -> Normal Cursor Mode (DECOM).\n//     Ps = 7  -> No Wraparound Mode (DECAWM).\n//     Ps = 8  -> No Auto-repeat Keys (DECARM).\n//     Ps = 9  -> Don't send Mouse X & Y on button press.\n//     Ps = 1 0  -> Hide toolbar (rxvt).\n//     Ps = 1 2  -> Stop Blinking Cursor (att610).\n//     Ps = 1 8  -> Don't print form feed (DECPFF).\n//     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n//     Ps = 2 5  -> Hide Cursor (DECTCEM).\n//     Ps = 3 0  -> Don't show scrollbar (rxvt).\n//     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n//     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n//     Ps = 4 1  -> No more(1) fix (see curses resource).\n//     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n//     NRCM).\n//     Ps = 4 4  -> Turn Off Margin Bell.\n//     Ps = 4 5  -> No Reverse-wraparound Mode.\n//     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n//     compile-time option).\n//     Ps = 4 7  -> Use Normal Screen Buffer.\n//     Ps = 6 6  -> Numeric keypad (DECNKM).\n//     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n//     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n//     release.  See the section Mouse Tracking.\n//     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n//     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n//     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n//     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n//     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n//     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n//     (rxvt).\n//     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n//     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n//     the eightBitInput resource).\n//     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n//     Lock keys.  (This disables the numLock resource).\n//     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n//     (This disables the metaSendsEscape resource).\n//     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n//     Delete key.\n//     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n//     (This disables the altSendsEscape resource).\n//     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n//     (This disables the keepSelection resource).\n//     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n//     the selectToClipboard resource).\n//     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n//     Control-G is received.  (This disables the bellIsUrgent\n//     resource).\n//     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n//     G is received.  (This disables the popOnBell resource).\n//     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n//     first if in the Alternate Screen.  (This may be disabled by\n//     the titeInhibit resource).\n//     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n//     disabled by the titeInhibit resource).\n//     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n//     as in DECRC.  (This may be disabled by the titeInhibit\n//     resource).  This combines the effects of the 1 0 4 7  and 1 0\n//     4 8  modes.  Use this with terminfo-based applications rather\n//     than the 4 7  mode.\n//     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n//     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n//     Ps = 1 0 5 2  -> Reset HP function-key mode.\n//     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n//     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n//     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n//     Ps = 2 0 0 4  -> Reset bracketed paste mode.\nProgram.prototype.rm =\nProgram.prototype.resetMode = function() {\n  var param = slice.call(arguments).join(';');\n  return this._write('\\x1b[' + (param || '') + 'l');\n};\n\nProgram.prototype.decrst = function() {\n  var param = slice.call(arguments).join(';');\n  return this.resetMode('?' + param);\n};\n\nProgram.prototype.dectcemh =\nProgram.prototype.cursor_invisible =\nProgram.prototype.vi =\nProgram.prototype.civis =\nProgram.prototype.hideCursor = function() {\n  this.cursorHidden = true;\n  if (this.tput) return this.put.civis();\n  return this.resetMode('?25');\n};\n\nProgram.prototype.rmcup =\nProgram.prototype.normalBuffer = function() {\n  this.isAlt = false;\n  if (this.tput) return this.put.rmcup();\n  this.resetMode('?47');\n  return this.resetMode('?1049');\n};\n\nProgram.prototype.enableMouse = function() {\n  if (process.env.BLESSED_FORCE_MODES) {\n    var modes = process.env.BLESSED_FORCE_MODES.split(',');\n    var options = {};\n    for (var n = 0; n < modes.length; ++n) {\n      var pair = modes[n].split('=');\n      var v = pair[1] !== '0';\n      switch (pair[0].toUpperCase()) {\n        case 'SGRMOUSE':\n          options.sgrMouse = v;\n          break;\n        case 'UTFMOUSE':\n          options.utfMouse = v;\n          break;\n        case 'VT200MOUSE':\n          options.vt200Mouse = v;\n          break;\n        case 'URXVTMOUSE':\n          options.urxvtMouse = v;\n          break;\n        case 'X10MOUSE':\n          options.x10Mouse = v;\n          break;\n        case 'DECMOUSE':\n          options.decMouse = v;\n          break;\n        case 'PTERMMOUSE':\n          options.ptermMouse = v;\n          break;\n        case 'JSBTERMMOUSE':\n          options.jsbtermMouse = v;\n          break;\n        case 'VT200HILITE':\n          options.vt200Hilite = v;\n          break;\n        case 'GPMMOUSE':\n          options.gpmMouse = v;\n          break;\n        case 'CELLMOTION':\n          options.cellMotion = v;\n          break;\n        case 'ALLMOTION':\n          options.allMotion = v;\n          break;\n        case 'SENDFOCUS':\n          options.sendFocus = v;\n          break;\n      }\n    }\n    return this.setMouse(options, true);\n  }\n\n  // NOTE:\n  // Cell Motion isn't normally need for anything below here, but we'll\n  // activate it for tmux (whether using it or not) in case our all-motion\n  // passthrough does not work. It can't hurt.\n\n  if (this.term('rxvt-unicode')) {\n    return this.setMouse({\n      urxvtMouse: true,\n      cellMotion: true,\n      allMotion: true\n    }, true);\n  }\n\n  // rxvt does not support the X10 UTF extensions\n  if (this.term('rxvt')) {\n    return this.setMouse({\n      vt200Mouse: true,\n      x10Mouse: true,\n      cellMotion: true,\n      allMotion: true\n    }, true);\n  }\n\n  // libvte is broken. Older versions do not support the\n  // X10 UTF extension. However, later versions do support\n  // SGR/URXVT.\n  if (this.isVTE) {\n    return this.setMouse({\n      // NOTE: Could also use urxvtMouse here.\n      sgrMouse: true,\n      cellMotion: true,\n      allMotion: true\n    }, true);\n  }\n\n  if (this.term('linux')) {\n    return this.setMouse({\n      vt200Mouse: true,\n      gpmMouse: true\n    }, true);\n  }\n\n  if (this.term('xterm')\n      || this.term('screen')\n      || (this.tput && this.tput.strings.key_mouse)) {\n    return this.setMouse({\n      vt200Mouse: true,\n      utfMouse: true,\n      cellMotion: true,\n      allMotion: true\n    }, true);\n  }\n};\n\nProgram.prototype.disableMouse = function() {\n  if (!this._currentMouse) return;\n\n  var obj = {};\n\n  Object.keys(this._currentMouse).forEach(function(key) {\n    obj[key] = false;\n  });\n\n  return this.setMouse(obj, false);\n};\n\n// Set Mouse\nProgram.prototype.setMouse = function(opt, enable) {\n  if (opt.normalMouse != null) {\n    opt.vt200Mouse = opt.normalMouse;\n    opt.allMotion = opt.normalMouse;\n  }\n\n  if (opt.hiliteTracking != null) {\n    opt.vt200Hilite = opt.hiliteTracking;\n  }\n\n  if (enable === true) {\n    if (this._currentMouse) {\n      this.setMouse(opt);\n      Object.keys(opt).forEach(function(key) {\n        this._currentMouse[key] = opt[key];\n      }, this);\n      return;\n    }\n    this._currentMouse = opt;\n    this.mouseEnabled = true;\n  } else if (enable === false) {\n    delete this._currentMouse;\n    this.mouseEnabled = false;\n  }\n\n  //     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n  //     tion Mouse Tracking.\n  //     Ps = 9  -> Don't send Mouse X & Y on button press.\n  // x10 mouse\n  if (opt.x10Mouse != null) {\n    if (opt.x10Mouse) this.setMode('?9');\n    else this.resetMode('?9');\n  }\n\n  //     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n  //     release.  See the section Mouse Tracking.\n  //     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n  //     release.  See the section Mouse Tracking.\n  // vt200 mouse\n  if (opt.vt200Mouse != null) {\n    if (opt.vt200Mouse) this.setMode('?1000');\n    else this.resetMode('?1000');\n  }\n\n  //     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n  //     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n  if (opt.vt200Hilite != null) {\n    if (opt.vt200Hilite) this.setMode('?1001');\n    else this.resetMode('?1001');\n  }\n\n  //     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n  //     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n  // button event mouse\n  if (opt.cellMotion != null) {\n    if (opt.cellMotion) this.setMode('?1002');\n    else this.resetMode('?1002');\n  }\n\n  //     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n  //     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n  // any event mouse\n  if (opt.allMotion != null) {\n    // NOTE: Latest versions of tmux seem to only support cellMotion (not\n    // allMotion). We pass all motion through to the terminal.\n    if (this.tmux && this.tmuxVersion >= 2) {\n      if (opt.allMotion) this._twrite('\\x1b[?1003h');\n      else this._twrite('\\x1b[?1003l');\n    } else {\n      if (opt.allMotion) this.setMode('?1003');\n      else this.resetMode('?1003');\n    }\n  }\n\n  //     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n  //     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n  if (opt.sendFocus != null) {\n    if (opt.sendFocus) this.setMode('?1004');\n    else this.resetMode('?1004');\n  }\n\n  //     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n  //     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n  if (opt.utfMouse != null) {\n    if (opt.utfMouse) this.setMode('?1005');\n    else this.resetMode('?1005');\n  }\n\n  // sgr mouse\n  if (opt.sgrMouse != null) {\n    if (opt.sgrMouse) this.setMode('?1006');\n    else this.resetMode('?1006');\n  }\n\n  // urxvt mouse\n  if (opt.urxvtMouse != null) {\n    if (opt.urxvtMouse) this.setMode('?1015');\n    else this.resetMode('?1015');\n  }\n\n  // dec mouse\n  if (opt.decMouse != null) {\n    if (opt.decMouse) this._write('\\x1b[1;2\\'z\\x1b[1;3\\'{');\n    else this._write('\\x1b[\\'z');\n  }\n\n  // pterm mouse\n  if (opt.ptermMouse != null) {\n    if (opt.ptermMouse) this._write('\\x1b[>1h\\x1b[>6h\\x1b[>7h\\x1b[>1h\\x1b[>9l');\n    else this._write('\\x1b[>1l\\x1b[>6l\\x1b[>7l\\x1b[>1l\\x1b[>9h');\n  }\n\n  // jsbterm mouse\n  if (opt.jsbtermMouse != null) {\n    // + = advanced mode\n    if (opt.jsbtermMouse) this._write('\\x1b[0~ZwLMRK+1Q\\x1b\\\\');\n    else this._write('\\x1b[0~ZwQ\\x1b\\\\');\n  }\n\n  // gpm mouse\n  if (opt.gpmMouse != null) {\n    if (opt.gpmMouse) this.enableGpm();\n    else this.disableGpm();\n  }\n};\n\n// CSI Ps ; Ps r\n//   Set Scrolling Region [top;bottom] (default = full size of win-\n//   dow) (DECSTBM).\n// CSI ? Pm r\nProgram.prototype.decstbm =\nProgram.prototype.csr =\nProgram.prototype.setScrollRegion = function(top, bottom) {\n  if (!this.zero) {\n    top = (top || 1) - 1;\n    bottom = (bottom || this.rows) - 1;\n  } else {\n    top = top || 0;\n    bottom = bottom || (this.rows - 1);\n  }\n  this.scrollTop = top;\n  this.scrollBottom = bottom;\n  this.x = 0;\n  this.y = 0;\n  this._ncoords();\n  if (this.tput) return this.put.csr(top, bottom);\n  return this._write('\\x1b[' + (top + 1) + ';' + (bottom + 1) + 'r');\n};\n\n// CSI s\n//   Save cursor (ANSI.SYS).\nProgram.prototype.scA =\nProgram.prototype.saveCursorA = function() {\n  this.savedX = this.x;\n  this.savedY = this.y;\n  if (this.tput) return this.put.sc();\n  return this._write('\\x1b[s');\n};\n\n// CSI u\n//   Restore cursor (ANSI.SYS).\nProgram.prototype.rcA =\nProgram.prototype.restoreCursorA = function() {\n  this.x = this.savedX || 0;\n  this.y = this.savedY || 0;\n  if (this.tput) return this.put.rc();\n  return this._write('\\x1b[u');\n};\n\n/**\n * Lesser Used\n */\n\n// CSI Ps I\n//   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\nProgram.prototype.cht =\nProgram.prototype.cursorForwardTab = function(param) {\n  this.x += 8;\n  this._ncoords();\n  if (this.tput) return this.put.tab(param);\n  return this._write('\\x1b[' + (param || 1) + 'I');\n};\n\n// CSI Ps S  Scroll up Ps lines (default = 1) (SU).\nProgram.prototype.su =\nProgram.prototype.scrollUp = function(param) {\n  this.y -= param || 1;\n  this._ncoords();\n  if (this.tput) return this.put.parm_index(param);\n  return this._write('\\x1b[' + (param || 1) + 'S');\n};\n\n// CSI Ps T  Scroll down Ps lines (default = 1) (SD).\nProgram.prototype.sd =\nProgram.prototype.scrollDown = function(param) {\n  this.y += param || 1;\n  this._ncoords();\n  if (this.tput) return this.put.parm_rindex(param);\n  return this._write('\\x1b[' + (param || 1) + 'T');\n};\n\n// CSI Ps ; Ps ; Ps ; Ps ; Ps T\n//   Initiate highlight mouse tracking.  Parameters are\n//   [func;startx;starty;firstrow;lastrow].  See the section Mouse\n//   Tracking.\nProgram.prototype.initMouseTracking = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + 'T');\n};\n\n// CSI > Ps; Ps T\n//   Reset one or more features of the title modes to the default\n//   value.  Normally, \"reset\" disables the feature.  It is possi-\n//   ble to disable the ability to reset features by compiling a\n//   different default for the title modes into xterm.\n//     Ps = 0  -> Do not set window/icon labels using hexadecimal.\n//     Ps = 1  -> Do not query window/icon labels using hexadeci-\n//     mal.\n//     Ps = 2  -> Do not set window/icon labels using UTF-8.\n//     Ps = 3  -> Do not query window/icon labels using UTF-8.\n//   (See discussion of \"Title Modes\").\nProgram.prototype.resetTitleModes = function() {\n  return this._write('\\x1b[>' + slice.call(arguments).join(';') + 'T');\n};\n\n// CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\nProgram.prototype.cbt =\nProgram.prototype.cursorBackwardTab = function(param) {\n  this.x -= 8;\n  this._ncoords();\n  if (this.tput) return this.put.cbt(param);\n  return this._write('\\x1b[' + (param || 1) + 'Z');\n};\n\n// CSI Ps b  Repeat the preceding graphic character Ps times (REP).\nProgram.prototype.rep =\nProgram.prototype.repeatPrecedingCharacter = function(param) {\n  this.x += param || 1;\n  this._ncoords();\n  if (this.tput) return this.put.rep(param);\n  return this._write('\\x1b[' + (param || 1) + 'b');\n};\n\n// CSI Ps g  Tab Clear (TBC).\n//     Ps = 0  -> Clear Current Column (default).\n//     Ps = 3  -> Clear All.\n// Potentially:\n//   Ps = 2  -> Clear Stops on Line.\n//   http://vt100.net/annarbor/aaa-ug/section6.html\nProgram.prototype.tbc =\nProgram.prototype.tabClear = function(param) {\n  if (this.tput) return this.put.tbc(param);\n  return this._write('\\x1b[' + (param || 0) + 'g');\n};\n\n// CSI Pm i  Media Copy (MC).\n//     Ps = 0  -> Print screen (default).\n//     Ps = 4  -> Turn off printer controller mode.\n//     Ps = 5  -> Turn on printer controller mode.\n// CSI ? Pm i\n//   Media Copy (MC, DEC-specific).\n//     Ps = 1  -> Print line containing cursor.\n//     Ps = 4  -> Turn off autoprint mode.\n//     Ps = 5  -> Turn on autoprint mode.\n//     Ps = 1  0  -> Print composed display, ignores DECPEX.\n//     Ps = 1  1  -> Print all pages.\nProgram.prototype.mc =\nProgram.prototype.mediaCopy = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + 'i');\n};\n\nProgram.prototype.print_screen =\nProgram.prototype.ps =\nProgram.prototype.mc0 = function() {\n  if (this.tput) return this.put.mc0();\n  return this.mc('0');\n};\n\nProgram.prototype.prtr_on =\nProgram.prototype.po =\nProgram.prototype.mc5 = function() {\n  if (this.tput) return this.put.mc5();\n  return this.mc('5');\n};\n\nProgram.prototype.prtr_off =\nProgram.prototype.pf =\nProgram.prototype.mc4 = function() {\n  if (this.tput) return this.put.mc4();\n  return this.mc('4');\n};\n\nProgram.prototype.prtr_non =\nProgram.prototype.pO =\nProgram.prototype.mc5p = function() {\n  if (this.tput) return this.put.mc5p();\n  return this.mc('?5');\n};\n\n// CSI > Ps; Ps m\n//   Set or reset resource-values used by xterm to decide whether\n//   to construct escape sequences holding information about the\n//   modifiers pressed with a given key.  The first parameter iden-\n//   tifies the resource to set/reset.  The second parameter is the\n//   value to assign to the resource.  If the second parameter is\n//   omitted, the resource is reset to its initial value.\n//     Ps = 1  -> modifyCursorKeys.\n//     Ps = 2  -> modifyFunctionKeys.\n//     Ps = 4  -> modifyOtherKeys.\n//   If no parameters are given, all resources are reset to their\n//   initial values.\nProgram.prototype.setResources = function() {\n  return this._write('\\x1b[>' + slice.call(arguments).join(';') + 'm');\n};\n\n// CSI > Ps n\n//   Disable modifiers which may be enabled via the CSI > Ps; Ps m\n//   sequence.  This corresponds to a resource value of \"-1\", which\n//   cannot be set with the other sequence.  The parameter identi-\n//   fies the resource to be disabled:\n//     Ps = 1  -> modifyCursorKeys.\n//     Ps = 2  -> modifyFunctionKeys.\n//     Ps = 4  -> modifyOtherKeys.\n//   If the parameter is omitted, modifyFunctionKeys is disabled.\n//   When modifyFunctionKeys is disabled, xterm uses the modifier\n//   keys to make an extended sequence of functions rather than\n//   adding a parameter to each function key to denote the modi-\n//   fiers.\nProgram.prototype.disableModifiers = function(param) {\n  return this._write('\\x1b[>' + (param || '') + 'n');\n};\n\n// CSI > Ps p\n//   Set resource value pointerMode.  This is used by xterm to\n//   decide whether to hide the pointer cursor as the user types.\n//   Valid values for the parameter:\n//     Ps = 0  -> never hide the pointer.\n//     Ps = 1  -> hide if the mouse tracking mode is not enabled.\n//     Ps = 2  -> always hide the pointer.  If no parameter is\n//     given, xterm uses the default, which is 1 .\nProgram.prototype.setPointerMode = function(param) {\n  return this._write('\\x1b[>' + (param || '') + 'p');\n};\n\n// CSI ! p   Soft terminal reset (DECSTR).\n// http://vt100.net/docs/vt220-rm/table4-10.html\nProgram.prototype.decstr =\nProgram.prototype.rs2 =\nProgram.prototype.softReset = function() {\n  //if (this.tput) return this.put.init_2string();\n  //if (this.tput) return this.put.reset_2string();\n  if (this.tput) return this.put.rs2();\n  //return this._write('\\x1b[!p');\n  //return this._write('\\x1b[!p\\x1b[?3;4l\\x1b[4l\\x1b>'); // init\n  return this._write('\\x1b[!p\\x1b[?3;4l\\x1b[4l\\x1b>'); // reset\n};\n\n// CSI Ps$ p\n//   Request ANSI mode (DECRQM).  For VT300 and up, reply is\n//     CSI Ps; Pm$ y\n//   where Ps is the mode number as in RM, and Pm is the mode\n//   value:\n//     0 - not recognized\n//     1 - set\n//     2 - reset\n//     3 - permanently set\n//     4 - permanently reset\nProgram.prototype.decrqm =\nProgram.prototype.requestAnsiMode = function(param) {\n  return this._write('\\x1b[' + (param || '') + '$p');\n};\n\n// CSI ? Ps$ p\n//   Request DEC private mode (DECRQM).  For VT300 and up, reply is\n//     CSI ? Ps; Pm$ p\n//   where Ps is the mode number as in DECSET, Pm is the mode value\n//   as in the ANSI DECRQM.\nProgram.prototype.decrqmp =\nProgram.prototype.requestPrivateMode = function(param) {\n  return this._write('\\x1b[?' + (param || '') + '$p');\n};\n\n// CSI Ps ; Ps \" p\n//   Set conformance level (DECSCL).  Valid values for the first\n//   parameter:\n//     Ps = 6 1  -> VT100.\n//     Ps = 6 2  -> VT200.\n//     Ps = 6 3  -> VT300.\n//   Valid values for the second parameter:\n//     Ps = 0  -> 8-bit controls.\n//     Ps = 1  -> 7-bit controls (always set for VT100).\n//     Ps = 2  -> 8-bit controls.\nProgram.prototype.decscl =\nProgram.prototype.setConformanceLevel = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '\"p');\n};\n\n// CSI Ps q  Load LEDs (DECLL).\n//     Ps = 0  -> Clear all LEDS (default).\n//     Ps = 1  -> Light Num Lock.\n//     Ps = 2  -> Light Caps Lock.\n//     Ps = 3  -> Light Scroll Lock.\n//     Ps = 2  1  -> Extinguish Num Lock.\n//     Ps = 2  2  -> Extinguish Caps Lock.\n//     Ps = 2  3  -> Extinguish Scroll Lock.\nProgram.prototype.decll =\nProgram.prototype.loadLEDs = function(param) {\n  return this._write('\\x1b[' + (param || '') + 'q');\n};\n\n// CSI Ps SP q\n//   Set cursor style (DECSCUSR, VT520).\n//     Ps = 0  -> blinking block.\n//     Ps = 1  -> blinking block (default).\n//     Ps = 2  -> steady block.\n//     Ps = 3  -> blinking underline.\n//     Ps = 4  -> steady underline.\nProgram.prototype.decscusr =\nProgram.prototype.setCursorStyle = function(param) {\n  switch (param) {\n    case 'blinking block':\n      param = 1;\n      break;\n    case 'block':\n    case 'steady block':\n      param = 2;\n      break;\n    case 'blinking underline':\n      param = 3;\n      break;\n    case 'underline':\n    case 'steady underline':\n      param = 4;\n      break;\n    case 'blinking bar':\n      param = 5;\n      break;\n    case 'bar':\n    case 'steady bar':\n      param = 6;\n      break;\n  }\n  if (param === 2 && this.has('Se')) {\n    return this.put.Se();\n  }\n  if (this.has('Ss')) {\n    return this.put.Ss(param);\n  }\n  return this._write('\\x1b[' + (param || 1) + ' q');\n};\n\n// CSI Ps \" q\n//   Select character protection attribute (DECSCA).  Valid values\n//   for the parameter:\n//     Ps = 0  -> DECSED and DECSEL can erase (default).\n//     Ps = 1  -> DECSED and DECSEL cannot erase.\n//     Ps = 2  -> DECSED and DECSEL can erase.\nProgram.prototype.decsca =\nProgram.prototype.setCharProtectionAttr = function(param) {\n  return this._write('\\x1b[' + (param || 0) + '\"q');\n};\n\n// CSI ? Pm r\n//   Restore DEC Private Mode Values.  The value of Ps previously\n//   saved is restored.  Ps values are the same as for DECSET.\nProgram.prototype.restorePrivateValues = function() {\n  return this._write('\\x1b[?' + slice.call(arguments).join(';') + 'r');\n};\n\n// CSI Pt; Pl; Pb; Pr; Ps$ r\n//   Change Attributes in Rectangular Area (DECCARA), VT400 and up.\n//     Pt; Pl; Pb; Pr denotes the rectangle.\n//     Ps denotes the SGR attributes to change: 0, 1, 4, 5, 7.\n// NOTE: xterm doesn't enable this code by default.\nProgram.prototype.deccara =\nProgram.prototype.setAttrInRectangle = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '$r');\n};\n\n// CSI ? Pm s\n//   Save DEC Private Mode Values.  Ps values are the same as for\n//   DECSET.\nProgram.prototype.savePrivateValues = function() {\n  return this._write('\\x1b[?' + slice.call(arguments).join(';') + 's');\n};\n\n// CSI Ps ; Ps ; Ps t\n//   Window manipulation (from dtterm, as well as extensions).\n//   These controls may be disabled using the allowWindowOps\n//   resource.  Valid values for the first (and any additional\n//   parameters) are:\n//     Ps = 1  -> De-iconify window.\n//     Ps = 2  -> Iconify window.\n//     Ps = 3  ;  x ;  y -> Move window to [x, y].\n//     Ps = 4  ;  height ;  width -> Resize the xterm window to\n//     height and width in pixels.\n//     Ps = 5  -> Raise the xterm window to the front of the stack-\n//     ing order.\n//     Ps = 6  -> Lower the xterm window to the bottom of the\n//     stacking order.\n//     Ps = 7  -> Refresh the xterm window.\n//     Ps = 8  ;  height ;  width -> Resize the text area to\n//     [height;width] in characters.\n//     Ps = 9  ;  0  -> Restore maximized window.\n//     Ps = 9  ;  1  -> Maximize window (i.e., resize to screen\n//     size).\n//     Ps = 1 0  ;  0  -> Undo full-screen mode.\n//     Ps = 1 0  ;  1  -> Change to full-screen.\n//     Ps = 1 1  -> Report xterm window state.  If the xterm window\n//     is open (non-iconified), it returns CSI 1 t .  If the xterm\n//     window is iconified, it returns CSI 2 t .\n//     Ps = 1 3  -> Report xterm window position.  Result is CSI 3\n//     ; x ; y t\n//     Ps = 1 4  -> Report xterm window in pixels.  Result is CSI\n//     4  ;  height ;  width t\n//     Ps = 1 8  -> Report the size of the text area in characters.\n//     Result is CSI  8  ;  height ;  width t\n//     Ps = 1 9  -> Report the size of the screen in characters.\n//     Result is CSI  9  ;  height ;  width t\n//     Ps = 2 0  -> Report xterm window's icon label.  Result is\n//     OSC  L  label ST\n//     Ps = 2 1  -> Report xterm window's title.  Result is OSC  l\n//     label ST\n//     Ps = 2 2  ;  0  -> Save xterm icon and window title on\n//     stack.\n//     Ps = 2 2  ;  1  -> Save xterm icon title on stack.\n//     Ps = 2 2  ;  2  -> Save xterm window title on stack.\n//     Ps = 2 3  ;  0  -> Restore xterm icon and window title from\n//     stack.\n//     Ps = 2 3  ;  1  -> Restore xterm icon title from stack.\n//     Ps = 2 3  ;  2  -> Restore xterm window title from stack.\n//     Ps >= 2 4  -> Resize to Ps lines (DECSLPP).\nProgram.prototype.manipulateWindow = function() {\n  var args = slice.call(arguments);\n\n  var callback = typeof args[args.length - 1] === 'function'\n    ? args.pop()\n    : function() {};\n\n  return this.response('window-manipulation',\n    '\\x1b[' + args.join(';') + 't', callback);\n};\n\nProgram.prototype.getWindowSize = function(callback) {\n  return this.manipulateWindow(18, callback);\n};\n\n// CSI Pt; Pl; Pb; Pr; Ps$ t\n//   Reverse Attributes in Rectangular Area (DECRARA), VT400 and\n//   up.\n//     Pt; Pl; Pb; Pr denotes the rectangle.\n//     Ps denotes the attributes to reverse, i.e.,  1, 4, 5, 7.\n// NOTE: xterm doesn't enable this code by default.\nProgram.prototype.decrara =\nProgram.prototype.reverseAttrInRectangle = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '$t');\n};\n\n// CSI > Ps; Ps t\n//   Set one or more features of the title modes.  Each parameter\n//   enables a single feature.\n//     Ps = 0  -> Set window/icon labels using hexadecimal.\n//     Ps = 1  -> Query window/icon labels using hexadecimal.\n//     Ps = 2  -> Set window/icon labels using UTF-8.\n//     Ps = 3  -> Query window/icon labels using UTF-8.  (See dis-\n//     cussion of \"Title Modes\")\n// XXX VTE bizarelly echos this:\nProgram.prototype.setTitleModeFeature = function() {\n  return this._twrite('\\x1b[>' + slice.call(arguments).join(';') + 't');\n};\n\n// CSI Ps SP t\n//   Set warning-bell volume (DECSWBV, VT520).\n//     Ps = 0  or 1  -> off.\n//     Ps = 2 , 3  or 4  -> low.\n//     Ps = 5 , 6 , 7 , or 8  -> high.\nProgram.prototype.decswbv =\nProgram.prototype.setWarningBellVolume = function(param) {\n  return this._write('\\x1b[' + (param || '') + ' t');\n};\n\n// CSI Ps SP u\n//   Set margin-bell volume (DECSMBV, VT520).\n//     Ps = 1  -> off.\n//     Ps = 2 , 3  or 4  -> low.\n//     Ps = 0 , 5 , 6 , 7 , or 8  -> high.\nProgram.prototype.decsmbv =\nProgram.prototype.setMarginBellVolume = function(param) {\n  return this._write('\\x1b[' + (param || '') + ' u');\n};\n\n// CSI Pt; Pl; Pb; Pr; Pp; Pt; Pl; Pp$ v\n//   Copy Rectangular Area (DECCRA, VT400 and up).\n//     Pt; Pl; Pb; Pr denotes the rectangle.\n//     Pp denotes the source page.\n//     Pt; Pl denotes the target location.\n//     Pp denotes the target page.\n// NOTE: xterm doesn't enable this code by default.\nProgram.prototype.deccra =\nProgram.prototype.copyRectangle = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '$v');\n};\n\n// CSI Pt ; Pl ; Pb ; Pr ' w\n//   Enable Filter Rectangle (DECEFR), VT420 and up.\n//   Parameters are [top;left;bottom;right].\n//   Defines the coordinates of a filter rectangle and activates\n//   it.  Anytime the locator is detected outside of the filter\n//   rectangle, an outside rectangle event is generated and the\n//   rectangle is disabled.  Filter rectangles are always treated\n//   as \"one-shot\" events.  Any parameters that are omitted default\n//   to the current locator position.  If all parameters are omit-\n//   ted, any locator motion will be reported.  DECELR always can-\n//   cels any prevous rectangle definition.\nProgram.prototype.decefr =\nProgram.prototype.enableFilterRectangle = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '\\'w');\n};\n\n// CSI Ps x  Request Terminal Parameters (DECREQTPARM).\n//   if Ps is a \"0\" (default) or \"1\", and xterm is emulating VT100,\n//   the control sequence elicits a response of the same form whose\n//   parameters describe the terminal:\n//     Ps -> the given Ps incremented by 2.\n//     Pn = 1  <- no parity.\n//     Pn = 1  <- eight bits.\n//     Pn = 1  <- 2  8  transmit 38.4k baud.\n//     Pn = 1  <- 2  8  receive 38.4k baud.\n//     Pn = 1  <- clock multiplier.\n//     Pn = 0  <- STP flags.\nProgram.prototype.decreqtparm =\nProgram.prototype.requestParameters = function(param) {\n  return this._write('\\x1b[' + (param || 0) + 'x');\n};\n\n// CSI Ps x  Select Attribute Change Extent (DECSACE).\n//     Ps = 0  -> from start to end position, wrapped.\n//     Ps = 1  -> from start to end position, wrapped.\n//     Ps = 2  -> rectangle (exact).\nProgram.prototype.decsace =\nProgram.prototype.selectChangeExtent = function(param) {\n  return this._write('\\x1b[' + (param || 0) + 'x');\n};\n\n// CSI Pc; Pt; Pl; Pb; Pr$ x\n//   Fill Rectangular Area (DECFRA), VT420 and up.\n//     Pc is the character to use.\n//     Pt; Pl; Pb; Pr denotes the rectangle.\n// NOTE: xterm doesn't enable this code by default.\nProgram.prototype.decfra =\nProgram.prototype.fillRectangle = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '$x');\n};\n\n// CSI Ps ; Pu ' z\n//   Enable Locator Reporting (DECELR).\n//   Valid values for the first parameter:\n//     Ps = 0  -> Locator disabled (default).\n//     Ps = 1  -> Locator enabled.\n//     Ps = 2  -> Locator enabled for one report, then disabled.\n//   The second parameter specifies the coordinate unit for locator\n//   reports.\n//   Valid values for the second parameter:\n//     Pu = 0  <- or omitted -> default to character cells.\n//     Pu = 1  <- device physical pixels.\n//     Pu = 2  <- character cells.\nProgram.prototype.decelr =\nProgram.prototype.enableLocatorReporting = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '\\'z');\n};\n\n// CSI Pt; Pl; Pb; Pr$ z\n//   Erase Rectangular Area (DECERA), VT400 and up.\n//     Pt; Pl; Pb; Pr denotes the rectangle.\n// NOTE: xterm doesn't enable this code by default.\nProgram.prototype.decera =\nProgram.prototype.eraseRectangle = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '$z');\n};\n\n// CSI Pm ' {\n//   Select Locator Events (DECSLE).\n//   Valid values for the first (and any additional parameters)\n//   are:\n//     Ps = 0  -> only respond to explicit host requests (DECRQLP).\n//                (This is default).  It also cancels any filter\n//   rectangle.\n//     Ps = 1  -> report button down transitions.\n//     Ps = 2  -> do not report button down transitions.\n//     Ps = 3  -> report button up transitions.\n//     Ps = 4  -> do not report button up transitions.\nProgram.prototype.decsle =\nProgram.prototype.setLocatorEvents = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '\\'{');\n};\n\n// CSI Pt; Pl; Pb; Pr$ {\n//   Selective Erase Rectangular Area (DECSERA), VT400 and up.\n//     Pt; Pl; Pb; Pr denotes the rectangle.\nProgram.prototype.decsera =\nProgram.prototype.selectiveEraseRectangle = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + '${');\n};\n\n// CSI Ps ' |\n//   Request Locator Position (DECRQLP).\n//   Valid values for the parameter are:\n//     Ps = 0 , 1 or omitted -> transmit a single DECLRP locator\n//     report.\n\n//   If Locator Reporting has been enabled by a DECELR, xterm will\n//   respond with a DECLRP Locator Report.  This report is also\n//   generated on button up and down events if they have been\n//   enabled with a DECSLE, or when the locator is detected outside\n//   of a filter rectangle, if filter rectangles have been enabled\n//   with a DECEFR.\n\n//     -> CSI Pe ; Pb ; Pr ; Pc ; Pp &  w\n\n//   Parameters are [event;button;row;column;page].\n//   Valid values for the event:\n//     Pe = 0  -> locator unavailable - no other parameters sent.\n//     Pe = 1  -> request - xterm received a DECRQLP.\n//     Pe = 2  -> left button down.\n//     Pe = 3  -> left button up.\n//     Pe = 4  -> middle button down.\n//     Pe = 5  -> middle button up.\n//     Pe = 6  -> right button down.\n//     Pe = 7  -> right button up.\n//     Pe = 8  -> M4 button down.\n//     Pe = 9  -> M4 button up.\n//     Pe = 1 0  -> locator outside filter rectangle.\n//   ``button'' parameter is a bitmask indicating which buttons are\n//     pressed:\n//     Pb = 0  <- no buttons down.\n//     Pb & 1  <- right button down.\n//     Pb & 2  <- middle button down.\n//     Pb & 4  <- left button down.\n//     Pb & 8  <- M4 button down.\n//   ``row'' and ``column'' parameters are the coordinates of the\n//     locator position in the xterm window, encoded as ASCII deci-\n//     mal.\n//   The ``page'' parameter is not used by xterm, and will be omit-\n//   ted.\nProgram.prototype.decrqlp =\nProgram.prototype.req_mouse_pos =\nProgram.prototype.reqmp =\nProgram.prototype.requestLocatorPosition = function(param, callback) {\n  // See also:\n  // get_mouse / getm / Gm\n  // mouse_info / minfo / Mi\n  // Correct for tput?\n  if (this.has('req_mouse_pos')) {\n    var code = this.tput.req_mouse_pos(param);\n    return this.response('locator-position', code, callback);\n  }\n  return this.response('locator-position',\n    '\\x1b[' + (param || '') + '\\'|', callback);\n};\n\n// CSI P m SP }\n// Insert P s Column(s) (default = 1) (DECIC), VT420 and up.\n// NOTE: xterm doesn't enable this code by default.\nProgram.prototype.decic =\nProgram.prototype.insertColumns = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + ' }');\n};\n\n// CSI P m SP ~\n// Delete P s Column(s) (default = 1) (DECDC), VT420 and up\n// NOTE: xterm doesn't enable this code by default.\nProgram.prototype.decdc =\nProgram.prototype.deleteColumns = function() {\n  return this._write('\\x1b[' + slice.call(arguments).join(';') + ' ~');\n};\n\nProgram.prototype.out = function(name) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  this.ret = true;\n  var out = this[name].apply(this, args);\n  this.ret = false;\n  return out;\n};\n\nProgram.prototype.sigtstp = function(callback) {\n  var resume = this.pause();\n\n  process.once('SIGCONT', function() {\n    resume();\n    if (callback) callback();\n  });\n\n  process.kill(process.pid, 'SIGTSTP');\n};\n\nProgram.prototype.pause = function(callback) {\n  var self = this\n    , isAlt = this.isAlt\n    , mouseEnabled = this.mouseEnabled;\n\n  this.lsaveCursor('pause');\n  //this.csr(0, screen.height - 1);\n  if (isAlt) this.normalBuffer();\n  this.showCursor();\n  if (mouseEnabled) this.disableMouse();\n\n  var write = this.output.write;\n  this.output.write = function() {};\n  if (this.input.setRawMode) {\n    this.input.setRawMode(false);\n  }\n  this.input.pause();\n\n  return this._resume = function() {\n    delete self._resume;\n\n    if (self.input.setRawMode) {\n      self.input.setRawMode(true);\n    }\n    self.input.resume();\n    self.output.write = write;\n\n    if (isAlt) self.alternateBuffer();\n    //self.csr(0, screen.height - 1);\n    if (mouseEnabled) self.enableMouse();\n    self.lrestoreCursor('pause', true);\n\n    if (callback) callback();\n  };\n};\n\nProgram.prototype.resume = function() {\n  if (this._resume) return this._resume();\n};\n\n/**\n * Helpers\n */\n\n// We could do this easier by just manipulating the _events object, or for\n// older versions of node, manipulating the array returned by listeners(), but\n// neither of these methods are guaranteed to work in future versions of node.\nfunction unshiftEvent(obj, event, listener) {\n  var listeners = obj.listeners(event);\n  obj.removeAllListeners(event);\n  obj.on(event, listener);\n  listeners.forEach(function(listener) {\n    obj.on(event, listener);\n  });\n}\n\nfunction merge(out) {\n  slice.call(arguments, 1).forEach(function(obj) {\n    Object.keys(obj).forEach(function(key) {\n      out[key] = obj[key];\n    });\n  });\n  return out;\n}\n\n/**\n * Expose\n */\n\nmodule.exports = Program;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/tput.js":"/**\n * tput.js - parse and compile terminfo caps to javascript.\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n// Resources:\n//   $ man term\n//   $ man terminfo\n//   http://invisible-island.net/ncurses/man/term.5.html\n//   https://en.wikipedia.org/wiki/Terminfo\n\n// Todo:\n// - xterm's XT (set-title capability?) value should\n//   be true (at least tmux thinks it should).\n//   It's not parsed as true. Investigate.\n// - Possibly switch to other method of finding the\n//   extended data string table: i += h.symOffsetCount * 2;\n\n/**\n * Modules\n */\n\nvar assert = require('assert')\n  , path = require('path')\n  , fs = require('fs')\n  , cp = require('child_process');\n\n/**\n * Tput\n */\n\nfunction Tput(options) {\n  if (!(this instanceof Tput)) {\n    return new Tput(options);\n  }\n\n  options = options || {};\n  if (typeof options === 'string') {\n    options = { terminal: options };\n  }\n\n  this.options = options;\n  this.terminal = options.terminal\n    || options.term\n    || process.env.TERM\n    || (process.platform === 'win32' ? 'windows-ansi' : 'xterm');\n\n  this.terminal = this.terminal.toLowerCase();\n\n  this.debug = options.debug;\n  this.padding = options.padding;\n  this.extended = options.extended;\n  this.printf = options.printf;\n  this.termcap = options.termcap;\n  this.error = null;\n\n  this.terminfoPrefix = options.terminfoPrefix;\n  this.terminfoFile = options.terminfoFile;\n  this.termcapFile = options.termcapFile;\n\n  if (options.terminal || options.term) {\n    this.setup();\n  }\n}\n\nTput.prototype.setup = function() {\n  this.error = null;\n  try {\n    if (this.termcap) {\n      try {\n        this.injectTermcap();\n      } catch (e) {\n        if (this.debug) throw e;\n        this.error = new Error('Termcap parse error.');\n        this._useInternalCap(this.terminal);\n      }\n    } else {\n      try {\n        this.injectTerminfo();\n      } catch (e) {\n        if (this.debug) throw e;\n        this.error = new Error('Terminfo parse error.');\n        this._useInternalInfo(this.terminal);\n      }\n    }\n  } catch (e) {\n    // If there was an error, fallback\n    // to an internally stored terminfo/cap.\n    if (this.debug) throw e;\n    this.error = new Error('Terminfo not found.');\n    this._useXtermInfo();\n  }\n};\n\nTput.prototype.term = function(is) {\n  return this.terminal.indexOf(is) === 0;\n};\n\nTput.prototype._debug = function() {\n  if (!this.debug) return;\n  return console.log.apply(console, arguments);\n};\n\n/**\n * Fallback\n */\n\nTput.prototype._useVt102Cap = function() {\n  return this.injectTermcap('vt102');\n};\n\nTput.prototype._useXtermCap = function() {\n  return this.injectTermcap(__dirname + '/../usr/xterm.termcap');\n};\n\nTput.prototype._useXtermInfo = function() {\n  return this.injectTerminfo(__dirname + '/../usr/xterm');\n};\n\nTput.prototype._useInternalInfo = function(name) {\n  name = path.basename(name);\n  return this.injectTerminfo(__dirname + '/../usr/' + name);\n};\n\nTput.prototype._useInternalCap = function(name) {\n  name = path.basename(name);\n  return this.injectTermcap(__dirname + '/../usr/' + name + '.termcap');\n};\n\n/**\n * Terminfo\n */\n\nTput.ipaths = [\n  process.env.TERMINFO || '',\n  (process.env.TERMINFO_DIRS || '').split(':'),\n  (process.env.HOME || '') + '/.terminfo',\n  '/usr/share/terminfo',\n  '/usr/share/lib/terminfo',\n  '/usr/lib/terminfo',\n  '/usr/local/share/terminfo',\n  '/usr/local/share/lib/terminfo',\n  '/usr/local/lib/terminfo',\n  '/usr/local/ncurses/lib/terminfo',\n  '/lib/terminfo'\n];\n\nTput.prototype.readTerminfo = function(term) {\n  var data\n    , file\n    , info;\n\n  term = term || this.terminal;\n\n  file = path.normalize(this._prefix(term));\n  data = fs.readFileSync(file);\n  info = this.parseTerminfo(data, file);\n\n  if (this.debug) {\n    this._terminfo = info;\n  }\n\n  return info;\n};\n\nTput._prefix =\nTput.prototype._prefix = function(term) {\n  // If we have a terminfoFile, or our\n  // term looks like a filename, use it.\n  if (term) {\n    if (~term.indexOf(path.sep)) {\n      return term;\n    }\n    if (this.terminfoFile) {\n      return this.terminfoFile;\n    }\n  }\n\n  var paths = Tput.ipaths.slice()\n    , file;\n\n  if (this.terminfoPrefix) {\n    paths.unshift(this.terminfoPrefix);\n  }\n\n  // Try exact matches.\n  file = this._tprefix(paths, term);\n  if (file) return file;\n\n  // Try similar matches.\n  file = this._tprefix(paths, term, true);\n  if (file) return file;\n\n  // Not found.\n  throw new Error('Terminfo directory not found.');\n};\n\nTput._tprefix =\nTput.prototype._tprefix = function(prefix, term, soft) {\n  if (!prefix) return;\n\n  var file\n    , dir\n    , i\n    , sdiff\n    , sfile\n    , list;\n\n  if (Array.isArray(prefix)) {\n    for (i = 0; i < prefix.length; i++) {\n      file = this._tprefix(prefix[i], term, soft);\n      if (file) return file;\n    }\n    return;\n  }\n\n  var find = function(word) {\n    var file, ch;\n\n    file = path.resolve(prefix, word[0]);\n    try {\n      fs.statSync(file);\n      return file;\n    } catch (e) {\n      ;\n    }\n\n    ch = word[0].charCodeAt(0).toString(16);\n    if (ch.length < 2) ch = '0' + ch;\n\n    file = path.resolve(prefix, ch);\n    try {\n      fs.statSync(file);\n      return file;\n    } catch (e) {\n      ;\n    }\n  };\n\n  if (!term) {\n    // Make sure the directory's sub-directories\n    // are all one-letter, or hex digits.\n    // return find('x') ? prefix : null;\n    try {\n      dir = fs.readdirSync(prefix).filter(function(file) {\n        return file.length !== 1 && !/^[0-9a-fA-F]{2}$/.test(file);\n      });\n      if (!dir.length) {\n        return prefix;\n      }\n    } catch (e) {\n      ;\n    }\n    return;\n  }\n\n  term = path.basename(term);\n  dir = find(term);\n\n  if (!dir) return;\n\n  if (soft) {\n    try {\n      list = fs.readdirSync(dir);\n    } catch (e) {\n      return;\n    }\n\n    list.forEach(function(file) {\n      if (file.indexOf(term) === 0) {\n        var diff = file.length - term.length;\n        if (!sfile || diff < sdiff) {\n          sdiff = diff;\n          sfile = file;\n        }\n      }\n    });\n\n    return sfile && (soft || sdiff === 0)\n      ? path.resolve(dir, sfile)\n      : null;\n  }\n\n  file = path.resolve(dir, term);\n  try {\n    fs.statSync(file);\n    return file;\n  } catch (e) {\n    ;\n  }\n};\n\n/**\n * Terminfo Parser\n * All shorts are little-endian\n */\n\nTput.prototype.parseTerminfo = function(data, file) {\n  var info = {}\n    , extended\n    , l = data.length\n    , i = 0\n    , v\n    , o;\n\n  var h = info.header = {\n    dataSize: data.length,\n    headerSize: 12,\n    magicNumber: (data[1] << 8) | data[0],\n    namesSize: (data[3] << 8) | data[2],\n    boolCount: (data[5] << 8) | data[4],\n    numCount: (data[7] << 8) | data[6],\n    strCount: (data[9] << 8) | data[8],\n    strTableSize: (data[11] << 8) | data[10]\n  };\n\n  h.total = h.headerSize\n    + h.namesSize\n    + h.boolCount\n    + h.numCount * 2\n    + h.strCount * 2\n    + h.strTableSize;\n\n  i += h.headerSize;\n\n  // Names Section\n  var names = data.toString('ascii', i, i + h.namesSize - 1)\n    , parts = names.split('|')\n    , name = parts[0]\n    , desc = parts.pop();\n\n  info.name = name;\n  info.names = parts;\n  info.desc = desc;\n\n  info.dir = path.resolve(file, '..', '..');\n  info.file = file;\n\n  i += h.namesSize - 1;\n\n  // Names is nul-terminated.\n  assert.equal(data[i], 0);\n  i++;\n\n  // Booleans Section\n  // One byte for each flag\n  // Same order as <term.h>\n  info.bools = {};\n  l = i + h.boolCount;\n  o = 0;\n  for (; i < l; i++) {\n    v = Tput.bools[o++];\n    info.bools[v] = data[i] === 1;\n  }\n\n  // Null byte in between to make sure numbers begin on an even byte.\n  if (i % 2) {\n    assert.equal(data[i], 0);\n    i++;\n  }\n\n  // Numbers Section\n  info.numbers = {};\n  l = i + h.numCount * 2;\n  o = 0;\n  for (; i < l; i += 2) {\n    v = Tput.numbers[o++];\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      info.numbers[v] = -1;\n    } else {\n      info.numbers[v] = (data[i + 1] << 8) | data[i];\n    }\n  }\n\n  // Strings Section\n  info.strings = {};\n  l = i + h.strCount * 2;\n  o = 0;\n  for (; i < l; i += 2) {\n    v = Tput.strings[o++];\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      info.strings[v] = -1;\n    } else {\n      info.strings[v] = (data[i + 1] << 8) | data[i];\n    }\n  }\n\n  // String Table\n  Object.keys(info.strings).forEach(function(key) {\n    if (info.strings[key] === -1) {\n      delete info.strings[key];\n      return;\n    }\n\n    // Workaround: fix an odd bug in the screen-256color terminfo where it tries\n    // to set -1, but it appears to have {0xfe, 0xff} instead of {0xff, 0xff}.\n    // TODO: Possibly handle errors gracefully below, as well as in the\n    // extended info. Also possibly do: `if (info.strings[key] >= data.length)`.\n    if (info.strings[key] === 65534) {\n      delete info.strings[key];\n      return;\n    }\n\n    var s = i + info.strings[key]\n      , j = s;\n\n    while (data[j]) j++;\n\n    assert(j < data.length);\n\n    info.strings[key] = data.toString('ascii', s, j);\n  });\n\n  // Extended Header\n  if (this.extended !== false) {\n    i--;\n    i += h.strTableSize;\n    if (i % 2) {\n      assert.equal(data[i], 0);\n      i++;\n    }\n    l = data.length;\n    if (i < l - 1) {\n      try {\n        extended = this.parseExtended(data.slice(i));\n      } catch (e) {\n        if (this.debug) {\n          throw e;\n        }\n        return info;\n      }\n      info.header.extended = extended.header;\n      ['bools', 'numbers', 'strings'].forEach(function(key) {\n        merge(info[key], extended[key]);\n      });\n    }\n  }\n\n  return info;\n};\n\n/**\n * Extended Parsing\n */\n\n// Some data to help understand:\n\n// For xterm, non-extended header:\n// { dataSize: 3270,\n//   headerSize: 12,\n//   magicNumber: 282,\n//   namesSize: 48,\n//   boolCount: 38,\n//   numCount: 15,\n//   strCount: 413,\n//   strTableSize: 1388,\n//   total: 2342 }\n\n// For xterm, header:\n// Offset: 2342\n// { header:\n//    { dataSize: 928,\n//      headerSize: 10,\n//      boolCount: 2,\n//      numCount: 1,\n//      strCount: 57,\n//      strTableSize: 117,\n//      lastStrTableOffset: 680,\n//      total: 245 },\n\n// For xterm, layout:\n// { header: '0 - 10', // length: 10\n//   bools: '10 - 12', // length: 2\n//   numbers: '12 - 14', // length: 2\n//   strings: '14 - 128', // length: 114 (57 short)\n//   symoffsets: '128 - 248', // length: 120 (60 short)\n//   stringtable: '248 - 612', // length: 364\n//   sym: '612 - 928' } // length: 316\n//\n// How lastStrTableOffset works:\n//   data.length - h.lastStrTableOffset === 248\n//     (sym-offset end, string-table start)\n//   364 + 316 === 680 (lastStrTableOffset)\n// How strTableSize works:\n//   h.strCount + [symOffsetCount] === h.strTableSize\n//   57 + 60 === 117 (strTableSize)\n//   symOffsetCount doesn't actually exist in the header. it's just implied.\n// Getting the number of sym offsets:\n//   h.symOffsetCount = h.strTableSize - h.strCount;\n//   h.symOffsetSize = (h.strTableSize - h.strCount) * 2;\n\nTput.prototype.parseExtended = function(data) {\n  var info = {}\n    , l = data.length\n    , i = 0;\n\n  var h = info.header = {\n    dataSize: data.length,\n    headerSize: 10,\n    boolCount: (data[i + 1] << 8) | data[i + 0],\n    numCount: (data[i + 3] << 8) | data[i + 2],\n    strCount: (data[i + 5] << 8) | data[i + 4],\n    strTableSize: (data[i + 7] << 8) | data[i + 6],\n    lastStrTableOffset: (data[i + 9] << 8) | data[i + 8]\n  };\n\n  // h.symOffsetCount = h.strTableSize - h.strCount;\n\n  h.total = h.headerSize\n    + h.boolCount\n    + h.numCount * 2\n    + h.strCount * 2\n    + h.strTableSize;\n\n  i += h.headerSize;\n\n  // Booleans Section\n  // One byte for each flag\n  var _bools = [];\n  l = i + h.boolCount;\n  for (; i < l; i++) {\n    _bools.push(data[i] === 1);\n  }\n\n  // Null byte in between to make sure numbers begin on an even byte.\n  if (i % 2) {\n    assert.equal(data[i], 0);\n    i++;\n  }\n\n  // Numbers Section\n  var _numbers = [];\n  l = i + h.numCount * 2;\n  for (; i < l; i += 2) {\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      _numbers.push(-1);\n    } else {\n      _numbers.push((data[i + 1] << 8) | data[i]);\n    }\n  }\n\n  // Strings Section\n  var _strings = [];\n  l = i + h.strCount * 2;\n  for (; i < l; i += 2) {\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      _strings.push(-1);\n    } else {\n      _strings.push((data[i + 1] << 8) | data[i]);\n    }\n  }\n\n  // Pass over the sym offsets and get to the string table.\n  i = data.length - h.lastStrTableOffset;\n  // Might be better to do this instead if the file has trailing bytes:\n  // i += h.symOffsetCount * 2;\n\n  // String Table\n  var high = 0;\n  _strings.forEach(function(offset, k) {\n    if (offset === -1) {\n      _strings[k] = '';\n      return;\n    }\n\n    var s = i + offset\n      , j = s;\n\n    while (data[j]) j++;\n\n    assert(j < data.length);\n\n    // Find out where the string table ends by\n    // getting the highest string length.\n    if (high < j - i) {\n      high = j - i;\n    }\n\n    _strings[k] = data.toString('ascii', s, j);\n  });\n\n  // Symbol Table\n  // Add one to the highest string length because we didn't count \\0.\n  i += high + 1;\n  l = data.length;\n\n  var sym = []\n    , j;\n\n  for (; i < l; i++) {\n    j = i;\n    while (data[j]) j++;\n    sym.push(data.toString('ascii', i, j));\n    i = j;\n  }\n\n  // Identify by name\n  j = 0;\n\n  info.bools = {};\n  _bools.forEach(function(bool) {\n    info.bools[sym[j++]] = bool;\n  });\n\n  info.numbers = {};\n  _numbers.forEach(function(number) {\n    info.numbers[sym[j++]] = number;\n  });\n\n  info.strings = {};\n  _strings.forEach(function(string) {\n    info.strings[sym[j++]] = string;\n  });\n\n  // Should be the very last bit of data.\n  assert.equal(i, data.length);\n\n  return info;\n};\n\nTput.prototype.compileTerminfo = function(term) {\n  return this.compile(this.readTerminfo(term));\n};\n\nTput.prototype.injectTerminfo = function(term) {\n  return this.inject(this.compileTerminfo(term));\n};\n\n/**\n * Compiler - terminfo cap->javascript\n */\n\nTput.prototype.compile = function(info) {\n  var self = this;\n\n  if (!info) {\n    throw new Error('Terminal not found.');\n  }\n\n  this.detectFeatures(info);\n\n  this._debug(info);\n\n  info.all = {};\n  info.methods = {};\n\n  ['bools', 'numbers', 'strings'].forEach(function(type) {\n    Object.keys(info[type]).forEach(function(key) {\n      info.all[key] = info[type][key];\n      info.methods[key] = self._compile(info, key, info.all[key]);\n    });\n  });\n\n  Tput.bools.forEach(function(key) {\n    if (info.methods[key] == null) info.methods[key] = false;\n  });\n\n  Tput.numbers.forEach(function(key) {\n    if (info.methods[key] == null) info.methods[key] = -1;\n  });\n\n  Tput.strings.forEach(function(key) {\n    if (!info.methods[key]) info.methods[key] = noop;\n  });\n\n  Object.keys(info.methods).forEach(function(key) {\n    if (!Tput.alias[key]) return;\n    Tput.alias[key].forEach(function(alias) {\n      info.methods[alias] = info.methods[key];\n    });\n    // Could just use:\n    // Object.keys(Tput.aliasMap).forEach(function(key) {\n    //   info.methods[key] = info.methods[Tput.aliasMap[key]];\n    // });\n  });\n\n  return info;\n};\n\nTput.prototype.inject = function(info) {\n  var self = this\n    , methods = info.methods || info;\n\n  Object.keys(methods).forEach(function(key) {\n    if (typeof methods[key] !== 'function') {\n      self[key] = methods[key];\n      return;\n    }\n    self[key] = function() {\n      var args = Array.prototype.slice.call(arguments);\n      return methods[key].call(self, args);\n    };\n  });\n\n  this.info = info;\n  this.all = info.all;\n  this.methods = info.methods;\n  this.bools = info.bools;\n  this.numbers = info.numbers;\n  this.strings = info.strings;\n\n  if (!~info.names.indexOf(this.terminal)) {\n    this.terminal = info.name;\n  }\n\n  this.features = info.features;\n  Object.keys(info.features).forEach(function(key) {\n    if (key === 'padding') {\n      if (!info.features.padding && self.options.padding !== true) {\n        self.padding = false;\n      }\n      return;\n    }\n    self[key] = info.features[key];\n  });\n};\n\n// See:\n// ~/ncurses/ncurses/tinfo/lib_tparm.c\n// ~/ncurses/ncurses/tinfo/comp_scan.c\nTput.prototype._compile = function(info, key, str) {\n  var v;\n\n  this._debug('Compiling %s: %s', key, JSON.stringify(str));\n\n  switch (typeof str) {\n    case 'boolean':\n      return str;\n    case 'number':\n      return str;\n    case 'string':\n      break;\n    default:\n      return noop;\n  }\n\n  if (!str) {\n    return noop;\n  }\n\n  // See:\n  // ~/ncurses/progs/tput.c - tput() - L149\n  // ~/ncurses/progs/tset.c - set_init() - L992\n  if (key === 'init_file' || key === 'reset_file') {\n    try {\n      str = fs.readFileSync(str, 'utf8');\n      if (this.debug) {\n        v = ('return ' + JSON.stringify(str) + ';')\n          .replace(/\\x1b/g, '\\\\x1b')\n          .replace(/\\r/g, '\\\\r')\n          .replace(/\\n/g, '\\\\n');\n        process.stdout.write(v + '\\n');\n      }\n      return function() { return str; };\n    } catch (e) {\n      return noop;\n    }\n  }\n\n  var tkey = info.name + '.' + key\n    , header = 'var v, dyn = {}, stat = {}, stack = [], out = [];'\n    , footer = ';return out.join(\"\");'\n    , code = header\n    , val = str\n    , buff = ''\n    , cap\n    , ch\n    , fi\n    , then\n    , els\n    , end;\n\n  function read(regex, no) {\n    cap = regex.exec(val);\n    if (!cap) return;\n    val = val.substring(cap[0].length);\n    ch = cap[1];\n    if (!no) clear();\n    return cap;\n  }\n\n  function stmt(c) {\n    if (code[code.length - 1] === ',') {\n      code = code.slice(0, -1);\n    }\n    code += c;\n  }\n\n  function expr(c) {\n    code += c + ',';\n  }\n\n  function echo(c) {\n    if (c === '\"\"') return;\n    expr('out.push(' + c + ')');\n  }\n\n  function print(c) {\n    buff += c;\n  }\n\n  function clear() {\n    if (buff) {\n      echo(JSON.stringify(buff).replace(/\\\\u00([0-9a-fA-F]{2})/g, '\\\\x$1'));\n      buff = '';\n    }\n  }\n\n  while (val) {\n    // Ignore newlines\n    if (read(/^\\n /, true)) {\n      continue;\n    }\n\n    // '^A' -> ^A\n    if (read(/^\\^(.)/i, true)) {\n      if (!(ch >= ' ' && ch <= '~')) {\n        this._debug('%s: bad caret char.', tkey);\n        // NOTE: ncurses appears to simply\n        // continue in this situation, but\n        // I could be wrong.\n        print(cap[0]);\n        continue;\n      }\n      if (ch === '?') {\n        ch = '\\x7f';\n      } else {\n        ch = ch.charCodeAt(0) & 31;\n        if (ch === 0) ch = 128;\n        ch = String.fromCharCode(ch);\n      }\n      print(ch);\n      continue;\n    }\n\n    // 3 octal digits -> character\n    if (read(/^\\\\([0-7]{3})/, true)) {\n      print(String.fromCharCode(parseInt(ch, 8)));\n      continue;\n    }\n\n    // '\\e' -> ^[\n    // '\\n' -> \\n\n    // '\\r' -> \\r\n    // '\\0' -> \\200 (special case)\n    if (read(/^\\\\([eEnlrtbfs\\^\\\\,:0]|.)/, true)) {\n      switch (ch) {\n        case 'e':\n        case 'E':\n          ch = '\\x1b';\n          break;\n        case 'n':\n          ch = '\\n';\n          break;\n        case 'l':\n          ch = '\\x85';\n          break;\n        case 'r':\n          ch = '\\r';\n          break;\n        case 't':\n          ch = '\\t';\n          break;\n        case 'b':\n          ch = '\\x08';\n          break;\n        case 'f':\n          ch = '\\x0c';\n          break;\n        case 's':\n          ch = ' ';\n          break;\n        case '^':\n          ch = '^';\n          break;\n        case '\\\\':\n          ch = '\\\\';\n          break;\n        case ',':\n          ch = ',';\n          break;\n        case ':':\n          ch = ':';\n          break;\n        case '0':\n          ch = '\\200';\n          break;\n        case 'a':\n          ch = '\\x07';\n          break;\n        default:\n          this._debug('%s: bad backslash char.', tkey);\n          ch = cap[0];\n          break;\n      }\n      print(ch);\n      continue;\n    }\n\n    // $<5> -> padding\n    // e.g. flash_screen: '\\u001b[?5h$<100/>\\u001b[?5l',\n    if (read(/^\\$<(\\d+)([*\\/]{0,2})>/, true)) {\n      if (this.padding) print(cap[0]);\n      continue;\n    }\n\n    // %%   outputs `%'\n    if (read(/^%%/, true)) {\n      print('%');\n      continue;\n    }\n\n    // %[[:]flags][width[.precision]][doxXs]\n    //   as in printf, flags are [-+#] and space.  Use a `:' to allow the\n    //   next character to be a `-' flag, avoiding interpreting \"%-\" as an\n    //   operator.\n    // %c   print pop() like %c in printf\n    // Example from screen terminfo:\n    //   S0: \"\\u001b(%p1%c\"\n    // %d   print pop()\n    // \"Print (e.g., \"%d\") is a special case.\"\n    // %s   print pop() like %s in printf\n    if (read(/^%((?::-|[+# ]){1,4})?(\\d+(?:\\.\\d+)?)?([doxXsc])/)) {\n      if (this.printf || cap[1] || cap[2] || ~'oxX'.indexOf(cap[3])) {\n        echo('sprintf(\"'+ cap[0].replace(':-', '-') + '\", stack.pop())');\n      } else if (cap[3] === 'c') {\n        echo('(v = stack.pop(), isFinite(v) '\n          + '? String.fromCharCode(v || 0200) : \"\")');\n      } else {\n        echo('stack.pop()');\n      }\n      continue;\n    }\n\n    // %p[1-9]\n    //   push i'th parameter\n    if (read(/^%p([1-9])/)) {\n      expr('(stack.push(v = params[' + (ch - 1) + ']), v)');\n      continue;\n    }\n\n    // %P[a-z]\n    //   set dynamic variable [a-z] to pop()\n    if (read(/^%P([a-z])/)) {\n      expr('dyn.' + ch + ' = stack.pop()');\n      continue;\n    }\n\n    // %g[a-z]\n    //   get dynamic variable [a-z] and push it\n    if (read(/^%g([a-z])/)) {\n      expr('(stack.push(dyn.' + ch + '), dyn.' + ch + ')');\n      continue;\n    }\n\n    // %P[A-Z]\n    //   set static variable [a-z] to pop()\n    if (read(/^%P([A-Z])/)) {\n      expr('stat.' + ch + ' = stack.pop()');\n      continue;\n    }\n\n    // %g[A-Z]\n    //   get static variable [a-z] and push it\n    //   The  terms  \"static\"  and  \"dynamic\" are misleading.  Historically,\n    //   these are simply two different sets of variables, whose values are\n    //   not reset between calls to tparm.  However, that fact is not\n    //   documented in other implementations.  Relying on it will adversely\n    //   impact portability to other implementations.\n    if (read(/^%g([A-Z])/)) {\n      expr('(stack.push(v = stat.' + ch + '), v)');\n      continue;\n    }\n\n    // %'c' char constant c\n    // NOTE: These are stored as c chars, exemplified by:\n    // cursor_address: \"\\u001b=%p1%' '%+%c%p2%' '%+%c\"\n    if (read(/^%'(.)'/)) {\n      expr('(stack.push(v = ' + ch.charCodeAt(0) + '), v)');\n      continue;\n    }\n\n    // %{nn}\n    //   integer constant nn\n    if (read(/^%\\{(\\d+)\\}/)) {\n      expr('(stack.push(v = ' + ch + '), v)');\n      continue;\n    }\n\n    // %l   push strlen(pop)\n    if (read(/^%l/)) {\n      expr('(stack.push(v = (stack.pop() || \"\").length || 0), v)');\n      continue;\n    }\n\n    // %+ %- %* %/ %m\n    //   arithmetic (%m is mod): push(pop() op pop())\n    // %& %| %^\n    //   bit operations (AND, OR and exclusive-OR): push(pop() op pop())\n    // %= %> %<\n    //   logical operations: push(pop() op pop())\n    if (read(/^%([+\\-*\\/m&|\\^=><])/)) {\n      if (ch === '=') ch = '===';\n      else if (ch === 'm') ch = '%';\n      expr('(v = stack.pop(),'\n        + ' stack.push(v = (stack.pop() ' + ch + ' v) || 0),'\n        + ' v)');\n      continue;\n    }\n\n    // %A, %O\n    //   logical AND and OR operations (for conditionals)\n    if (read(/^%([AO])/)) {\n      // Are we supposed to store the result on the stack?\n      expr('(stack.push(v = (stack.pop() '\n        + (ch === 'A' ? '&&' : '||')\n        + ' stack.pop())), v)');\n      continue;\n    }\n\n    // %! %~\n    //   unary operations (logical and bit complement): push(op pop())\n    if (read(/^%([!~])/)) {\n      expr('(stack.push(v = ' + ch + 'stack.pop()), v)');\n      continue;\n    }\n\n    // %i   add 1 to first two parameters (for ANSI terminals)\n    if (read(/^%i/)) {\n      // Are these supposed to go on the stack in certain situations?\n      // ncurses doesn't seem to put them on the stack, but xterm.user6\n      // seems to assume they're on the stack for some reason. Could\n      // just be a bad terminfo string.\n      // user6: \"\\u001b[%i%d;%dR\" - possibly a termcap-style string.\n      // expr('(params[0] |= 0, params[1] |= 0, params[0]++, params[1]++)');\n      expr('(params[0]++, params[1]++)');\n      continue;\n    }\n\n    // %? expr %t thenpart %e elsepart %;\n    //   This forms an if-then-else.  The %e elsepart is optional.  Usually\n    //   the %? expr part pushes a value onto the stack, and %t pops it from\n    //   the stack, testing if it is nonzero (true).  If it is zero (false),\n    //   control passes to the %e (else) part.\n    //   It is possible to form else-if's a la Algol 68:\n    //     %? c1 %t b1 %e c2 %t b2 %e c3 %t b3 %e c4 %t b4 %e %;\n    //   where ci are conditions, bi are bodies.\n    if (read(/^%\\?/)) {\n      end = -1;\n      stmt(';if (');\n      continue;\n    }\n\n    if (read(/^%t/)) {\n      end = -1;\n      // Technically this is supposed to pop everything off the stack that was\n      // pushed onto the stack after the if statement, see man terminfo.\n      // Right now, we don't pop anything off. This could cause compat issues.\n      // Perhaps implement a \"pushed\" counter from the time the if statement\n      // is added, to the time the then statement is added, and pop off\n      // the appropriate number of elements.\n      // while (pushed--) expr('stack.pop()');\n      stmt(') {');\n      continue;\n    }\n\n    // Terminfo does elseif's like\n    // this: %?[expr]%t...%e[expr]%t...%;\n    if (read(/^%e/)) {\n      fi = val.indexOf('%?');\n      then = val.indexOf('%t');\n      els = val.indexOf('%e');\n      end = val.indexOf('%;');\n      if (end === -1) end = Infinity;\n      if (then !== -1 && then < end\n          && (fi === -1 || then < fi)\n          && (els === -1 || then < els)) {\n        stmt('} else if (');\n      } else {\n        stmt('} else {');\n      }\n      continue;\n    }\n\n    if (read(/^%;/)) {\n      end = null;\n      stmt('}');\n      continue;\n    }\n\n    buff += val[0];\n    val = val.substring(1);\n  }\n\n  // Clear the buffer of any remaining text.\n  clear();\n\n  // Some terminfos (I'm looking at you, atari-color), don't end an if\n  // statement. It's assumed terminfo will automatically end it for\n  // them, because they are a bunch of lazy bastards.\n  if (end != null) {\n    stmt('}');\n  }\n\n  // Add the footer.\n  stmt(footer);\n\n  // Optimize and cleanup generated code.\n  v = code.slice(header.length, -footer.length);\n  if (!v.length) {\n    code = 'return \"\";';\n  } else if (v = /^out\\.push\\((\"(?:[^\"]|\\\\\")+\")\\)$/.exec(v)) {\n    code = 'return ' + v[1] + ';';\n  } else {\n    // Turn `(stack.push(v = params[0]), v),out.push(stack.pop())`\n    // into `out.push(params[0])`.\n    code = code.replace(\n      /\\(stack\\.push\\(v = params\\[(\\d+)\\]\\), v\\),out\\.push\\(stack\\.pop\\(\\)\\)/g,\n      'out.push(params[$1])');\n\n    // Remove unnecessary variable initializations.\n    v = code.slice(header.length, -footer.length);\n    if (!~v.indexOf('v = ')) code = code.replace('v, ', '');\n    if (!~v.indexOf('dyn')) code = code.replace('dyn = {}, ', '');\n    if (!~v.indexOf('stat')) code = code.replace('stat = {}, ', '');\n    if (!~v.indexOf('stack')) code = code.replace('stack = [], ', '');\n\n    // Turn `var out = [];out.push(\"foo\"),` into `var out = [\"foo\"];`.\n    code = code.replace(\n      /out = \\[\\];out\\.push\\((\"(?:[^\"]|\\\\\")+\")\\),/,\n      'out = [$1];');\n  }\n\n  // Terminfos `wyse350-vb`, and `wy350-w`\n  // seem to have a few broken strings.\n  if (str === '\\u001b%?') {\n    code = 'return \"\\\\x1b\";';\n  }\n\n  if (this.debug) {\n    v = code\n      .replace(/\\x1b/g, '\\\\x1b')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/\\n/g, '\\\\n');\n    process.stdout.write(v + '\\n');\n  }\n\n  try {\n    if (this.options.stringify && code.indexOf('return ') === 0) {\n      return new Function('', code)();\n    }\n    return this.printf || ~code.indexOf('sprintf(')\n      ? new Function('sprintf, params', code).bind(null, sprintf)\n      : new Function('params', code);\n  } catch (e) {\n    console.error('');\n    console.error('Error on %s:', tkey);\n    console.error(JSON.stringify(str));\n    console.error('');\n    console.error(code.replace(/(,|;)/g, '$1\\n'));\n    e.stack = e.stack.replace(/\\x1b/g, '\\\\x1b');\n    throw e;\n  }\n};\n\n// See: ~/ncurses/ncurses/tinfo/lib_tputs.c\nTput.prototype._print = function(code, print, done) {\n  var xon = !this.bools.needs_xon_xoff || this.bools.xon_xoff;\n\n  print = print || write;\n  done = done || noop;\n\n  if (!this.padding) {\n    print(code);\n    return done();\n  }\n\n  var parts = code.split(/(?=\\$<[\\d.]+[*\\/]{0,2}>)/)\n    , i = 0;\n\n  (function next() {\n    if (i === parts.length) {\n      return done();\n    }\n\n    var part = parts[i++]\n      , padding = /^\\$<([\\d.]+)([*\\/]{0,2})>/.exec(part)\n      , amount\n      , suffix;\n      // , affect;\n\n    if (!padding) {\n      print(part);\n      return next();\n    }\n\n    part = part.substring(padding[0].length);\n    amount = +padding[1];\n    suffix = padding[2];\n\n    // A `/'  suffix indicates  that  the  padding  is  mandatory and forces a\n    // delay of the given number of milliseconds even on devices for which xon\n    // is present to indicate flow control.\n    if (xon && !~suffix.indexOf('/')) {\n      print(part);\n      return next();\n    }\n\n    // A `*' indicates that the padding required is proportional to the number\n    // of lines affected by the operation, and  the amount  given  is the\n    // per-affected-unit padding required.  (In the case of insert character,\n    // the factor is still the number of lines affected.) Normally, padding is\n    // advisory if the device has the xon capability; it is used for cost\n    // computation but does not trigger delays.\n    if (~suffix.indexOf('*')) {\n      // XXX Disable this for now.\n      amount = amount;\n      // if (affect = /\\x1b\\[(\\d+)[LM]/.exec(part)) {\n      //   amount *= +affect[1];\n      // }\n      // The above is a huge workaround. In reality, we need to compile\n      // `_print` into the string functions and check the cap name and\n      // params.\n      // if (cap === 'insert_line' || cap === 'delete_line') {\n      //   amount *= params[0];\n      // }\n      // if (cap === 'clear_screen') {\n      //   amount *= process.stdout.rows;\n      // }\n    }\n\n    return setTimeout(function() {\n      print(part);\n      return next();\n    }, amount);\n  })();\n};\n\n// A small helper function if we want\n// to easily output text with setTimeouts.\nTput.print = function() {\n  var fake = {\n    padding: true,\n    bools: { needs_xon_xoff: true, xon_xoff: false }\n  };\n  return Tput.prototype._print.apply(fake, arguments);\n};\n\n/**\n * Termcap\n */\n\nTput.cpaths = [\n  process.env.TERMCAP || '',\n  (process.env.TERMPATH || '').split(/[: ]/),\n  (process.env.HOME || '') + '/.termcap',\n  '/usr/share/misc/termcap',\n  '/etc/termcap'\n];\n\nTput.prototype.readTermcap = function(term) {\n  var self = this\n    , terms\n    , term_\n    , root\n    , paths;\n\n  term = term || this.terminal;\n\n  // Termcap has a bunch of terminals usually stored in one file/string,\n  // so we need to find the one containing our desired terminal.\n  if (~term.indexOf(path.sep) && (terms = this._tryCap(path.resolve(term)))) {\n    term_ = path.basename(term).split('.')[0];\n    if (terms[process.env.TERM]) {\n      term = process.env.TERM;\n    } else if (terms[term_]) {\n      term = term_;\n    } else {\n      term = Object.keys(terms)[0];\n    }\n  } else {\n    paths = Tput.cpaths.slice();\n\n    if (this.termcapFile) {\n      paths.unshift(this.termcapFile);\n    }\n\n    paths.push(Tput.termcap);\n\n    terms = this._tryCap(paths, term);\n  }\n\n  if (!terms) {\n    throw new Error('Cannot find termcap for: ' + term);\n  }\n\n  root = terms[term];\n\n  if (this.debug) {\n    this._termcap = terms;\n  }\n\n  (function tc(term) {\n    if (term && term.strings.tc) {\n      root.inherits = root.inherits || [];\n      root.inherits.push(term.strings.tc);\n\n      var names = terms[term.strings.tc]\n        ? terms[term.strings.tc].names\n        : [term.strings.tc];\n\n      self._debug('%s inherits from %s.',\n        term.names.join('/'), names.join('/'));\n\n      var inherit = tc(terms[term.strings.tc]);\n      if (inherit) {\n        ['bools', 'numbers', 'strings'].forEach(function(type) {\n          merge(term[type], inherit[type]);\n        });\n      }\n    }\n    return term;\n  })(root);\n\n  // Translate termcap names to terminfo-style names.\n  root = this.translateTermcap(root);\n\n  return root;\n};\n\nTput.prototype._tryCap = function(file, term) {\n  if (!file) return;\n\n  var terms\n    , data\n    , i;\n\n  if (Array.isArray(file)) {\n    for (i = 0; i < file.length; i++) {\n      data = this._tryCap(file[i], term);\n      if (data) return data;\n    }\n    return;\n  }\n\n  // If the termcap string starts with `/`,\n  // ncurses considers it a filename.\n  data = file[0] === '/'\n    ? tryRead(file)\n    : file;\n\n  if (!data) return;\n\n  terms = this.parseTermcap(data, file);\n\n  if (term && !terms[term]) {\n    return;\n  }\n\n  return terms;\n};\n\n/**\n * Termcap Parser\n *  http://en.wikipedia.org/wiki/Termcap\n *  http://www.gnu.org/software\n *    /termutils/manual/termcap-1.3/html_mono/termcap.html\n *  http://www.gnu.org/software\n *    /termutils/manual/termcap-1.3/html_mono/termcap.html#SEC17\n *  http://tldp.org/HOWTO/Text-Terminal-HOWTO.html#toc16\n *  man termcap\n */\n\n// Example:\n// vt102|dec vt102:\\\n//  :do=^J:co#80:li#24:cl=50\\E[;H\\E[2J:\\\n//  :le=^H:bs:cm=5\\E[%i%d;%dH:nd=2\\E[C:up=2\\E[A:\\\n//  :ce=3\\E[K:cd=50\\E[J:so=2\\E[7m:se=2\\E[m:us=2\\E[4m:ue=2\\E[m:\\\n//  :md=2\\E[1m:mr=2\\E[7m:mb=2\\E[5m:me=2\\E[m:is=\\E[1;24r\\E[24;1H:\\\n//  :rs=\\E>\\E[?3l\\E[?4l\\E[?5l\\E[?7h\\E[?8h:ks=\\E[?1h\\E=:ke=\\E[?1l\\E>:\\\n//  :ku=\\EOA:kd=\\EOB:kr=\\EOC:kl=\\EOD:kb=^H:\\\n//  :ho=\\E[H:k1=\\EOP:k2=\\EOQ:k3=\\EOR:k4=\\EOS:pt:sr=5\\EM:vt#3:\\\n//  :sc=\\E7:rc=\\E8:cs=\\E[%i%d;%dr:vs=\\E[?7l:ve=\\E[?7h:\\\n//  :mi:al=\\E[L:dc=\\E[P:dl=\\E[M:ei=\\E[4l:im=\\E[4h:\n\nTput.prototype.parseTermcap = function(data, file) {\n  var terms = {}\n    , parts\n    , term\n    , entries\n    , fields\n    , field\n    , names\n    , i\n    , j\n    , k;\n\n  // remove escaped newlines\n  data = data.replace(/\\\\\\n[ \\t]*/g, '');\n\n  // remove comments\n  data = data.replace(/^#[^\\n]+/gm, '');\n\n  // split entries\n  entries = data.trim().split(/\\n+/);\n\n  for (i = 0; i < entries.length; i++) {\n    fields = entries[i].split(/:+/);\n    for (j = 0; j < fields.length; j++) {\n      field = fields[j].trim();\n      if (!field) continue;\n\n      if (j === 0) {\n        names = field.split('|');\n        term = {\n          name: names[0],\n          names: names,\n          desc: names.pop(),\n          file: ~file.indexOf(path.sep)\n            ? path.resolve(file)\n            : file,\n          termcap: true\n        };\n\n        for (k = 0; k < names.length; k++) {\n          terms[names[k]] = term;\n        }\n\n        term.bools = {};\n        term.numbers = {};\n        term.strings = {};\n\n        continue;\n      }\n\n      if (~field.indexOf('=')) {\n        parts = field.split('=');\n        term.strings[parts[0]] = parts.slice(1).join('=');\n      } else if (~field.indexOf('#')) {\n        parts = field.split('#');\n        term.numbers[parts[0]] = +parts.slice(1).join('#');\n      } else {\n        term.bools[field] = true;\n      }\n    }\n  }\n\n  return terms;\n};\n\n/**\n * Termcap Compiler\n *  man termcap\n */\n\nTput.prototype.translateTermcap = function(info) {\n  var self = this\n    , out = {};\n\n  if (!info) return;\n\n  this._debug(info);\n\n  ['name', 'names', 'desc', 'file', 'termcap'].forEach(function(key) {\n    out[key] = info[key];\n  });\n\n  // Separate aliases for termcap\n  var map = (function() {\n    var out = {};\n\n    Object.keys(Tput.alias).forEach(function(key) {\n      var aliases = Tput.alias[key];\n      out[aliases.termcap] = key;\n    });\n\n    return out;\n  })();\n\n  // Translate termcap cap names to terminfo cap names.\n  // e.g. `up` -> `cursor_up`\n  ['bools', 'numbers', 'strings'].forEach(function(key) {\n    out[key] = {};\n    Object.keys(info[key]).forEach(function(cap) {\n      if (key === 'strings') {\n        info.strings[cap] = self._captoinfo(cap, info.strings[cap], 1);\n      }\n      if (map[cap]) {\n        out[key][map[cap]] = info[key][cap];\n      } else {\n        // NOTE: Possibly include all termcap names\n        // in a separate alias.js file. Some are\n        // missing from the terminfo alias.js file\n        // which is why we have to do this:\n        // See: $ man termcap\n        out[key][cap] = info[key][cap];\n      }\n    });\n  });\n\n  return out;\n};\n\nTput.prototype.compileTermcap = function(term) {\n  return this.compile(this.readTermcap(term));\n};\n\nTput.prototype.injectTermcap = function(term) {\n  return this.inject(this.compileTermcap(term));\n};\n\n/**\n * _nc_captoinfo - ported to javascript directly from ncurses.\n * Copyright (c) 1998-2009,2010 Free Software Foundation, Inc.\n * See: ~/ncurses/ncurses/tinfo/captoinfo.c\n *\n * Convert a termcap string to terminfo format.\n * 'cap' is the relevant terminfo capability index.\n * 's' is the string value of the capability.\n * 'parameterized' tells what type of translations to do:\n *    % translations if 1\n *    pad translations if >=0\n */\n\nTput.prototype._captoinfo = function(cap, s, parameterized) {\n  var self = this;\n\n  var capstart;\n\n  if (parameterized == null) {\n    parameterized = 0;\n  }\n\n  var MAX_PUSHED = 16\n    , stack = [];\n\n  var stackptr = 0\n    , onstack = 0\n    , seenm = 0\n    , seenn = 0\n    , seenr = 0\n    , param = 1\n    , i = 0\n    , out = '';\n\n  function warn() {\n    var args = Array.prototype.slice.call(arguments);\n    args[0] = 'captoinfo: ' + (args[0] || '');\n    return self._debug.apply(self, args);\n  }\n\n  function isdigit(ch) {\n    return ch >= '0' && ch <= '9';\n  }\n\n  function isgraph(ch) {\n    return ch > ' ' && ch <= '~';\n  }\n\n  // convert a character to a terminfo push\n  function cvtchar(sp) {\n    var c = '\\0'\n      , len;\n\n    var j = i;\n\n    switch (sp[j]) {\n      case '\\\\':\n        switch (sp[++j]) {\n          case '\\'':\n          case '$':\n          case '\\\\':\n          case '%':\n            c = sp[j];\n            len = 2;\n            break;\n          case '\\0':\n            c = '\\\\';\n            len = 1;\n            break;\n          case '0':\n          case '1':\n          case '2':\n          case '3':\n            len = 1;\n            while (isdigit(sp[j])) {\n              c = String.fromCharCode(8 * c.charCodeAt(0)\n                + (sp[j++].charCodeAt(0) - '0'.charCodeAt(0)));\n              len++;\n            }\n            break;\n          default:\n            c = sp[j];\n            len = 2;\n            break;\n        }\n        break;\n      case '^':\n        c = String.fromCharCode(sp[++j].charCodeAt(0) & 0x1f);\n        len = 2;\n        break;\n      default:\n        c = sp[j];\n        len = 1;\n    }\n    if (isgraph(c) && c !== ',' && c !== '\\'' && c !== '\\\\' && c !== ':') {\n      out += '%\\'';\n      out += c;\n      out += '\\'';\n    } else {\n      out += '%{';\n      if (c.charCodeAt(0) > 99) {\n        out += String.fromCharCode(\n          (c.charCodeAt(0) / 100 | 0) + '0'.charCodeAt(0));\n      }\n      if (c.charCodeAt(0) > 9) {\n        out += String.fromCharCode(\n          (c.charCodeAt(0) / 10 | 0) % 10 + '0'.charCodeAt(0));\n      }\n      out += String.fromCharCode(\n        c.charCodeAt(0) % 10 + '0'.charCodeAt(0));\n      out += '}';\n    }\n\n    return len;\n  }\n\n  // push n copies of param on the terminfo stack if not already there\n  function getparm(parm, n) {\n    if (seenr) {\n      if (parm === 1) {\n        parm = 2;\n      } else if (parm === 2) {\n        parm = 1;\n      }\n    }\n\n    if (onstack === parm) {\n      if (n > 1) {\n        warn('string may not be optimal');\n        out += '%Pa';\n        while (n--) {\n          out += '%ga';\n        }\n      }\n      return;\n    }\n\n    if (onstack !== 0) {\n      push();\n    }\n\n    onstack = parm;\n\n    while (n--) {\n      out += '%p';\n      out += String.fromCharCode('0'.charCodeAt(0) + parm);\n    }\n\n    if (seenn && parm < 3) {\n      out += '%{96}%^';\n    }\n\n    if (seenm && parm < 3) {\n      out += '%{127}%^';\n    }\n  }\n\n  // push onstack on to the stack\n  function push() {\n    if (stackptr >= MAX_PUSHED) {\n      warn('string too complex to convert');\n    } else {\n      stack[stackptr++] = onstack;\n    }\n  }\n\n  // pop the top of the stack into onstack\n  function pop() {\n    if (stackptr === 0) {\n      if (onstack === 0) {\n        warn('I\\'m confused');\n      } else {\n        onstack = 0;\n      }\n    } else {\n      onstack = stack[--stackptr];\n    }\n    param++;\n  }\n\n  function see03() {\n    getparm(param, 1);\n    out += '%3d';\n    pop();\n  }\n\n  function invalid() {\n    out += '%';\n    i--;\n    warn('unknown %% code %s (%#x) in %s',\n      JSON.stringify(s[i]), s[i].charCodeAt(0), cap);\n  }\n\n  // skip the initial padding (if we haven't been told not to)\n  capstart = null;\n  if (s == null) s = '';\n\n  if (parameterized >= 0 && isdigit(s[i])) {\n    for (capstart = i;; i++) {\n      if (!(isdigit(s[i]) || s[i] === '*' || s[i] === '.')) {\n        break;\n      }\n    }\n  }\n\n  while (s[i]) {\n    switch (s[i]) {\n      case '%':\n        i++;\n        if (parameterized < 1) {\n          out += '%';\n          break;\n        }\n        switch (s[i++]) {\n          case '%':\n            out += '%';\n            break;\n          case 'r':\n            if (seenr++ === 1) {\n              warn('saw %%r twice in %s', cap);\n            }\n            break;\n          case 'm':\n            if (seenm++ === 1) {\n              warn('saw %%m twice in %s', cap);\n            }\n            break;\n          case 'n':\n            if (seenn++ === 1) {\n              warn('saw %%n twice in %s', cap);\n            }\n            break;\n          case 'i':\n            out += '%i';\n            break;\n          case '6':\n          case 'B':\n            getparm(param, 1);\n            out += '%{10}%/%{16}%*';\n            getparm(param, 1);\n            out += '%{10}%m%+';\n            break;\n          case '8':\n          case 'D':\n            getparm(param, 2);\n            out += '%{2}%*%-';\n            break;\n          case '>':\n            getparm(param, 2);\n            // %?%{x}%>%t%{y}%+%;\n            out += '%?';\n            i += cvtchar(s);\n            out += '%>%t';\n            i += cvtchar(s);\n            out += '%+%;';\n            break;\n          case 'a':\n            if ((s[i] === '=' || s[i] === '+' || s[i] === '-'\n                || s[i] === '*' || s[i] === '/')\n                && (s[i + 1] === 'p' || s[i + 1] === 'c')\n                && s[i + 2] !== '\\0' && s[i + 2]) {\n              var l;\n              l = 2;\n              if (s[i] !== '=') {\n                getparm(param, 1);\n              }\n              if (s[i + 1] === 'p') {\n                getparm(param + s[i + 2].charCodeAt(0) - '@'.charCodeAt(0), 1);\n                if (param !== onstack) {\n                  pop();\n                  param--;\n                }\n                l++;\n              } else {\n                i += 2, l += cvtchar(s), i -= 2;\n              }\n              switch (s[i]) {\n                case '+':\n                  out += '%+';\n                  break;\n                case '-':\n                  out += '%-';\n                  break;\n                case '*':\n                  out += '%*';\n                  break;\n                case '/':\n                  out += '%/';\n                  break;\n                case '=':\n                  if (seenr) {\n                    if (param === 1) {\n                      onstack = 2;\n                    } else if (param === 2) {\n                      onstack = 1;\n                    } else {\n                      onstack = param;\n                    }\n                  } else {\n                    onstack = param;\n                  }\n                  break;\n              }\n              i += l;\n              break;\n            }\n            getparm(param, 1);\n            i += cvtchar(s);\n            out += '%+';\n            break;\n          case '+':\n            getparm(param, 1);\n            i += cvtchar(s);\n            out += '%+%c';\n            pop();\n            break;\n          case 's':\n// #ifdef WATERLOO\n//          i += cvtchar(s);\n//          getparm(param, 1);\n//          out += '%-';\n// #else\n            getparm(param, 1);\n            out += '%s';\n            pop();\n// #endif /* WATERLOO */\n            break;\n          case '-':\n            i += cvtchar(s);\n            getparm(param, 1);\n            out += '%-%c';\n            pop();\n            break;\n          case '.':\n            getparm(param, 1);\n            out += '%c';\n            pop();\n            break;\n          case '0': // not clear any of the historical termcaps did this\n            if (s[i] === '3') {\n              see03(); // goto\n              break;\n            } else if (s[i] !== '2') {\n              invalid(); // goto\n              break;\n            }\n            // FALLTHRU\n          case '2':\n            getparm(param, 1);\n            out += '%2d';\n            pop();\n            break;\n          case '3':\n            see03();\n            break;\n          case 'd':\n            getparm(param, 1);\n            out += '%d';\n            pop();\n            break;\n          case 'f':\n            param++;\n            break;\n          case 'b':\n            param--;\n            break;\n          case '\\\\':\n            out += '%\\\\';\n            break;\n          default:\n            invalid();\n            break;\n        }\n        break;\n// #ifdef REVISIBILIZE\n//    case '\\\\':\n//      out += s[i++];\n//      out += s[i++];\n//      break;\n//    case '\\n':\n//      out += '\\\\n';\n//      i++;\n//      break;\n//    case '\\t':\n//      out += '\\\\t';\n//      i++;\n//      break;\n//    case '\\r':\n//      out += '\\\\r';\n//      i++;\n//      break;\n//    case '\\200':\n//      out += '\\\\0';\n//      i++;\n//      break;\n//    case '\\f':\n//      out += '\\\\f';\n//      i++;\n//      break;\n//    case '\\b':\n//      out += '\\\\b';\n//      i++;\n//      break;\n//    case ' ':\n//      out += '\\\\s';\n//      i++;\n//      break;\n//    case '^':\n//      out += '\\\\^';\n//      i++;\n//      break;\n//    case ':':\n//      out += '\\\\:';\n//      i++;\n//      break;\n//    case ',':\n//      out += '\\\\,';\n//      i++;\n//      break;\n//    default:\n//      if (s[i] === '\\033') {\n//        out += '\\\\E';\n//        i++;\n//      } else if (s[i].charCodeAt(0) > 0 && s[i].charCodeAt(0) < 32) {\n//        out += '^';\n//        out += String.fromCharCode(s[i].charCodeAt(0) + '@'.charCodeAt(0));\n//        i++;\n//      } else if (s[i].charCodeAt(0) <= 0 || s[i].charCodeAt(0) >= 127) {\n//        out += '\\\\';\n//        out += String.fromCharCode(\n//          ((s[i].charCodeAt(0) & 0300) >> 6) + '0'.charCodeAt(0));\n//        out += String.fromCharCode(\n//          ((s[i].charCodeAt(0) & 0070) >> 3) + '0'.charCodeAt(0));\n//        out += String.fromCharCode(\n//          (s[i].charCodeAt(0) & 0007) + '0'.charCodeAt(0));\n//        i++;\n//      } else {\n//        out += s[i++];\n//      }\n//      break;\n// #else\n      default:\n        out += s[i++];\n        break;\n// #endif\n    }\n  }\n\n  // Now, if we stripped off some leading padding, add it at the end\n  // of the string as mandatory padding.\n  if (capstart != null) {\n    out += '$<';\n    for (i = capstart;; i++) {\n      if (isdigit(s[i]) || s[i] === '*' || s[i] === '.') {\n        out += s[i];\n      } else {\n        break;\n      }\n    }\n    out += '/>';\n  }\n\n  if (s !== out) {\n    warn('Translating %s from %s to %s.',\n      cap, JSON.stringify(s), JSON.stringify(out));\n  }\n\n  return out;\n};\n\n/**\n * Compile All Terminfo\n */\n\nTput.prototype.getAll = function() {\n  var dir = this._prefix()\n    , list = asort(fs.readdirSync(dir))\n    , infos = [];\n\n  list.forEach(function(letter) {\n    var terms = asort(fs.readdirSync(path.resolve(dir, letter)));\n    infos.push.apply(infos, terms);\n  });\n\n  function asort(obj) {\n    return obj.sort(function(a, b) {\n      a = a.toLowerCase().charCodeAt(0);\n      b = b.toLowerCase().charCodeAt(0);\n      return a - b;\n    });\n  }\n\n  return infos;\n};\n\nTput.prototype.compileAll = function(start) {\n  var self = this\n    , all = {};\n\n  this.getAll().forEach(function(name) {\n    if (start && name !== start) {\n      return;\n    } else {\n      start = null;\n    }\n    all[name] = self.compileTerminfo(name);\n  });\n\n  return all;\n};\n\n/**\n * Detect Features / Quirks\n */\n\nTput.prototype.detectFeatures = function(info) {\n  var data = this.parseACS(info);\n  info.features = {\n    unicode: this.detectUnicode(info),\n    brokenACS: this.detectBrokenACS(info),\n    PCRomSet: this.detectPCRomSet(info),\n    magicCookie: this.detectMagicCookie(info),\n    padding: this.detectPadding(info),\n    setbuf: this.detectSetbuf(info),\n    acsc: data.acsc,\n    acscr: data.acscr\n  };\n  return info.features;\n};\n\nTput.prototype.detectUnicode = function() {\n  if (this.options.forceUnicode != null) {\n    return this.options.forceUnicode;\n  }\n\n  var LANG = process.env.LANG\n    + ':' + process.env.LANGUAGE\n    + ':' + process.env.LC_ALL\n    + ':' + process.env.LC_CTYPE;\n\n  return /utf-?8/i.test(LANG) || (this.GetConsoleCP() === 65001);\n};\n\n// For some reason TERM=linux has smacs/rmacs, but it maps to `^[[11m`\n// and it does not switch to the DEC SCLD character set. What the hell?\n// xterm: \\x1b(0, screen: \\x0e, linux: \\x1b[11m (doesn't work)\n// `man console_codes` says:\n// 11  select null mapping, set display control flag, reset tog‐\n//     gle meta flag (ECMA-48 says \"first alternate font\").\n// See ncurses:\n// ~/ncurses/ncurses/base/lib_set_term.c\n// ~/ncurses/ncurses/tinfo/lib_acs.c\n// ~/ncurses/ncurses/tinfo/tinfo_driver.c\n// ~/ncurses/ncurses/tinfo/lib_setup.c\nTput.prototype.detectBrokenACS = function(info) {\n  // ncurses-compatible env variable.\n  if (process.env.NCURSES_NO_UTF8_ACS != null) {\n    return !!+process.env.NCURSES_NO_UTF8_ACS;\n  }\n\n  // If the terminal supports unicode, we don't need ACS.\n  if (info.numbers.U8 >= 0) {\n    return !!info.numbers.U8;\n  }\n\n  // The linux console is just broken for some reason.\n  // Apparently the Linux console does not support ACS,\n  // but it does support the PC ROM character set.\n  if (info.name === 'linux') {\n    return true;\n  }\n\n  // PC alternate charset\n  // if (acsc.indexOf('+\\x10,\\x11-\\x18.\\x190') === 0) {\n  if (this.detectPCRomSet(info)) {\n    return true;\n  }\n\n  // screen termcap is bugged?\n  if (this.termcap\n      && info.name.indexOf('screen') === 0\n      && process.env.TERMCAP\n      && ~process.env.TERMCAP.indexOf('screen')\n      && ~process.env.TERMCAP.indexOf('hhII00')) {\n    if (~info.strings.enter_alt_charset_mode.indexOf('\\016')\n        || ~info.strings.enter_alt_charset_mode.indexOf('\\017')\n        || ~info.strings.set_attributes.indexOf('\\016')\n        || ~info.strings.set_attributes.indexOf('\\017')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n// If enter_pc_charset is the same as enter_alt_charset,\n// the terminal does not support SCLD as ACS.\n// See: ~/ncurses/ncurses/tinfo/lib_acs.c\nTput.prototype.detectPCRomSet = function(info) {\n  var s = info.strings;\n  if (s.enter_pc_charset_mode && s.enter_alt_charset_mode\n      && s.enter_pc_charset_mode === s.enter_alt_charset_mode\n      && s.exit_pc_charset_mode === s.exit_alt_charset_mode) {\n    return true;\n  }\n  return false;\n};\n\nTput.prototype.detectMagicCookie = function() {\n  return process.env.NCURSES_NO_MAGIC_COOKIE == null;\n};\n\nTput.prototype.detectPadding = function() {\n  return process.env.NCURSES_NO_PADDING == null;\n};\n\nTput.prototype.detectSetbuf = function() {\n  return process.env.NCURSES_NO_SETBUF == null;\n};\n\nTput.prototype.parseACS = function(info) {\n  var data = {};\n\n  data.acsc = {};\n  data.acscr = {};\n\n  // Possibly just return an empty object, as done here, instead of\n  // specifically saying ACS is \"broken\" above. This would be more\n  // accurate to ncurses logic. But it doesn't really matter.\n  if (this.detectPCRomSet(info)) {\n    return data;\n  }\n\n  // See: ~/ncurses/ncurses/tinfo/lib_acs.c: L208\n  Object.keys(Tput.acsc).forEach(function(ch) {\n    var acs_chars = info.strings.acs_chars || ''\n      , i = acs_chars.indexOf(ch)\n      , next = acs_chars[i + 1];\n\n    if (!next || i === -1 || !Tput.acsc[next]) {\n      return;\n    }\n\n    data.acsc[ch] = Tput.acsc[next];\n    data.acscr[Tput.acsc[next]] = ch;\n  });\n\n  return data;\n};\n\nTput.prototype.GetConsoleCP = function() {\n  var ccp;\n\n  if (process.platform !== 'win32') {\n    return -1;\n  }\n\n  // Allow unicode on all windows consoles for now:\n  if (+process.env.NCURSES_UNICODE !== 0) {\n    return 65001;\n  }\n\n  // cp.execSync('chcp 65001', { stdio: 'ignore', timeout: 1500 });\n\n  try {\n    // Produces something like: 'Active code page: 437\\n\\n'\n    ccp = cp.execFileSync(process.env.WINDIR + '\\\\system32\\\\chcp.com', [], {\n      stdio: ['ignore', 'pipe', 'ignore'],\n      encoding: 'ascii',\n      timeout: 1500\n    });\n    // ccp = cp.execSync('chcp', {\n    //   stdio: ['ignore', 'pipe', 'ignore'],\n    //   encoding: 'ascii',\n    //   timeout: 1500\n    // });\n  } catch (e) {\n    ;\n  }\n\n  ccp = /\\d+/.exec(ccp);\n\n  if (!ccp) {\n    return -1;\n  }\n\n  ccp = +ccp[0];\n\n  return ccp;\n};\n\n/**\n * Helpers\n */\n\nfunction noop() {\n  return '';\n}\n\nnoop.unsupported = true;\n\nfunction merge(a, b) {\n  Object.keys(b).forEach(function(key) {\n    a[key] = b[key];\n  });\n  return a;\n}\n\nfunction write(data) {\n  return process.stdout.write(data);\n}\n\nfunction tryRead(file) {\n  if (Array.isArray(file)) {\n    for (var i = 0; i < file.length; i++) {\n      var data = tryRead(file[i]);\n      if (data) return data;\n    }\n    return '';\n  }\n  if (!file) return '';\n  file = path.resolve.apply(path, arguments);\n  try {\n    return fs.readFileSync(file, 'utf8');\n  } catch (e) {\n    return '';\n  }\n}\n\n/**\n * sprintf\n *  http://www.cplusplus.com/reference/cstdio/printf/\n */\n\nfunction sprintf(src) {\n  var params = Array.prototype.slice.call(arguments, 1)\n    , rule = /%([\\-+# ]{1,4})?(\\d+(?:\\.\\d+)?)?([doxXsc])/g\n    , i = 0;\n\n  return src.replace(rule, function(_, flag, width, type) {\n    var flags = (flag || '').split('')\n      , param = params[i] != null ? params[i] : ''\n      , initial = param\n      // , width = +width\n      , opt = {}\n      , pre = '';\n\n    i++;\n\n    switch (type) {\n      case 'd': // signed int\n        param = (+param).toString(10);\n        break;\n      case 'o': // unsigned octal\n        param = (+param).toString(8);\n        break;\n      case 'x': // unsigned hex int\n        param = (+param).toString(16);\n        break;\n      case 'X': // unsigned hex int uppercase\n        param = (+param).toString(16).toUppercase();\n        break;\n      case 's': // string\n        break;\n      case 'c': // char\n        param = isFinite(param)\n          ? String.fromCharCode(param || 0200)\n          : '';\n        break;\n    }\n\n    flags.forEach(function(flag) {\n      switch (flag) {\n        // left-justify by width\n        case '-':\n          opt.left = true;\n          break;\n        // always precede numbers with their signs\n        case '+':\n          opt.signs = true;\n          break;\n        // used with o, x, X - value is preceded with 0, 0x, or 0X respectively.\n        // used with a, A, e, E, f, F, g, G - forces written output to contain\n        // a decimal point even if no more digits follow\n        case '#':\n          opt.hexpoint = true;\n          break;\n        // if no sign is going to be written, black space in front of the value\n        case ' ':\n          opt.space = true;\n          break;\n      }\n    });\n\n    width = +width.split('.')[0];\n\n    // Should this be for opt.left too?\n    // Example: %2.2X - turns 0 into 00\n    if (width && !opt.left) {\n      param = param + '';\n      while (param.length < width) {\n        param = '0' + param;\n      }\n    }\n\n    if (opt.signs) {\n      if (+initial >= 0) {\n        pre += '+';\n      }\n    }\n\n    if (opt.space) {\n      if (!opt.signs && +initial >= 0) {\n        pre += ' ';\n      }\n    }\n\n    if (opt.hexpoint) {\n      switch (type) {\n        case 'o': // unsigned octal\n          pre += '0';\n          break;\n        case 'x': // unsigned hex int\n          pre += '0x';\n          break;\n        case 'X': // unsigned hex int uppercase\n          pre += '0X';\n          break;\n      }\n    }\n\n    if (opt.left) {\n      if (width > (pre.length + param.length)) {\n        width -= pre.length + param.length;\n        pre = Array(width + 1).join(' ') + pre;\n      }\n    }\n\n    return pre + param;\n  });\n}\n\n/**\n * Aliases\n */\n\nTput._alias = require('./alias');\n\nTput.alias = {};\n\n['bools', 'numbers', 'strings'].forEach(function(type) {\n  Object.keys(Tput._alias[type]).forEach(function(key) {\n    var aliases = Tput._alias[type][key];\n    Tput.alias[key] = [aliases[0]];\n    Tput.alias[key].terminfo = aliases[0];\n    Tput.alias[key].termcap = aliases[1];\n  });\n});\n\n// Bools\nTput.alias.no_esc_ctlc.push('beehive_glitch');\nTput.alias.dest_tabs_magic_smso.push('teleray_glitch');\n\n// Numbers\nTput.alias.micro_col_size.push('micro_char_size');\n\n/**\n * Feature Checking\n */\n\nTput.aliasMap = {};\n\nObject.keys(Tput.alias).forEach(function(key) {\n  Tput.aliasMap[key] = key;\n  Tput.alias[key].forEach(function(k) {\n    Tput.aliasMap[k] = key;\n  });\n});\n\nTput.prototype.has = function(name) {\n  name = Tput.aliasMap[name];\n\n  var val = this.all[name];\n\n  if (!name) return false;\n\n  if (typeof val === 'number') {\n    return val !== -1;\n  }\n\n  return !!val;\n};\n\n/**\n * Fallback Termcap Entry\n */\n\nTput.termcap = ''\n  + 'vt102|dec vt102:'\n  + ':do=^J:co#80:li#24:cl=50\\\\E[;H\\\\E[2J:'\n  + ':le=^H:bs:cm=5\\\\E[%i%d;%dH:nd=2\\\\E[C:up=2\\\\E[A:'\n  + ':ce=3\\\\E[K:cd=50\\\\E[J:so=2\\\\E[7m:se=2\\\\E[m:us=2\\\\E[4m:ue=2\\\\E[m:'\n  + ':md=2\\\\E[1m:mr=2\\\\E[7m:mb=2\\\\E[5m:me=2\\\\E[m:is=\\\\E[1;24r\\\\E[24;1H:'\n  + ':rs=\\\\E>\\\\E[?3l\\\\E[?4l\\\\E[?5l\\\\E[?7h\\\\E[?8h:ks=\\\\E[?1h\\\\E=:ke=\\\\E[?1l\\\\E>:'\n  + ':ku=\\\\EOA:kd=\\\\EOB:kr=\\\\EOC:kl=\\\\EOD:kb=^H:\\\\\\n'\n  + ':ho=\\\\E[H:k1=\\\\EOP:k2=\\\\EOQ:k3=\\\\EOR:k4=\\\\EOS:pt:sr=5\\\\EM:vt#3:'\n  + ':sc=\\\\E7:rc=\\\\E8:cs=\\\\E[%i%d;%dr:vs=\\\\E[?7l:ve=\\\\E[?7h:'\n  + ':mi:al=\\\\E[L:dc=\\\\E[P:dl=\\\\E[M:ei=\\\\E[4l:im=\\\\E[4h:';\n\n/**\n * Terminfo Data\n */\n\nTput.bools = [\n  'auto_left_margin',\n  'auto_right_margin',\n  'no_esc_ctlc',\n  'ceol_standout_glitch',\n  'eat_newline_glitch',\n  'erase_overstrike',\n  'generic_type',\n  'hard_copy',\n  'has_meta_key',\n  'has_status_line',\n  'insert_null_glitch',\n  'memory_above',\n  'memory_below',\n  'move_insert_mode',\n  'move_standout_mode',\n  'over_strike',\n  'status_line_esc_ok',\n  'dest_tabs_magic_smso',\n  'tilde_glitch',\n  'transparent_underline',\n  'xon_xoff',\n  'needs_xon_xoff',\n  'prtr_silent',\n  'hard_cursor',\n  'non_rev_rmcup',\n  'no_pad_char',\n  'non_dest_scroll_region',\n  'can_change',\n  'back_color_erase',\n  'hue_lightness_saturation',\n  'col_addr_glitch',\n  'cr_cancels_micro_mode',\n  'has_print_wheel',\n  'row_addr_glitch',\n  'semi_auto_right_margin',\n  'cpi_changes_res',\n  'lpi_changes_res',\n\n  // #ifdef __INTERNAL_CAPS_VISIBLE\n  'backspaces_with_bs',\n  'crt_no_scrolling',\n  'no_correctly_working_cr',\n  'gnu_has_meta_key',\n  'linefeed_is_newline',\n  'has_hardware_tabs',\n  'return_does_clr_eol'\n];\n\nTput.numbers = [\n  'columns',\n  'init_tabs',\n  'lines',\n  'lines_of_memory',\n  'magic_cookie_glitch',\n  'padding_baud_rate',\n  'virtual_terminal',\n  'width_status_line',\n  'num_labels',\n  'label_height',\n  'label_width',\n  'max_attributes',\n  'maximum_windows',\n  'max_colors',\n  'max_pairs',\n  'no_color_video',\n  'buffer_capacity',\n  'dot_vert_spacing',\n  'dot_horz_spacing',\n  'max_micro_address',\n  'max_micro_jump',\n  'micro_col_size',\n  'micro_line_size',\n  'number_of_pins',\n  'output_res_char',\n  'output_res_line',\n  'output_res_horz_inch',\n  'output_res_vert_inch',\n  'print_rate',\n  'wide_char_size',\n  'buttons',\n  'bit_image_entwining',\n  'bit_image_type',\n\n  // #ifdef __INTERNAL_CAPS_VISIBLE\n  'magic_cookie_glitch_ul',\n  'carriage_return_delay',\n  'new_line_delay',\n  'backspace_delay',\n  'horizontal_tab_delay',\n  'number_of_function_keys'\n];\n\nTput.strings = [\n  'back_tab',\n  'bell',\n  'carriage_return',\n  'change_scroll_region',\n  'clear_all_tabs',\n  'clear_screen',\n  'clr_eol',\n  'clr_eos',\n  'column_address',\n  'command_character',\n  'cursor_address',\n  'cursor_down',\n  'cursor_home',\n  'cursor_invisible',\n  'cursor_left',\n  'cursor_mem_address',\n  'cursor_normal',\n  'cursor_right',\n  'cursor_to_ll',\n  'cursor_up',\n  'cursor_visible',\n  'delete_character',\n  'delete_line',\n  'dis_status_line',\n  'down_half_line',\n  'enter_alt_charset_mode',\n  'enter_blink_mode',\n  'enter_bold_mode',\n  'enter_ca_mode',\n  'enter_delete_mode',\n  'enter_dim_mode',\n  'enter_insert_mode',\n  'enter_secure_mode',\n  'enter_protected_mode',\n  'enter_reverse_mode',\n  'enter_standout_mode',\n  'enter_underline_mode',\n  'erase_chars',\n  'exit_alt_charset_mode',\n  'exit_attribute_mode',\n  'exit_ca_mode',\n  'exit_delete_mode',\n  'exit_insert_mode',\n  'exit_standout_mode',\n  'exit_underline_mode',\n  'flash_screen',\n  'form_feed',\n  'from_status_line',\n  'init_1string',\n  'init_2string',\n  'init_3string',\n  'init_file',\n  'insert_character',\n  'insert_line',\n  'insert_padding',\n  'key_backspace',\n  'key_catab',\n  'key_clear',\n  'key_ctab',\n  'key_dc',\n  'key_dl',\n  'key_down',\n  'key_eic',\n  'key_eol',\n  'key_eos',\n  'key_f0',\n  'key_f1',\n  'key_f10',\n  'key_f2',\n  'key_f3',\n  'key_f4',\n  'key_f5',\n  'key_f6',\n  'key_f7',\n  'key_f8',\n  'key_f9',\n  'key_home',\n  'key_ic',\n  'key_il',\n  'key_left',\n  'key_ll',\n  'key_npage',\n  'key_ppage',\n  'key_right',\n  'key_sf',\n  'key_sr',\n  'key_stab',\n  'key_up',\n  'keypad_local',\n  'keypad_xmit',\n  'lab_f0',\n  'lab_f1',\n  'lab_f10',\n  'lab_f2',\n  'lab_f3',\n  'lab_f4',\n  'lab_f5',\n  'lab_f6',\n  'lab_f7',\n  'lab_f8',\n  'lab_f9',\n  'meta_off',\n  'meta_on',\n  'newline',\n  'pad_char',\n  'parm_dch',\n  'parm_delete_line',\n  'parm_down_cursor',\n  'parm_ich',\n  'parm_index',\n  'parm_insert_line',\n  'parm_left_cursor',\n  'parm_right_cursor',\n  'parm_rindex',\n  'parm_up_cursor',\n  'pkey_key',\n  'pkey_local',\n  'pkey_xmit',\n  'print_screen',\n  'prtr_off',\n  'prtr_on',\n  'repeat_char',\n  'reset_1string',\n  'reset_2string',\n  'reset_3string',\n  'reset_file',\n  'restore_cursor',\n  'row_address',\n  'save_cursor',\n  'scroll_forward',\n  'scroll_reverse',\n  'set_attributes',\n  'set_tab',\n  'set_window',\n  'tab',\n  'to_status_line',\n  'underline_char',\n  'up_half_line',\n  'init_prog',\n  'key_a1',\n  'key_a3',\n  'key_b2',\n  'key_c1',\n  'key_c3',\n  'prtr_non',\n  'char_padding',\n  'acs_chars',\n  'plab_norm',\n  'key_btab',\n  'enter_xon_mode',\n  'exit_xon_mode',\n  'enter_am_mode',\n  'exit_am_mode',\n  'xon_character',\n  'xoff_character',\n  'ena_acs',\n  'label_on',\n  'label_off',\n  'key_beg',\n  'key_cancel',\n  'key_close',\n  'key_command',\n  'key_copy',\n  'key_create',\n  'key_end',\n  'key_enter',\n  'key_exit',\n  'key_find',\n  'key_help',\n  'key_mark',\n  'key_message',\n  'key_move',\n  'key_next',\n  'key_open',\n  'key_options',\n  'key_previous',\n  'key_print',\n  'key_redo',\n  'key_reference',\n  'key_refresh',\n  'key_replace',\n  'key_restart',\n  'key_resume',\n  'key_save',\n  'key_suspend',\n  'key_undo',\n  'key_sbeg',\n  'key_scancel',\n  'key_scommand',\n  'key_scopy',\n  'key_screate',\n  'key_sdc',\n  'key_sdl',\n  'key_select',\n  'key_send',\n  'key_seol',\n  'key_sexit',\n  'key_sfind',\n  'key_shelp',\n  'key_shome',\n  'key_sic',\n  'key_sleft',\n  'key_smessage',\n  'key_smove',\n  'key_snext',\n  'key_soptions',\n  'key_sprevious',\n  'key_sprint',\n  'key_sredo',\n  'key_sreplace',\n  'key_sright',\n  'key_srsume',\n  'key_ssave',\n  'key_ssuspend',\n  'key_sundo',\n  'req_for_input',\n  'key_f11',\n  'key_f12',\n  'key_f13',\n  'key_f14',\n  'key_f15',\n  'key_f16',\n  'key_f17',\n  'key_f18',\n  'key_f19',\n  'key_f20',\n  'key_f21',\n  'key_f22',\n  'key_f23',\n  'key_f24',\n  'key_f25',\n  'key_f26',\n  'key_f27',\n  'key_f28',\n  'key_f29',\n  'key_f30',\n  'key_f31',\n  'key_f32',\n  'key_f33',\n  'key_f34',\n  'key_f35',\n  'key_f36',\n  'key_f37',\n  'key_f38',\n  'key_f39',\n  'key_f40',\n  'key_f41',\n  'key_f42',\n  'key_f43',\n  'key_f44',\n  'key_f45',\n  'key_f46',\n  'key_f47',\n  'key_f48',\n  'key_f49',\n  'key_f50',\n  'key_f51',\n  'key_f52',\n  'key_f53',\n  'key_f54',\n  'key_f55',\n  'key_f56',\n  'key_f57',\n  'key_f58',\n  'key_f59',\n  'key_f60',\n  'key_f61',\n  'key_f62',\n  'key_f63',\n  'clr_bol',\n  'clear_margins',\n  'set_left_margin',\n  'set_right_margin',\n  'label_format',\n  'set_clock',\n  'display_clock',\n  'remove_clock',\n  'create_window',\n  'goto_window',\n  'hangup',\n  'dial_phone',\n  'quick_dial',\n  'tone',\n  'pulse',\n  'flash_hook',\n  'fixed_pause',\n  'wait_tone',\n  'user0',\n  'user1',\n  'user2',\n  'user3',\n  'user4',\n  'user5',\n  'user6',\n  'user7',\n  'user8',\n  'user9',\n  'orig_pair',\n  'orig_colors',\n  'initialize_color',\n  'initialize_pair',\n  'set_color_pair',\n  'set_foreground',\n  'set_background',\n  'change_char_pitch',\n  'change_line_pitch',\n  'change_res_horz',\n  'change_res_vert',\n  'define_char',\n  'enter_doublewide_mode',\n  'enter_draft_quality',\n  'enter_italics_mode',\n  'enter_leftward_mode',\n  'enter_micro_mode',\n  'enter_near_letter_quality',\n  'enter_normal_quality',\n  'enter_shadow_mode',\n  'enter_subscript_mode',\n  'enter_superscript_mode',\n  'enter_upward_mode',\n  'exit_doublewide_mode',\n  'exit_italics_mode',\n  'exit_leftward_mode',\n  'exit_micro_mode',\n  'exit_shadow_mode',\n  'exit_subscript_mode',\n  'exit_superscript_mode',\n  'exit_upward_mode',\n  'micro_column_address',\n  'micro_down',\n  'micro_left',\n  'micro_right',\n  'micro_row_address',\n  'micro_up',\n  'order_of_pins',\n  'parm_down_micro',\n  'parm_left_micro',\n  'parm_right_micro',\n  'parm_up_micro',\n  'select_char_set',\n  'set_bottom_margin',\n  'set_bottom_margin_parm',\n  'set_left_margin_parm',\n  'set_right_margin_parm',\n  'set_top_margin',\n  'set_top_margin_parm',\n  'start_bit_image',\n  'start_char_set_def',\n  'stop_bit_image',\n  'stop_char_set_def',\n  'subscript_characters',\n  'superscript_characters',\n  'these_cause_cr',\n  'zero_motion',\n  'char_set_names',\n  'key_mouse',\n  'mouse_info',\n  'req_mouse_pos',\n  'get_mouse',\n  'set_a_foreground',\n  'set_a_background',\n  'pkey_plab',\n  'device_type',\n  'code_set_init',\n  'set0_des_seq',\n  'set1_des_seq',\n  'set2_des_seq',\n  'set3_des_seq',\n  'set_lr_margin',\n  'set_tb_margin',\n  'bit_image_repeat',\n  'bit_image_newline',\n  'bit_image_carriage_return',\n  'color_names',\n  'define_bit_image_region',\n  'end_bit_image_region',\n  'set_color_band',\n  'set_page_length',\n  'display_pc_char',\n  'enter_pc_charset_mode',\n  'exit_pc_charset_mode',\n  'enter_scancode_mode',\n  'exit_scancode_mode',\n  'pc_term_options',\n  'scancode_escape',\n  'alt_scancode_esc',\n  'enter_horizontal_hl_mode',\n  'enter_left_hl_mode',\n  'enter_low_hl_mode',\n  'enter_right_hl_mode',\n  'enter_top_hl_mode',\n  'enter_vertical_hl_mode',\n  'set_a_attributes',\n  'set_pglen_inch',\n\n  // #ifdef __INTERNAL_CAPS_VISIBLE\n  'termcap_init2',\n  'termcap_reset',\n  'linefeed_if_not_lf',\n  'backspace_if_not_bs',\n  'other_non_function_keys',\n  'arrow_key_map',\n  'acs_ulcorner',\n  'acs_llcorner',\n  'acs_urcorner',\n  'acs_lrcorner',\n  'acs_ltee',\n  'acs_rtee',\n  'acs_btee',\n  'acs_ttee',\n  'acs_hline',\n  'acs_vline',\n  'acs_plus',\n  'memory_lock',\n  'memory_unlock',\n  'box_chars_1'\n];\n\n// DEC Special Character and Line Drawing Set.\n// Taken from tty.js.\nTput.acsc = {    // (0\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u0009', // '\\t'\n  'c': '\\u000c', // '\\f'\n  'd': '\\u000d', // '\\r'\n  'e': '\\u000a', // '\\n'\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '\\u2424' (NL)\n  'i': '\\u000b', // '\\v'\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n// Convert ACS unicode characters to the\n// most similar-looking ascii characters.\nTput.utoa = Tput.prototype.utoa = {\n  '\\u25c6': '*', // '◆'\n  '\\u2592': ' ', // '▒'\n  // '\\u0009': '\\t', // '\\t'\n  // '\\u000c': '\\f', // '\\f'\n  // '\\u000d': '\\r', // '\\r'\n  // '\\u000a': '\\n', // '\\n'\n  '\\u00b0': '*', // '°'\n  '\\u00b1': '+', // '±'\n  '\\u2424': '\\n', // '\\u2424' (NL)\n  // '\\u000b': '\\v', // '\\v'\n  '\\u2518': '+', // '┘'\n  '\\u2510': '+', // '┐'\n  '\\u250c': '+', // '┌'\n  '\\u2514': '+', // '└'\n  '\\u253c': '+', // '┼'\n  '\\u23ba': '-', // '⎺'\n  '\\u23bb': '-', // '⎻'\n  '\\u2500': '-', // '─'\n  '\\u23bc': '-', // '⎼'\n  '\\u23bd': '_', // '⎽'\n  '\\u251c': '+', // '├'\n  '\\u2524': '+', // '┤'\n  '\\u2534': '+', // '┴'\n  '\\u252c': '+', // '┬'\n  '\\u2502': '|', // '│'\n  '\\u2264': '<', // '≤'\n  '\\u2265': '>', // '≥'\n  '\\u03c0': '?', // 'π'\n  '\\u2260': '=', // '≠'\n  '\\u00a3': '?', // '£'\n  '\\u00b7': '*'  // '·'\n};\n\n/**\n * Expose\n */\n\nexports = Tput;\nexports.sprintf = sprintf;\nexports.tryRead = tryRead;\n\nmodule.exports = exports;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/alias.js":"/**\n * alias.js - terminfo/cap aliases for blessed.\n * https://github.com/chjj/blessed\n * Taken from terminfo(5) man page.\n */\n\n/* jshint maxlen: 300 */\n// jscs:disable maximumLineLength\n// jscs:disable\n\nvar alias = exports;\n\n// These are the boolean capabilities:\nalias.bools = {\n  //         Variable                                      Cap-                               TCap                                  Description\n  //         Booleans                                      name                               Code\n  'auto_left_margin':                                      ['bw',                                 'bw'], //                                cub1 wraps from col‐ umn 0 to last column\n  'auto_right_margin':                                     ['am',                                 'am'], //                                terminal has auto‐ matic margins\n  'back_color_erase':                                      ['bce',                                'ut'], //                                screen erased with background color\n  'can_change':                                            ['ccc',                                'cc'], //                                terminal can re- define existing col‐ ors\n  'ceol_standout_glitch':                                  ['xhp',                                'xs'], //                                standout not erased by overwriting (hp)\n  'col_addr_glitch':                                       ['xhpa',                               'YA'], //                                only positive motion for hpa/mhpa caps\n  'cpi_changes_res':                                       ['cpix',                               'YF'], //                                changing character pitch changes reso‐ lution\n  'cr_cancels_micro_mode':                                 ['crxm',                               'YB'], //                                using cr turns off micro mode\n  'dest_tabs_magic_smso':                                  ['xt',                                 'xt'], //                                tabs destructive, magic so char (t1061)\n  'eat_newline_glitch':                                    ['xenl',                               'xn'], //                                newline ignored after 80 cols (con‐ cept)\n  'erase_overstrike':                                      ['eo',                                 'eo'], //                                can erase over‐ strikes with a blank\n  'generic_type':                                          ['gn',                                 'gn'], //                                generic line type\n  'hard_copy':                                             ['hc',                                 'hc'], //                                hardcopy terminal\n  'hard_cursor':                                           ['chts',                               'HC'], //                                cursor is hard to see\n  'has_meta_key':                                          ['km',                                 'km'], //                                Has a meta key (i.e., sets 8th-bit)\n  'has_print_wheel':                                       ['daisy',                              'YC'], //                                printer needs opera‐ tor to change char‐ acter set\n  'has_status_line':                                       ['hs',                                 'hs'], //                                has extra status line\n  'hue_lightness_saturation':                              ['hls',                                'hl'], //                                terminal uses only HLS color notation (Tektronix)\n  'insert_null_glitch':                                    ['in',                                 'in'], //                                insert mode distin‐ guishes nulls\n  'lpi_changes_res':                                       ['lpix',                               'YG'], //                                changing line pitch changes resolution\n  'memory_above':                                          ['da',                                 'da'], //                                display may be retained above the screen\n  'memory_below':                                          ['db',                                 'db'], //                                display may be retained below the screen\n  'move_insert_mode':                                      ['mir',                                'mi'], //                                safe to move while in insert mode\n  'move_standout_mode':                                    ['msgr',                               'ms'], //                                safe to move while in standout mode\n  'needs_xon_xoff':                                        ['nxon',                               'nx'], //                                padding will not work, xon/xoff required\n  'no_esc_ctlc':                                           ['xsb',                                'xb'], //                                beehive (f1=escape, f2=ctrl C)\n  'no_pad_char':                                           ['npc',                                'NP'], //                                pad character does not exist\n  'non_dest_scroll_region':                                ['ndscr',                              'ND'], //                                scrolling region is non-destructive\n  'non_rev_rmcup':                                         ['nrrmc',                              'NR'], //                                smcup does not reverse rmcup\n  'over_strike':                                           ['os',                                 'os'], //                                terminal can over‐ strike\n  'prtr_silent':                                           ['mc5i',                               '5i'], //                                printer will not echo on screen\n  'row_addr_glitch':                                       ['xvpa',                               'YD'], //                                only positive motion for vpa/mvpa caps\n  'semi_auto_right_margin':                                ['sam',                                'YE'], //                                printing in last column causes cr\n  'status_line_esc_ok':                                    ['eslok',                              'es'], //                                escape can be used on the status line\n  'tilde_glitch':                                          ['hz',                                 'hz'], //                                cannot print ~'s (hazeltine)\n  'transparent_underline':                                 ['ul',                                 'ul'], //                                underline character overstrikes\n  'xon_xoff':                                              ['xon',                                'xo']  //                                terminal uses xon/xoff handshaking\n};\n\n// These are the numeric capabilities:\nalias.numbers = {\n  //         Variable                                      Cap-                               TCap                                  Description\n  //          Numeric                                      name                               Code\n  'columns':                                               ['cols',                               'co'], //                                number of columns in a line\n  'init_tabs':                                             ['it',                                 'it'], //                                tabs initially every # spaces\n  'label_height':                                          ['lh',                                 'lh'], //                                rows in each label\n  'label_width':                                           ['lw',                                 'lw'], //                                columns in each label\n  'lines':                                                 ['lines',                              'li'], //                                number of lines on screen or page\n  'lines_of_memory':                                       ['lm',                                 'lm'], //                                lines of memory if > line. 0 means varies\n  'magic_cookie_glitch':                                   ['xmc',                                'sg'], //                                number of blank characters left by smso or rmso\n  'max_attributes':                                        ['ma',                                 'ma'], //                                maximum combined attributes terminal can handle\n  'max_colors':                                            ['colors',                             'Co'], //                                maximum number of colors on screen\n  'max_pairs':                                             ['pairs',                              'pa'], //                                maximum number of color-pairs on the screen\n  'maximum_windows':                                       ['wnum',                               'MW'], //                                maximum number of defineable windows\n  'no_color_video':                                        ['ncv',                                'NC'], //                                video attributes that cannot be used with colors\n  'num_labels':                                            ['nlab',                               'Nl'], //                                number of labels on screen\n  'padding_baud_rate':                                     ['pb',                                 'pb'], //                                lowest baud rate where padding needed\n  'virtual_terminal':                                      ['vt',                                 'vt'], //                                virtual terminal number (CB/unix)\n  'width_status_line':                                     ['wsl',                                'ws'], //                                number of columns in status line\n\n  // The  following  numeric  capabilities  are present in the SVr4.0 term structure, but are not yet documented in the man page.  They came in with\n  // SVr4's printer support.\n\n\n  //         Variable                                      Cap-                               TCap                                  Description\n  //          Numeric                                      name                               Code\n  'bit_image_entwining':                                   ['bitwin',                             'Yo'], //                                number of passes for each bit-image row\n  'bit_image_type':                                        ['bitype',                             'Yp'], //                                type of bit-image device\n  'buffer_capacity':                                       ['bufsz',                              'Ya'], //                                numbers of bytes buffered before printing\n  'buttons':                                               ['btns',                               'BT'], //                                number of buttons on mouse\n  'dot_horz_spacing':                                      ['spinh',                              'Yc'], //                                spacing of dots hor‐ izontally in dots per inch\n  'dot_vert_spacing':                                      ['spinv',                              'Yb'], //                                spacing of pins ver‐ tically in pins per inch\n  'max_micro_address':                                     ['maddr',                              'Yd'], //                                maximum value in micro_..._address\n  'max_micro_jump':                                        ['mjump',                              'Ye'], //                                maximum value in parm_..._micro\n  'micro_col_size':                                        ['mcs',                                'Yf'], //                                character step size when in micro mode\n  'micro_line_size':                                       ['mls',                                'Yg'], //                                line step size when in micro mode\n  'number_of_pins':                                        ['npins',                              'Yh'], //                                numbers of pins in print-head\n  'output_res_char':                                       ['orc',                                'Yi'], //                                horizontal resolu‐ tion in units per line\n  'output_res_horz_inch':                                  ['orhi',                               'Yk'], //                                horizontal resolu‐ tion in units per inch\n  'output_res_line':                                       ['orl',                                'Yj'], //                                vertical resolution in units per line\n  'output_res_vert_inch':                                  ['orvi',                               'Yl'], //                                vertical resolution in units per inch\n  'print_rate':                                            ['cps',                                'Ym'], //                                print rate in char‐ acters per second\n  'wide_char_size':                                        ['widcs',                              'Yn']  //                                character step size when in double wide mode\n};\n\n// These are the string capabilities:\nalias.strings = {\n  //         Variable                                    Cap-                             TCap                                   Description\n  //          String                                     name                             Code\n  'acs_chars':                                           ['acsc',                             'ac'], //                              graphics charset pairs, based on vt100\n  'back_tab':                                            ['cbt',                              'bt'], //                              back tab (P)\n  'bell':                                                ['bel',                              'bl'], //                              audible signal (bell) (P)\n  'carriage_return':                                     ['cr',                               'cr'], //                              carriage return (P*) (P*)\n  'change_char_pitch':                                   ['cpi',                              'ZA'], //                              Change number of characters per inch to #1\n  'change_line_pitch':                                   ['lpi',                              'ZB'], //                              Change number of lines per inch to #1\n  'change_res_horz':                                     ['chr',                              'ZC'], //                              Change horizontal resolution to #1\n  'change_res_vert':                                     ['cvr',                              'ZD'], //                              Change vertical res‐ olution to #1\n  'change_scroll_region':                                ['csr',                              'cs'], //                              change region to line #1 to line #2 (P)\n  'char_padding':                                        ['rmp',                              'rP'], //                              like ip but when in insert mode\n  'clear_all_tabs':                                      ['tbc',                              'ct'], //                              clear all tab stops (P)\n  'clear_margins':                                       ['mgc',                              'MC'], //                              clear right and left soft margins\n  'clear_screen':                                        ['clear',                            'cl'], //                              clear screen and home cursor (P*)\n  'clr_bol':                                             ['el1',                              'cb'], //                              Clear to beginning of line\n  'clr_eol':                                             ['el',                               'ce'], //                              clear to end of line (P)\n  'clr_eos':                                             ['ed',                               'cd'], //                              clear to end of screen (P*)\n  'column_address':                                      ['hpa',                              'ch'], //                              horizontal position #1, absolute (P)\n  'command_character':                                   ['cmdch',                            'CC'], //                              terminal settable cmd character in prototype !?\n  'create_window':                                       ['cwin',                             'CW'], //                              define a window #1 from #2,#3 to #4,#5\n  'cursor_address':                                      ['cup',                              'cm'], //                              move to row #1 col‐ umns #2\n  'cursor_down':                                         ['cud1',                             'do'], //                              down one line\n  'cursor_home':                                         ['home',                             'ho'], //                              home cursor (if no cup)\n  'cursor_invisible':                                    ['civis',                            'vi'], //                              make cursor invisi‐ ble\n  'cursor_left':                                         ['cub1',                             'le'], //                              move left one space\n  'cursor_mem_address':                                  ['mrcup',                            'CM'], //                              memory relative cur‐ sor addressing, move to row #1 columns #2\n  'cursor_normal':                                       ['cnorm',                            've'], //                              make cursor appear normal (undo civis/cvvis)\n  'cursor_right':                                        ['cuf1',                             'nd'], //                              non-destructive space (move right one space)\n  'cursor_to_ll':                                        ['ll',                               'll'], //                              last line, first column (if no cup)\n  'cursor_up':                                           ['cuu1',                             'up'], //                              up one line\n  'cursor_visible':                                      ['cvvis',                            'vs'], //                              make cursor very visible\n  'define_char':                                         ['defc',                             'ZE'], //                              Define a character #1, #2 dots wide, descender #3\n  'delete_character':                                    ['dch1',                             'dc'], //                              delete character (P*)\n  'delete_line':                                         ['dl1',                              'dl'], //                              delete line (P*)\n  'dial_phone':                                          ['dial',                             'DI'], //                              dial number #1\n  'dis_status_line':                                     ['dsl',                              'ds'], //                              disable status line\n  'display_clock':                                       ['dclk',                             'DK'], //                              display clock\n  'down_half_line':                                      ['hd',                               'hd'], //                              half a line down\n  'ena_acs':                                             ['enacs',                            'eA'], //                              enable alternate char set\n  'enter_alt_charset_mode':                              ['smacs',                            'as'], //                              start alternate character set (P)\n  'enter_am_mode':                                       ['smam',                             'SA'], //                              turn on automatic margins\n  'enter_blink_mode':                                    ['blink',                            'mb'], //                              turn on blinking\n  'enter_bold_mode':                                     ['bold',                             'md'], //                              turn on bold (extra bright) mode\n  'enter_ca_mode':                                       ['smcup',                            'ti'], //                              string to start pro‐ grams using cup\n  'enter_delete_mode':                                   ['smdc',                             'dm'], //                              enter delete mode\n  'enter_dim_mode':                                      ['dim',                              'mh'], //                              turn on half-bright mode\n  'enter_doublewide_mode':                               ['swidm',                            'ZF'], //                              Enter double-wide mode\n  'enter_draft_quality':                                 ['sdrfq',                            'ZG'], //                              Enter draft-quality mode\n  'enter_insert_mode':                                   ['smir',                             'im'], //                              enter insert mode\n  'enter_italics_mode':                                  ['sitm',                             'ZH'], //                              Enter italic mode\n  'enter_leftward_mode':                                 ['slm',                              'ZI'], //                              Start leftward car‐ riage motion\n  'enter_micro_mode':                                    ['smicm',                            'ZJ'], //                              Start micro-motion mode\n  'enter_near_letter_quality':                           ['snlq',                             'ZK'], //                              Enter NLQ mode\n  'enter_normal_quality':                                ['snrmq',                            'ZL'], //                              Enter normal-quality mode\n  'enter_protected_mode':                                ['prot',                             'mp'], //                              turn on protected mode\n  'enter_reverse_mode':                                  ['rev',                              'mr'], //                              turn on reverse video mode\n  'enter_secure_mode':                                   ['invis',                            'mk'], //                              turn on blank mode (characters invisi‐ ble)\n  'enter_shadow_mode':                                   ['sshm',                             'ZM'], //                              Enter shadow-print mode\n  'enter_standout_mode':                                 ['smso',                             'so'], //                              begin standout mode\n  'enter_subscript_mode':                                ['ssubm',                            'ZN'], //                              Enter subscript mode\n  'enter_superscript_mode':                              ['ssupm',                            'ZO'], //                              Enter superscript mode\n  'enter_underline_mode':                                ['smul',                             'us'], //                              begin underline mode\n  'enter_upward_mode':                                   ['sum',                              'ZP'], //                              Start upward car‐ riage motion\n  'enter_xon_mode':                                      ['smxon',                            'SX'], //                              turn on xon/xoff handshaking\n  'erase_chars':                                         ['ech',                              'ec'], //                              erase #1 characters (P)\n  'exit_alt_charset_mode':                               ['rmacs',                            'ae'], //                              end alternate char‐ acter set (P)\n  'exit_am_mode':                                        ['rmam',                             'RA'], //                              turn off automatic margins\n  'exit_attribute_mode':                                 ['sgr0',                             'me'], //                              turn off all attributes\n  'exit_ca_mode':                                        ['rmcup',                            'te'], //                              strings to end pro‐ grams using cup\n  'exit_delete_mode':                                    ['rmdc',                             'ed'], //                              end delete mode\n  'exit_doublewide_mode':                                ['rwidm',                            'ZQ'], //                              End double-wide mode\n  'exit_insert_mode':                                    ['rmir',                             'ei'], //                              exit insert mode\n  'exit_italics_mode':                                   ['ritm',                             'ZR'], //                              End italic mode\n  'exit_leftward_mode':                                  ['rlm',                              'ZS'], //                              End left-motion mode\n\n\n  'exit_micro_mode':                                     ['rmicm',                            'ZT'], //                              End micro-motion mode\n  'exit_shadow_mode':                                    ['rshm',                             'ZU'], //                              End shadow-print mode\n  'exit_standout_mode':                                  ['rmso',                             'se'], //                              exit standout mode\n  'exit_subscript_mode':                                 ['rsubm',                            'ZV'], //                              End subscript mode\n  'exit_superscript_mode':                               ['rsupm',                            'ZW'], //                              End superscript mode\n  'exit_underline_mode':                                 ['rmul',                             'ue'], //                              exit underline mode\n  'exit_upward_mode':                                    ['rum',                              'ZX'], //                              End reverse charac‐ ter motion\n  'exit_xon_mode':                                       ['rmxon',                            'RX'], //                              turn off xon/xoff handshaking\n  'fixed_pause':                                         ['pause',                            'PA'], //                              pause for 2-3 sec‐ onds\n  'flash_hook':                                          ['hook',                             'fh'], //                              flash switch hook\n  'flash_screen':                                        ['flash',                            'vb'], //                              visible bell (may not move cursor)\n  'form_feed':                                           ['ff',                               'ff'], //                              hardcopy terminal page eject (P*)\n  'from_status_line':                                    ['fsl',                              'fs'], //                              return from status line\n  'goto_window':                                         ['wingo',                            'WG'], //                              go to window #1\n  'hangup':                                              ['hup',                              'HU'], //                              hang-up phone\n  'init_1string':                                        ['is1',                              'i1'], //                              initialization string\n  'init_2string':                                        ['is2',                              'is'], //                              initialization string\n  'init_3string':                                        ['is3',                              'i3'], //                              initialization string\n  'init_file':                                           ['if',                               'if'], //                              name of initializa‐ tion file\n  'init_prog':                                           ['iprog',                            'iP'], //                              path name of program for initialization\n  'initialize_color':                                    ['initc',                            'Ic'], //                              initialize color #1 to (#2,#3,#4)\n  'initialize_pair':                                     ['initp',                            'Ip'], //                              Initialize color pair #1 to fg=(#2,#3,#4), bg=(#5,#6,#7)\n  'insert_character':                                    ['ich1',                             'ic'], //                              insert character (P)\n  'insert_line':                                         ['il1',                              'al'], //                              insert line (P*)\n  'insert_padding':                                      ['ip',                               'ip'], //                              insert padding after inserted character\n  'key_a1':                                              ['ka1',                              'K1'], //                              upper left of keypad\n  'key_a3':                                              ['ka3',                              'K3'], //                              upper right of key‐ pad\n  'key_b2':                                              ['kb2',                              'K2'], //                              center of keypad\n  'key_backspace':                                       ['kbs',                              'kb'], //                              backspace key\n  'key_beg':                                             ['kbeg',                             '@1'], //                              begin key\n  'key_btab':                                            ['kcbt',                             'kB'], //                              back-tab key\n  'key_c1':                                              ['kc1',                              'K4'], //                              lower left of keypad\n  'key_c3':                                              ['kc3',                              'K5'], //                              lower right of key‐ pad\n  'key_cancel':                                          ['kcan',                             '@2'], //                              cancel key\n  'key_catab':                                           ['ktbc',                             'ka'], //                              clear-all-tabs key\n  'key_clear':                                           ['kclr',                             'kC'], //                              clear-screen or erase key\n  'key_close':                                           ['kclo',                             '@3'], //                              close key\n  'key_command':                                         ['kcmd',                             '@4'], //                              command key\n  'key_copy':                                            ['kcpy',                             '@5'], //                              copy key\n  'key_create':                                          ['kcrt',                             '@6'], //                              create key\n  'key_ctab':                                            ['kctab',                            'kt'], //                              clear-tab key\n  'key_dc':                                              ['kdch1',                            'kD'], //                              delete-character key\n  'key_dl':                                              ['kdl1',                             'kL'], //                              delete-line key\n  'key_down':                                            ['kcud1',                            'kd'], //                              down-arrow key\n\n  'key_eic':                                             ['krmir',                            'kM'], //                              sent by rmir or smir in insert mode\n  'key_end':                                             ['kend',                             '@7'], //                              end key\n  'key_enter':                                           ['kent',                             '@8'], //                              enter/send key\n  'key_eol':                                             ['kel',                              'kE'], //                              clear-to-end-of-line key\n  'key_eos':                                             ['ked',                              'kS'], //                              clear-to-end-of- screen key\n  'key_exit':                                            ['kext',                             '@9'], //                              exit key\n  'key_f0':                                              ['kf0',                              'k0'], //                              F0 function key\n  'key_f1':                                              ['kf1',                              'k1'], //                              F1 function key\n  'key_f10':                                             ['kf10',                             'k;'], //                              F10 function key\n  'key_f11':                                             ['kf11',                             'F1'], //                              F11 function key\n  'key_f12':                                             ['kf12',                             'F2'], //                              F12 function key\n  'key_f13':                                             ['kf13',                             'F3'], //                              F13 function key\n  'key_f14':                                             ['kf14',                             'F4'], //                              F14 function key\n  'key_f15':                                             ['kf15',                             'F5'], //                              F15 function key\n  'key_f16':                                             ['kf16',                             'F6'], //                              F16 function key\n  'key_f17':                                             ['kf17',                             'F7'], //                              F17 function key\n  'key_f18':                                             ['kf18',                             'F8'], //                              F18 function key\n  'key_f19':                                             ['kf19',                             'F9'], //                              F19 function key\n  'key_f2':                                              ['kf2',                              'k2'], //                              F2 function key\n  'key_f20':                                             ['kf20',                             'FA'], //                              F20 function key\n  'key_f21':                                             ['kf21',                             'FB'], //                              F21 function key\n  'key_f22':                                             ['kf22',                             'FC'], //                              F22 function key\n  'key_f23':                                             ['kf23',                             'FD'], //                              F23 function key\n  'key_f24':                                             ['kf24',                             'FE'], //                              F24 function key\n  'key_f25':                                             ['kf25',                             'FF'], //                              F25 function key\n  'key_f26':                                             ['kf26',                             'FG'], //                              F26 function key\n  'key_f27':                                             ['kf27',                             'FH'], //                              F27 function key\n  'key_f28':                                             ['kf28',                             'FI'], //                              F28 function key\n  'key_f29':                                             ['kf29',                             'FJ'], //                              F29 function key\n  'key_f3':                                              ['kf3',                              'k3'], //                              F3 function key\n  'key_f30':                                             ['kf30',                             'FK'], //                              F30 function key\n  'key_f31':                                             ['kf31',                             'FL'], //                              F31 function key\n  'key_f32':                                             ['kf32',                             'FM'], //                              F32 function key\n  'key_f33':                                             ['kf33',                             'FN'], //                              F33 function key\n  'key_f34':                                             ['kf34',                             'FO'], //                              F34 function key\n  'key_f35':                                             ['kf35',                             'FP'], //                              F35 function key\n  'key_f36':                                             ['kf36',                             'FQ'], //                              F36 function key\n  'key_f37':                                             ['kf37',                             'FR'], //                              F37 function key\n  'key_f38':                                             ['kf38',                             'FS'], //                              F38 function key\n  'key_f39':                                             ['kf39',                             'FT'], //                              F39 function key\n  'key_f4':                                              ['kf4',                              'k4'], //                              F4 function key\n  'key_f40':                                             ['kf40',                             'FU'], //                              F40 function key\n  'key_f41':                                             ['kf41',                             'FV'], //                              F41 function key\n  'key_f42':                                             ['kf42',                             'FW'], //                              F42 function key\n  'key_f43':                                             ['kf43',                             'FX'], //                              F43 function key\n  'key_f44':                                             ['kf44',                             'FY'], //                              F44 function key\n  'key_f45':                                             ['kf45',                             'FZ'], //                              F45 function key\n  'key_f46':                                             ['kf46',                             'Fa'], //                              F46 function key\n  'key_f47':                                             ['kf47',                             'Fb'], //                              F47 function key\n  'key_f48':                                             ['kf48',                             'Fc'], //                              F48 function key\n  'key_f49':                                             ['kf49',                             'Fd'], //                              F49 function key\n  'key_f5':                                              ['kf5',                              'k5'], //                              F5 function key\n  'key_f50':                                             ['kf50',                             'Fe'], //                              F50 function key\n  'key_f51':                                             ['kf51',                             'Ff'], //                              F51 function key\n  'key_f52':                                             ['kf52',                             'Fg'], //                              F52 function key\n  'key_f53':                                             ['kf53',                             'Fh'], //                              F53 function key\n  'key_f54':                                             ['kf54',                             'Fi'], //                              F54 function key\n  'key_f55':                                             ['kf55',                             'Fj'], //                              F55 function key\n  'key_f56':                                             ['kf56',                             'Fk'], //                              F56 function key\n  'key_f57':                                             ['kf57',                             'Fl'], //                              F57 function key\n  'key_f58':                                             ['kf58',                             'Fm'], //                              F58 function key\n  'key_f59':                                             ['kf59',                             'Fn'], //                              F59 function key\n\n  'key_f6':                                              ['kf6',                              'k6'], //                              F6 function key\n  'key_f60':                                             ['kf60',                             'Fo'], //                              F60 function key\n  'key_f61':                                             ['kf61',                             'Fp'], //                              F61 function key\n  'key_f62':                                             ['kf62',                             'Fq'], //                              F62 function key\n  'key_f63':                                             ['kf63',                             'Fr'], //                              F63 function key\n  'key_f7':                                              ['kf7',                              'k7'], //                              F7 function key\n  'key_f8':                                              ['kf8',                              'k8'], //                              F8 function key\n  'key_f9':                                              ['kf9',                              'k9'], //                              F9 function key\n  'key_find':                                            ['kfnd',                             '@0'], //                              find key\n  'key_help':                                            ['khlp',                             '%1'], //                              help key\n  'key_home':                                            ['khome',                            'kh'], //                              home key\n  'key_ic':                                              ['kich1',                            'kI'], //                              insert-character key\n  'key_il':                                              ['kil1',                             'kA'], //                              insert-line key\n  'key_left':                                            ['kcub1',                            'kl'], //                              left-arrow key\n  'key_ll':                                              ['kll',                              'kH'], //                              lower-left key (home down)\n  'key_mark':                                            ['kmrk',                             '%2'], //                              mark key\n  'key_message':                                         ['kmsg',                             '%3'], //                              message key\n  'key_move':                                            ['kmov',                             '%4'], //                              move key\n  'key_next':                                            ['knxt',                             '%5'], //                              next key\n  'key_npage':                                           ['knp',                              'kN'], //                              next-page key\n  'key_open':                                            ['kopn',                             '%6'], //                              open key\n  'key_options':                                         ['kopt',                             '%7'], //                              options key\n  'key_ppage':                                           ['kpp',                              'kP'], //                              previous-page key\n  'key_previous':                                        ['kprv',                             '%8'], //                              previous key\n  'key_print':                                           ['kprt',                             '%9'], //                              print key\n  'key_redo':                                            ['krdo',                             '%0'], //                              redo key\n  'key_reference':                                       ['kref',                             '&1'], //                              reference key\n  'key_refresh':                                         ['krfr',                             '&2'], //                              refresh key\n  'key_replace':                                         ['krpl',                             '&3'], //                              replace key\n  'key_restart':                                         ['krst',                             '&4'], //                              restart key\n  'key_resume':                                          ['kres',                             '&5'], //                              resume key\n  'key_right':                                           ['kcuf1',                            'kr'], //                              right-arrow key\n  'key_save':                                            ['ksav',                             '&6'], //                              save key\n  'key_sbeg':                                            ['kBEG',                             '&9'], //                              shifted begin key\n  'key_scancel':                                         ['kCAN',                             '&0'], //                              shifted cancel key\n  'key_scommand':                                        ['kCMD',                             '*1'], //                              shifted command key\n  'key_scopy':                                           ['kCPY',                             '*2'], //                              shifted copy key\n  'key_screate':                                         ['kCRT',                             '*3'], //                              shifted create key\n  'key_sdc':                                             ['kDC',                              '*4'], //                              shifted delete-char‐ acter key\n  'key_sdl':                                             ['kDL',                              '*5'], //                              shifted delete-line key\n  'key_select':                                          ['kslt',                             '*6'], //                              select key\n  'key_send':                                            ['kEND',                             '*7'], //                              shifted end key\n  'key_seol':                                            ['kEOL',                             '*8'], //                              shifted clear-to- end-of-line key\n  'key_sexit':                                           ['kEXT',                             '*9'], //                              shifted exit key\n  'key_sf':                                              ['kind',                             'kF'], //                              scroll-forward key\n  'key_sfind':                                           ['kFND',                             '*0'], //                              shifted find key\n  'key_shelp':                                           ['kHLP',                             '#1'], //                              shifted help key\n  'key_shome':                                           ['kHOM',                             '#2'], //                              shifted home key\n  'key_sic':                                             ['kIC',                              '#3'], //                              shifted insert-char‐ acter key\n  'key_sleft':                                           ['kLFT',                             '#4'], //                              shifted left-arrow key\n  'key_smessage':                                        ['kMSG',                             '%a'], //                              shifted message key\n  'key_smove':                                           ['kMOV',                             '%b'], //                              shifted move key\n  'key_snext':                                           ['kNXT',                             '%c'], //                              shifted next key\n  'key_soptions':                                        ['kOPT',                             '%d'], //                              shifted options key\n  'key_sprevious':                                       ['kPRV',                             '%e'], //                              shifted previous key\n  'key_sprint':                                          ['kPRT',                             '%f'], //                              shifted print key\n  'key_sr':                                              ['kri',                              'kR'], //                              scroll-backward key\n  'key_sredo':                                           ['kRDO',                             '%g'], //                              shifted redo key\n  'key_sreplace':                                        ['kRPL',                             '%h'], //                              shifted replace key\n\n  'key_sright':                                          ['kRIT',                             '%i'], //                              shifted right-arrow key\n  'key_srsume':                                          ['kRES',                             '%j'], //                              shifted resume key\n  'key_ssave':                                           ['kSAV',                             '!1'], //                              shifted save key\n  'key_ssuspend':                                        ['kSPD',                             '!2'], //                              shifted suspend key\n  'key_stab':                                            ['khts',                             'kT'], //                              set-tab key\n  'key_sundo':                                           ['kUND',                             '!3'], //                              shifted undo key\n  'key_suspend':                                         ['kspd',                             '&7'], //                              suspend key\n  'key_undo':                                            ['kund',                             '&8'], //                              undo key\n  'key_up':                                              ['kcuu1',                            'ku'], //                              up-arrow key\n  'keypad_local':                                        ['rmkx',                             'ke'], //                              leave 'key‐ board_transmit' mode\n  'keypad_xmit':                                         ['smkx',                             'ks'], //                              enter 'key‐ board_transmit' mode\n  'lab_f0':                                              ['lf0',                              'l0'], //                              label on function key f0 if not f0\n  'lab_f1':                                              ['lf1',                              'l1'], //                              label on function key f1 if not f1\n  'lab_f10':                                             ['lf10',                             'la'], //                              label on function key f10 if not f10\n  'lab_f2':                                              ['lf2',                              'l2'], //                              label on function key f2 if not f2\n  'lab_f3':                                              ['lf3',                              'l3'], //                              label on function key f3 if not f3\n  'lab_f4':                                              ['lf4',                              'l4'], //                              label on function key f4 if not f4\n  'lab_f5':                                              ['lf5',                              'l5'], //                              label on function key f5 if not f5\n  'lab_f6':                                              ['lf6',                              'l6'], //                              label on function key f6 if not f6\n  'lab_f7':                                              ['lf7',                              'l7'], //                              label on function key f7 if not f7\n  'lab_f8':                                              ['lf8',                              'l8'], //                              label on function key f8 if not f8\n  'lab_f9':                                              ['lf9',                              'l9'], //                              label on function key f9 if not f9\n  'label_format':                                        ['fln',                              'Lf'], //                              label format\n  'label_off':                                           ['rmln',                             'LF'], //                              turn off soft labels\n  'label_on':                                            ['smln',                             'LO'], //                              turn on soft labels\n  'meta_off':                                            ['rmm',                              'mo'], //                              turn off meta mode\n  'meta_on':                                             ['smm',                              'mm'], //                              turn on meta mode (8th-bit on)\n  'micro_column_address':                                ['mhpa',                             'ZY'], //                              Like column_address in micro mode\n  'micro_down':                                          ['mcud1',                            'ZZ'], //                              Like cursor_down in micro mode\n  'micro_left':                                          ['mcub1',                            'Za'], //                              Like cursor_left in micro mode\n  'micro_right':                                         ['mcuf1',                            'Zb'], //                              Like cursor_right in micro mode\n  'micro_row_address':                                   ['mvpa',                             'Zc'], //                              Like row_address #1 in micro mode\n  'micro_up':                                            ['mcuu1',                            'Zd'], //                              Like cursor_up in micro mode\n  'newline':                                             ['nel',                              'nw'], //                              newline (behave like cr followed by lf)\n  'order_of_pins':                                       ['porder',                           'Ze'], //                              Match software bits to print-head pins\n  'orig_colors':                                         ['oc',                               'oc'], //                              Set all color pairs to the original ones\n  'orig_pair':                                           ['op',                               'op'], //                              Set default pair to its original value\n  'pad_char':                                            ['pad',                              'pc'], //                              padding char (instead of null)\n\n\n  'parm_dch':                                            ['dch',                              'DC'], //                              delete #1 characters (P*)\n  'parm_delete_line':                                    ['dl',                               'DL'], //                              delete #1 lines (P*)\n  'parm_down_cursor':                                    ['cud',                              'DO'], //                              down #1 lines (P*)\n  'parm_down_micro':                                     ['mcud',                             'Zf'], //                              Like parm_down_cur‐ sor in micro mode\n  'parm_ich':                                            ['ich',                              'IC'], //                              insert #1 characters (P*)\n  'parm_index':                                          ['indn',                             'SF'], //                              scroll forward #1 lines (P)\n  'parm_insert_line':                                    ['il',                               'AL'], //                              insert #1 lines (P*)\n  'parm_left_cursor':                                    ['cub',                              'LE'], //                              move #1 characters to the left (P)\n  'parm_left_micro':                                     ['mcub',                             'Zg'], //                              Like parm_left_cur‐ sor in micro mode\n  'parm_right_cursor':                                   ['cuf',                              'RI'], //                              move #1 characters to the right (P*)\n  'parm_right_micro':                                    ['mcuf',                             'Zh'], //                              Like parm_right_cur‐ sor in micro mode\n  'parm_rindex':                                         ['rin',                              'SR'], //                              scroll back #1 lines (P)\n  'parm_up_cursor':                                      ['cuu',                              'UP'], //                              up #1 lines (P*)\n  'parm_up_micro':                                       ['mcuu',                             'Zi'], //                              Like parm_up_cursor in micro mode\n  'pkey_key':                                            ['pfkey',                            'pk'], //                              program function key #1 to type string #2\n  'pkey_local':                                          ['pfloc',                            'pl'], //                              program function key #1 to execute string #2\n  'pkey_xmit':                                           ['pfx',                              'px'], //                              program function key #1 to transmit string #2\n  'plab_norm':                                           ['pln',                              'pn'], //                              program label #1 to show string #2\n  'print_screen':                                        ['mc0',                              'ps'], //                              print contents of screen\n  'prtr_non':                                            ['mc5p',                             'pO'], //                              turn on printer for #1 bytes\n  'prtr_off':                                            ['mc4',                              'pf'], //                              turn off printer\n  'prtr_on':                                             ['mc5',                              'po'], //                              turn on printer\n  'pulse':                                               ['pulse',                            'PU'], //                              select pulse dialing\n  'quick_dial':                                          ['qdial',                            'QD'], //                              dial number #1 with‐ out checking\n  'remove_clock':                                        ['rmclk',                            'RC'], //                              remove clock\n  'repeat_char':                                         ['rep',                              'rp'], //                              repeat char #1 #2 times (P*)\n  'req_for_input':                                       ['rfi',                              'RF'], //                              send next input char (for ptys)\n  'reset_1string':                                       ['rs1',                              'r1'], //                              reset string\n  'reset_2string':                                       ['rs2',                              'r2'], //                              reset string\n  'reset_3string':                                       ['rs3',                              'r3'], //                              reset string\n  'reset_file':                                          ['rf',                               'rf'], //                              name of reset file\n  'restore_cursor':                                      ['rc',                               'rc'], //                              restore cursor to position of last save_cursor\n  'row_address':                                         ['vpa',                              'cv'], //                              vertical position #1 absolute (P)\n  'save_cursor':                                         ['sc',                               'sc'], //                              save current cursor position (P)\n  'scroll_forward':                                      ['ind',                              'sf'], //                              scroll text up (P)\n  'scroll_reverse':                                      ['ri',                               'sr'], //                              scroll text down (P)\n  'select_char_set':                                     ['scs',                              'Zj'], //                              Select character set, #1\n\n\n\n  'set_attributes':                                      ['sgr',                              'sa'], //                              define video attributes #1-#9 (PG9)\n  'set_background':                                      ['setb',                             'Sb'], //                              Set background color #1\n  'set_bottom_margin':                                   ['smgb',                             'Zk'], //                              Set bottom margin at current line\n  'set_bottom_margin_parm':                              ['smgbp',                            'Zl'], //                              Set bottom margin at line #1 or (if smgtp is not given) #2 lines from bottom\n  'set_clock':                                           ['sclk',                             'SC'], //                              set clock, #1 hrs #2 mins #3 secs\n  'set_color_pair':                                      ['scp',                              'sp'], //                              Set current color pair to #1\n  'set_foreground':                                      ['setf',                             'Sf'], //                              Set foreground color #1\n  'set_left_margin':                                     ['smgl',                             'ML'], //                              set left soft margin at current col‐ umn.  See smgl. (ML is not in BSD termcap).\n  'set_left_margin_parm':                                ['smglp',                            'Zm'], //                              Set left (right) margin at column #1\n  'set_right_margin':                                    ['smgr',                             'MR'], //                              set right soft margin at current column\n  'set_right_margin_parm':                               ['smgrp',                            'Zn'], //                              Set right margin at column #1\n  'set_tab':                                             ['hts',                              'st'], //                              set a tab in every row, current columns\n  'set_top_margin':                                      ['smgt',                             'Zo'], //                              Set top margin at current line\n  'set_top_margin_parm':                                 ['smgtp',                            'Zp'], //                              Set top (bottom) margin at row #1\n  'set_window':                                          ['wind',                             'wi'], //                              current window is lines #1-#2 cols #3-#4\n  'start_bit_image':                                     ['sbim',                             'Zq'], //                              Start printing bit image graphics\n  'start_char_set_def':                                  ['scsd',                             'Zr'], //                              Start character set defi‐ nition #1, with #2 charac‐ ters in the set\n  'stop_bit_image':                                      ['rbim',                             'Zs'], //                              Stop printing bit image graphics\n  'stop_char_set_def':                                   ['rcsd',                             'Zt'], //                              End definition of charac‐ ter set #1\n  'subscript_characters':                                ['subcs',                            'Zu'], //                              List of subscriptable characters\n  'superscript_characters':                              ['supcs',                            'Zv'], //                              List of superscriptable characters\n  'tab':                                                 ['ht',                               'ta'], //                              tab to next 8-space hard‐ ware tab stop\n  'these_cause_cr':                                      ['docr',                             'Zw'], //                              Printing any of these characters causes CR\n  'to_status_line':                                      ['tsl',                              'ts'], //                              move to status line, col‐ umn #1\n  'tone':                                                ['tone',                             'TO'], //                              select touch tone dialing\n  'underline_char':                                      ['uc',                               'uc'], //                              underline char and move past it\n  'up_half_line':                                        ['hu',                               'hu'], //                              half a line up\n  'user0':                                               ['u0',                               'u0'], //                              User string #0\n  'user1':                                               ['u1',                               'u1'], //                              User string #1\n  'user2':                                               ['u2',                               'u2'], //                              User string #2\n  'user3':                                               ['u3',                               'u3'], //                              User string #3\n  'user4':                                               ['u4',                               'u4'], //                              User string #4\n  'user5':                                               ['u5',                               'u5'], //                              User string #5\n\n  'user6':                                               ['u6',                               'u6'], //                              User string #6\n  'user7':                                               ['u7',                               'u7'], //                              User string #7\n  'user8':                                               ['u8',                               'u8'], //                              User string #8\n  'user9':                                               ['u9',                               'u9'], //                              User string #9\n  'wait_tone':                                           ['wait',                             'WA'], //                              wait for dial-tone\n  'xoff_character':                                      ['xoffc',                            'XF'], //                              XOFF character\n  'xon_character':                                       ['xonc',                             'XN'], //                              XON character\n  'zero_motion':                                         ['zerom',                            'Zx'], //                              No motion for subsequent character\n\n  // The following string capabilities are present in the SVr4.0 term structure, but were originally not documented in the man page.\n\n\n  //         Variable                                      Cap-                                 TCap                                 Description\n  //          String                                       name                                 Code\n  'alt_scancode_esc':                                      ['scesa',                                'S8'], //                                Alternate escape for scancode emu‐ lation\n  'bit_image_carriage_return':                             ['bicr',                                 'Yv'], //                                Move to beginning of same row\n  'bit_image_newline':                                     ['binel',                                'Zz'], //                                Move to next row of the bit image\n  'bit_image_repeat':                                      ['birep',                                'Xy'], //                                Repeat bit image cell #1 #2 times\n  'char_set_names':                                        ['csnm',                                 'Zy'], //                                Produce #1'th item from list of char‐ acter set names\n  'code_set_init':                                         ['csin',                                 'ci'], //                                Init sequence for multiple codesets\n  'color_names':                                           ['colornm',                              'Yw'], //                                Give name for color #1\n  'define_bit_image_region':                               ['defbi',                                'Yx'], //                                Define rectan‐ gualar bit image region\n  'device_type':                                           ['devt',                                 'dv'], //                                Indicate lan‐ guage/codeset sup‐ port\n  'display_pc_char':                                       ['dispc',                                'S1'], //                                Display PC charac‐ ter #1\n  'end_bit_image_region':                                  ['endbi',                                'Yy'], //                                End a bit-image region\n  'enter_pc_charset_mode':                                 ['smpch',                                'S2'], //                                Enter PC character display mode\n  'enter_scancode_mode':                                   ['smsc',                                 'S4'], //                                Enter PC scancode mode\n  'exit_pc_charset_mode':                                  ['rmpch',                                'S3'], //                                Exit PC character display mode\n  'exit_scancode_mode':                                    ['rmsc',                                 'S5'], //                                Exit PC scancode mode\n  'get_mouse':                                             ['getm',                                 'Gm'], //                                Curses should get button events, parameter #1 not documented.\n  'key_mouse':                                             ['kmous',                                'Km'], //                                Mouse event has occurred\n  'mouse_info':                                            ['minfo',                                'Mi'], //                                Mouse status information\n  'pc_term_options':                                       ['pctrm',                                'S6'], //                                PC terminal options\n  'pkey_plab':                                             ['pfxl',                                 'xl'], //                                Program function key #1 to type string #2 and show string #3\n  'req_mouse_pos':                                         ['reqmp',                                'RQ'], //                                Request mouse position\n\n  'scancode_escape':                                       ['scesc',                                'S7'], //                                Escape for scan‐ code emulation\n  'set0_des_seq':                                          ['s0ds',                                 's0'], //                                Shift to codeset 0 (EUC set 0, ASCII)\n  'set1_des_seq':                                          ['s1ds',                                 's1'], //                                Shift to codeset 1\n  'set2_des_seq':                                          ['s2ds',                                 's2'], //                                Shift to codeset 2\n  'set3_des_seq':                                          ['s3ds',                                 's3'], //                                Shift to codeset 3\n  'set_a_background':                                      ['setab',                                'AB'], //                                Set background color to #1, using ANSI escape\n  'set_a_foreground':                                      ['setaf',                                'AF'], //                                Set foreground color to #1, using ANSI escape\n  'set_color_band':                                        ['setcolor',                             'Yz'], //                                Change to ribbon color #1\n  'set_lr_margin':                                         ['smglr',                                'ML'], //                                Set both left and right margins to #1, #2.  (ML is not in BSD term‐ cap).\n  'set_page_length':                                       ['slines',                               'YZ'], //                                Set page length to #1 lines\n  'set_tb_margin':                                         ['smgtb',                                'MT'], //                                Sets both top and bottom margins to #1, #2\n\n  // The XSI Curses standard added these.  They are some post-4.1 versions of System V curses, e.g., Solaris 2.5 and IRIX 6.x.  The ncurses termcap\n  // names for them are invented; according to the XSI Curses standard, they have no termcap names.  If your compiled terminfo entries  use  these,\n  // they may not be binary-compatible with System V terminfo entries after SVr4.1; beware!\n\n\n  //         Variable                                      Cap-                               TCap                                 Description\n  //          String                                       name                               Code\n  'enter_horizontal_hl_mode':                              ['ehhlm',                              'Xh'], //                               Enter horizontal highlight mode\n  'enter_left_hl_mode':                                    ['elhlm',                              'Xl'], //                               Enter left highlight mode\n  'enter_low_hl_mode':                                     ['elohlm',                             'Xo'], //                               Enter low highlight mode\n  'enter_right_hl_mode':                                   ['erhlm',                              'Xr'], //                               Enter right high‐ light mode\n  'enter_top_hl_mode':                                     ['ethlm',                              'Xt'], //                               Enter top highlight mode\n  'enter_vertical_hl_mode':                                ['evhlm',                              'Xv'], //                               Enter vertical high‐ light mode\n  'set_a_attributes':                                      ['sgr1',                               'sA'], //                               Define second set of video attributes #1-#6\n  'set_pglen_inch':                                        ['slength',                            'sL']  //                               YI Set page length to #1 hundredth of an inch\n};\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/colors.js":"/**\n * colors.js - color-related functions for blessed.\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\nexports.match = function(r1, g1, b1) {\n  if (typeof r1 === 'string') {\n    var hex = r1;\n    if (hex[0] !== '#') {\n      return -1;\n    }\n    hex = exports.hexToRGB(hex);\n    r1 = hex[0], g1 = hex[1], b1 = hex[2];\n  } else if (Array.isArray(r1)) {\n    b1 = r1[2], g1 = r1[1], r1 = r1[0];\n  }\n\n  var hash = (r1 << 16) | (g1 << 8) | b1;\n\n  if (exports._cache[hash] != null) {\n    return exports._cache[hash];\n  }\n\n  var ldiff = Infinity\n    , li = -1\n    , i = 0\n    , c\n    , r2\n    , g2\n    , b2\n    , diff;\n\n  for (; i < exports.vcolors.length; i++) {\n    c = exports.vcolors[i];\n    r2 = c[0];\n    g2 = c[1];\n    b2 = c[2];\n\n    diff = colorDistance(r1, g1, b1, r2, g2, b2);\n\n    if (diff === 0) {\n      li = i;\n      break;\n    }\n\n    if (diff < ldiff) {\n      ldiff = diff;\n      li = i;\n    }\n  }\n\n  return exports._cache[hash] = li;\n};\n\nexports.RGBToHex = function(r, g, b) {\n  if (Array.isArray(r)) {\n    b = r[2], g = r[1], r = r[0];\n  }\n\n  function hex(n) {\n    n = n.toString(16);\n    if (n.length < 2) n = '0' + n;\n    return n;\n  }\n\n  return '#' + hex(r) + hex(g) + hex(b);\n};\n\nexports.hexToRGB = function(hex) {\n  if (hex.length === 4) {\n    hex = hex[0]\n      + hex[1] + hex[1]\n      + hex[2] + hex[2]\n      + hex[3] + hex[3];\n  }\n\n  var col = parseInt(hex.substring(1), 16)\n    , r = (col >> 16) & 0xff\n    , g = (col >> 8) & 0xff\n    , b = col & 0xff;\n\n  return [r, g, b];\n};\n\n// As it happens, comparing how similar two colors are is really hard. Here is\n// one of the simplest solutions, which doesn't require conversion to another\n// color space, posted on stackoverflow[1]. Maybe someone better at math can\n// propose a superior solution.\n// [1] http://stackoverflow.com/questions/1633828\n\nfunction colorDistance(r1, g1, b1, r2, g2, b2) {\n  return Math.pow(30 * (r1 - r2), 2)\n    + Math.pow(59 * (g1 - g2), 2)\n    + Math.pow(11 * (b1 - b2), 2);\n}\n\n// This might work well enough for a terminal's colors: treat RGB as XYZ in a\n// 3-dimensional space and go midway between the two points.\nexports.mixColors = function(c1, c2, alpha) {\n  // if (c1 === 0x1ff) return c1;\n  // if (c2 === 0x1ff) return c1;\n  if (c1 === 0x1ff) c1 = 0;\n  if (c2 === 0x1ff) c2 = 0;\n  if (alpha == null) alpha = 0.5;\n\n  c1 = exports.vcolors[c1];\n  var r1 = c1[0];\n  var g1 = c1[1];\n  var b1 = c1[2];\n\n  c2 = exports.vcolors[c2];\n  var r2 = c2[0];\n  var g2 = c2[1];\n  var b2 = c2[2];\n\n  r1 += (r2 - r1) * alpha | 0;\n  g1 += (g2 - g1) * alpha | 0;\n  b1 += (b2 - b1) * alpha | 0;\n\n  return exports.match([r1, g1, b1]);\n};\n\nexports.blend = function blend(attr, attr2, alpha) {\n  var name, i, c, nc;\n\n  var bg = attr & 0x1ff;\n  if (attr2 != null) {\n    var bg2 = attr2 & 0x1ff;\n    if (bg === 0x1ff) bg = 0;\n    if (bg2 === 0x1ff) bg2 = 0;\n    bg = exports.mixColors(bg, bg2, alpha);\n  } else {\n    if (blend._cache[bg] != null) {\n      bg = blend._cache[bg];\n    // } else if (bg < 8) {\n    //   bg += 8;\n    } else if (bg >= 8 && bg <= 15) {\n      bg -= 8;\n    } else {\n      name = exports.ncolors[bg];\n      if (name) {\n        for (i = 0; i < exports.ncolors.length; i++) {\n          if (name === exports.ncolors[i] && i !== bg) {\n            c = exports.vcolors[bg];\n            nc = exports.vcolors[i];\n            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {\n              blend._cache[bg] = i;\n              bg = i;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  attr &= ~0x1ff;\n  attr |= bg;\n\n  var fg = (attr >> 9) & 0x1ff;\n  if (attr2 != null) {\n    var fg2 = (attr2 >> 9) & 0x1ff;\n    // 0, 7, 188, 231, 251\n    if (fg === 0x1ff) {\n      // XXX workaround\n      fg = 248;\n    } else {\n      if (fg === 0x1ff) fg = 7;\n      if (fg2 === 0x1ff) fg2 = 7;\n      fg = exports.mixColors(fg, fg2, alpha);\n    }\n  } else {\n    if (blend._cache[fg] != null) {\n      fg = blend._cache[fg];\n    // } else if (fg < 8) {\n    //   fg += 8;\n    } else if (fg >= 8 && fg <= 15) {\n      fg -= 8;\n    } else {\n      name = exports.ncolors[fg];\n      if (name) {\n        for (i = 0; i < exports.ncolors.length; i++) {\n          if (name === exports.ncolors[i] && i !== fg) {\n            c = exports.vcolors[fg];\n            nc = exports.vcolors[i];\n            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {\n              blend._cache[fg] = i;\n              fg = i;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  attr &= ~(0x1ff << 9);\n  attr |= fg << 9;\n\n  return attr;\n};\n\nexports.blend._cache = {};\n\nexports._cache = {};\n\nexports.reduce = function(color, total) {\n  if (color >= 16 && total <= 16) {\n    color = exports.ccolors[color];\n  } else if (color >= 8 && total <= 8) {\n    color -= 8;\n  } else if (color >= 2 && total <= 2) {\n    color %= 2;\n  }\n  return color;\n};\n\n// XTerm Colors\n// These were actually tough to track down. The xterm source only uses color\n// keywords. The X11 source needed to be examined to find the actual values.\n// They then had to be mapped to rgb values and then converted to hex values.\nexports.xterm = [\n  '#000000', // black\n  '#cd0000', // red3\n  '#00cd00', // green3\n  '#cdcd00', // yellow3\n  '#0000ee', // blue2\n  '#cd00cd', // magenta3\n  '#00cdcd', // cyan3\n  '#e5e5e5', // gray90\n  '#7f7f7f', // gray50\n  '#ff0000', // red\n  '#00ff00', // green\n  '#ffff00', // yellow\n  '#5c5cff', // rgb:5c/5c/ff\n  '#ff00ff', // magenta\n  '#00ffff', // cyan\n  '#ffffff'  // white\n];\n\n// Seed all 256 colors. Assume xterm defaults.\n// Ported from the xterm color generation script.\nexports.colors = (function() {\n  var cols = exports.colors = []\n    , _cols = exports.vcolors = []\n    , r\n    , g\n    , b\n    , i\n    , l;\n\n  function hex(n) {\n    n = n.toString(16);\n    if (n.length < 2) n = '0' + n;\n    return n;\n  }\n\n  function push(i, r, g, b) {\n    cols[i] = '#' + hex(r) + hex(g) + hex(b);\n    _cols[i] = [r, g, b];\n  }\n\n  // 0 - 15\n  exports.xterm.forEach(function(c, i) {\n    c = parseInt(c.substring(1), 16);\n    push(i, (c >> 16) & 0xff, (c >> 8) & 0xff, c & 0xff);\n  });\n\n  // 16 - 231\n  for (r = 0; r < 6; r++) {\n    for (g = 0; g < 6; g++) {\n      for (b = 0; b < 6; b++) {\n        i = 16 + (r * 36) + (g * 6) + b;\n        push(i,\n          r ? (r * 40 + 55) : 0,\n          g ? (g * 40 + 55) : 0,\n          b ? (b * 40 + 55) : 0);\n      }\n    }\n  }\n\n  // 232 - 255 are grey.\n  for (g = 0; g < 24; g++) {\n    l = (g * 10) + 8;\n    i = 232 + g;\n    push(i, l, l, l);\n  }\n\n  return cols;\n})();\n\n// Map higher colors to the first 8 colors.\n// This allows translation of high colors to low colors on 8-color terminals.\nexports.ccolors = (function() {\n  var _cols = exports.vcolors.slice()\n    , cols = exports.colors.slice()\n    , out;\n\n  exports.vcolors = exports.vcolors.slice(0, 8);\n  exports.colors = exports.colors.slice(0, 8);\n\n  out = cols.map(exports.match);\n\n  exports.colors = cols;\n  exports.vcolors = _cols;\n  exports.ccolors = out;\n\n  return out;\n})();\n\nvar colorNames = exports.colorNames = {\n  // special\n  default: -1,\n  normal: -1,\n  bg: -1,\n  fg: -1,\n  // normal\n  black: 0,\n  red: 1,\n  green: 2,\n  yellow: 3,\n  blue: 4,\n  magenta: 5,\n  cyan: 6,\n  white: 7,\n  // light\n  lightblack: 8,\n  lightred: 9,\n  lightgreen: 10,\n  lightyellow: 11,\n  lightblue: 12,\n  lightmagenta: 13,\n  lightcyan: 14,\n  lightwhite: 15,\n  // bright\n  brightblack: 8,\n  brightred: 9,\n  brightgreen: 10,\n  brightyellow: 11,\n  brightblue: 12,\n  brightmagenta: 13,\n  brightcyan: 14,\n  brightwhite: 15,\n  // alternate spellings\n  grey: 8,\n  gray: 8,\n  lightgrey: 7,\n  lightgray: 7,\n  brightgrey: 7,\n  brightgray: 7\n};\n\nexports.convert = function(color) {\n  if (typeof color === 'number') {\n    ;\n  } else if (typeof color === 'string') {\n    color = color.replace(/[\\- ]/g, '');\n    if (colorNames[color] != null) {\n      color = colorNames[color];\n    } else {\n      color = exports.match(color);\n    }\n  } else if (Array.isArray(color)) {\n    color = exports.match(color);\n  } else {\n    color = -1;\n  }\n  return color !== -1 ? color : 0x1ff;\n};\n\n// Map higher colors to the first 8 colors.\n// This allows translation of high colors to low colors on 8-color terminals.\n// Why the hell did I do this by hand?\nexports.ccolors = {\n  blue: [\n    4,\n    12,\n    [17, 21],\n    [24, 27],\n    [31, 33],\n    [38, 39],\n    45,\n    [54, 57],\n    [60, 63],\n    [67, 69],\n    [74, 75],\n    81,\n    [91, 93],\n    [97, 99],\n    [103, 105],\n    [110, 111],\n    117,\n    [128, 129],\n    [134, 135],\n    [140, 141],\n    [146, 147],\n    153,\n    165,\n    171,\n    177,\n    183,\n    189\n  ],\n\n  green: [\n    2,\n    10,\n    22,\n    [28, 29],\n    [34, 36],\n    [40, 43],\n    [46, 50],\n    [64, 65],\n    [70, 72],\n    [76, 79],\n    [82, 86],\n    [106, 108],\n    [112, 115],\n    [118, 122],\n    [148, 151],\n    [154, 158],\n    [190, 194]\n  ],\n\n  cyan: [\n    6,\n    14,\n    23,\n    30,\n    37,\n    44,\n    51,\n    66,\n    73,\n    80,\n    87,\n    109,\n    116,\n    123,\n    152,\n    159,\n    195\n  ],\n\n  red: [\n    1,\n    9,\n    52,\n    [88, 89],\n    [94, 95],\n    [124, 126],\n    [130, 132],\n    [136, 138],\n    [160, 163],\n    [166, 169],\n    [172, 175],\n    [178, 181],\n    [196, 200],\n    [202, 206],\n    [208, 212],\n    [214, 218],\n    [220, 224]\n  ],\n\n  magenta: [\n    5,\n    13,\n    53,\n    90,\n    96,\n    127,\n    133,\n    139,\n    164,\n    170,\n    176,\n    182,\n    201,\n    207,\n    213,\n    219,\n    225\n  ],\n\n  yellow: [\n    3,\n    11,\n    58,\n    [100, 101],\n    [142, 144],\n    [184, 187],\n    [226, 230]\n  ],\n\n  black: [\n    0,\n    8,\n    16,\n    59,\n    102,\n    [232, 243]\n  ],\n\n  white: [\n    7,\n    15,\n    145,\n    188,\n    231,\n    [244, 255]\n  ]\n};\n\nexports.ncolors = [];\n\nObject.keys(exports.ccolors).forEach(function(name) {\n  exports.ccolors[name].forEach(function(offset) {\n    if (typeof offset === 'number') {\n      exports.ncolors[offset] = name;\n      exports.ccolors[offset] = exports.colorNames[name];\n      return;\n    }\n    for (var i = offset[0], l = offset[1]; i <= l; i++) {\n      exports.ncolors[i] = name;\n      exports.ccolors[i] = exports.colorNames[name];\n    }\n  });\n  delete exports.ccolors[name];\n});\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widget.js":"/**\n * widget.js - high-level interface for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\nvar widget = exports;\n\nwidget.classes = [\n  'Node',\n  'Screen',\n  'Element',\n  'Box',\n  'Text',\n  'Line',\n  'ScrollableBox',\n  'ScrollableText',\n  'BigText',\n  'List',\n  'Form',\n  'Input',\n  'Textarea',\n  'Textbox',\n  'Button',\n  'ProgressBar',\n  'FileManager',\n  'Checkbox',\n  'RadioSet',\n  'RadioButton',\n  'Prompt',\n  'Question',\n  'Message',\n  'Loading',\n  'Listbar',\n  'Log',\n  'Table',\n  'ListTable',\n  'Terminal',\n  'Image',\n  'ANSIImage',\n  'OverlayImage',\n  'Video',\n  'Layout'\n];\n\nwidget.classes.forEach(function(name) {\n  var file = name.toLowerCase();\n  widget[name] = widget[file] = require('./widgets/' + file);\n});\n\nwidget.aliases = {\n  'ListBar': 'Listbar',\n  'PNG': 'ANSIImage'\n};\n\nObject.keys(widget.aliases).forEach(function(key) {\n  var name = widget.aliases[key];\n  widget[key] = widget[name];\n  widget[key.toLowerCase()] = widget[name];\n});\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/node.js":"/**\n * node.js - base abstract node for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar EventEmitter = require('../events').EventEmitter;\n\n/**\n * Node\n */\n\nfunction Node(options) {\n  var self = this;\n  var Screen = require('./screen');\n\n  if (!(this instanceof Node)) {\n    return new Node(options);\n  }\n\n  EventEmitter.call(this);\n\n  options = options || {};\n  this.options = options;\n\n  this.screen = this.screen || options.screen;\n\n  if (!this.screen) {\n    if (this.type === 'screen') {\n      this.screen = this;\n    } else if (Screen.total === 1) {\n      this.screen = Screen.global;\n    } else if (options.parent) {\n      this.screen = options.parent;\n      while (this.screen && this.screen.type !== 'screen') {\n        this.screen = this.screen.parent;\n      }\n    } else if (Screen.total) {\n      // This _should_ work in most cases as long as the element is appended\n      // synchronously after the screen's creation. Throw error if not.\n      this.screen = Screen.instances[Screen.instances.length - 1];\n      process.nextTick(function() {\n        if (!self.parent) {\n          throw new Error('Element (' + self.type + ')'\n            + ' was not appended synchronously after the'\n            + ' screen\\'s creation. Please set a `parent`'\n            + ' or `screen` option in the element\\'s constructor'\n            + ' if you are going to use multiple screens and'\n            + ' append the element later.');\n        }\n      });\n    } else {\n      throw new Error('No active screen.');\n    }\n  }\n\n  this.parent = options.parent || null;\n  this.children = [];\n  this.$ = this._ = this.data = {};\n  this.uid = Node.uid++;\n  this.index = this.index != null ? this.index : -1;\n\n  if (this.type !== 'screen') {\n    this.detached = true;\n  }\n\n  if (this.parent) {\n    this.parent.append(this);\n  }\n\n  (options.children || []).forEach(this.append.bind(this));\n}\n\nNode.uid = 0;\n\nNode.prototype.__proto__ = EventEmitter.prototype;\n\nNode.prototype.type = 'node';\n\nNode.prototype.insert = function(element, i) {\n  var self = this;\n\n  if (element.screen && element.screen !== this.screen) {\n    throw new Error('Cannot switch a node\\'s screen.');\n  }\n\n  element.detach();\n  element.parent = this;\n  element.screen = this.screen;\n\n  if (i === 0) {\n    this.children.unshift(element);\n  } else if (i === this.children.length) {\n    this.children.push(element);\n  } else {\n    this.children.splice(i, 0, element);\n  }\n\n  element.emit('reparent', this);\n  this.emit('adopt', element);\n\n  (function emit(el) {\n    var n = el.detached !== self.detached;\n    el.detached = self.detached;\n    if (n) el.emit('attach');\n    el.children.forEach(emit);\n  })(element);\n\n  if (!this.screen.focused) {\n    this.screen.focused = element;\n  }\n};\n\nNode.prototype.prepend = function(element) {\n  this.insert(element, 0);\n};\n\nNode.prototype.append = function(element) {\n  this.insert(element, this.children.length);\n};\n\nNode.prototype.insertBefore = function(element, other) {\n  var i = this.children.indexOf(other);\n  if (~i) this.insert(element, i);\n};\n\nNode.prototype.insertAfter = function(element, other) {\n  var i = this.children.indexOf(other);\n  if (~i) this.insert(element, i + 1);\n};\n\nNode.prototype.remove = function(element) {\n  if (element.parent !== this) return;\n\n  var i = this.children.indexOf(element);\n  if (!~i) return;\n\n  element.clearPos();\n\n  element.parent = null;\n\n  this.children.splice(i, 1);\n\n  i = this.screen.clickable.indexOf(element);\n  if (~i) this.screen.clickable.splice(i, 1);\n  i = this.screen.keyable.indexOf(element);\n  if (~i) this.screen.keyable.splice(i, 1);\n\n  element.emit('reparent', null);\n  this.emit('remove', element);\n\n  (function emit(el) {\n    var n = el.detached !== true;\n    el.detached = true;\n    if (n) el.emit('detach');\n    el.children.forEach(emit);\n  })(element);\n\n  if (this.screen.focused === element) {\n    this.screen.rewindFocus();\n  }\n};\n\nNode.prototype.detach = function() {\n  if (this.parent) this.parent.remove(this);\n};\n\nNode.prototype.free = function() {\n  return;\n};\n\nNode.prototype.destroy = function() {\n  this.detach();\n  this.forDescendants(function(el) {\n    el.free();\n    el.destroyed = true;\n    el.emit('destroy');\n  }, this);\n};\n\nNode.prototype.forDescendants = function(iter, s) {\n  if (s) iter(this);\n  this.children.forEach(function emit(el) {\n    iter(el);\n    el.children.forEach(emit);\n  });\n};\n\nNode.prototype.forAncestors = function(iter, s) {\n  var el = this;\n  if (s) iter(this);\n  while (el = el.parent) {\n    iter(el);\n  }\n};\n\nNode.prototype.collectDescendants = function(s) {\n  var out = [];\n  this.forDescendants(function(el) {\n    out.push(el);\n  }, s);\n  return out;\n};\n\nNode.prototype.collectAncestors = function(s) {\n  var out = [];\n  this.forAncestors(function(el) {\n    out.push(el);\n  }, s);\n  return out;\n};\n\nNode.prototype.emitDescendants = function() {\n  var args = Array.prototype.slice(arguments)\n    , iter;\n\n  if (typeof args[args.length - 1] === 'function') {\n    iter = args.pop();\n  }\n\n  return this.forDescendants(function(el) {\n    if (iter) iter(el);\n    el.emit.apply(el, args);\n  }, true);\n};\n\nNode.prototype.emitAncestors = function() {\n  var args = Array.prototype.slice(arguments)\n    , iter;\n\n  if (typeof args[args.length - 1] === 'function') {\n    iter = args.pop();\n  }\n\n  return this.forAncestors(function(el) {\n    if (iter) iter(el);\n    el.emit.apply(el, args);\n  }, true);\n};\n\nNode.prototype.hasDescendant = function(target) {\n  return (function find(el) {\n    for (var i = 0; i < el.children.length; i++) {\n      if (el.children[i] === target) {\n        return true;\n      }\n      if (find(el.children[i]) === true) {\n        return true;\n      }\n    }\n    return false;\n  })(this);\n};\n\nNode.prototype.hasAncestor = function(target) {\n  var el = this;\n  while (el = el.parent) {\n    if (el === target) return true;\n  }\n  return false;\n};\n\nNode.prototype.get = function(name, value) {\n  if (this.data.hasOwnProperty(name)) {\n    return this.data[name];\n  }\n  return value;\n};\n\nNode.prototype.set = function(name, value) {\n  return this.data[name] = value;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Node;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/events.js":"/**\n * events.js - event emitter for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\nvar slice = Array.prototype.slice;\n\n/**\n * EventEmitter\n */\n\nfunction EventEmitter() {\n  if (!this._events) this._events = {};\n}\n\nEventEmitter.prototype.setMaxListeners = function(n) {\n  this._maxListeners = n;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  if (!this._events[type]) {\n    this._events[type] = listener;\n  } else if (typeof this._events[type] === 'function') {\n    this._events[type] = [this._events[type], listener];\n  } else {\n    this._events[type].push(listener);\n  }\n  this._emit('newListener', [type, listener]);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var handler = this._events[type];\n  if (!handler) return;\n\n  if (typeof handler === 'function' || handler.length === 1) {\n    delete this._events[type];\n    this._emit('removeListener', [type, listener]);\n    return;\n  }\n\n  for (var i = 0; i < handler.length; i++) {\n    if (handler[i] === listener || handler[i].listener === listener) {\n      handler.splice(i, 1);\n      this._emit('removeListener', [type, listener]);\n      return;\n    }\n  }\n};\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  if (type) {\n    delete this._events[type];\n  } else {\n    this._events = {};\n  }\n};\n\nEventEmitter.prototype.once = function(type, listener) {\n  function on() {\n    this.removeListener(type, on);\n    return listener.apply(this, arguments);\n  }\n  on.listener = listener;\n  return this.on(type, on);\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  return typeof this._events[type] === 'function'\n    ? [this._events[type]]\n    : this._events[type] || [];\n};\n\nEventEmitter.prototype._emit = function(type, args) {\n  var handler = this._events[type]\n    , ret;\n\n  // if (type !== 'event') {\n  //   this._emit('event', [type.replace(/^element /, '')].concat(args));\n  // }\n\n  if (!handler) {\n    if (type === 'error') {\n      throw new args[0];\n    }\n    return;\n  }\n\n  if (typeof handler === 'function') {\n    return handler.apply(this, args);\n  }\n\n  for (var i = 0; i < handler.length; i++) {\n    if (handler[i].apply(this, args) === false) {\n      ret = false;\n    }\n  }\n\n  return ret !== false;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var args = slice.call(arguments, 1)\n    , params = slice.call(arguments)\n    , el = this;\n\n  this._emit('event', params);\n\n  if (this.type === 'screen') {\n    return this._emit(type, args);\n  }\n\n  if (this._emit(type, args) === false) {\n    return false;\n  }\n\n  type = 'element ' + type;\n  args.unshift(this);\n  // `element` prefix\n  // params = [type].concat(args);\n  // no `element` prefix\n  // params.splice(1, 0, this);\n\n  do {\n    // el._emit('event', params);\n    if (!el._events[type]) continue;\n    if (el._emit(type, args) === false) {\n      return false;\n    }\n  } while (el = el.parent);\n\n  return true;\n};\n\n// For hooking into the main EventEmitter if we want to.\n// Might be better to do things this way being that it\n// will always be compatible with node, not to mention\n// it gives us domain support as well.\n// Node.prototype._emit = Node.prototype.emit;\n// Node.prototype.emit = function(type) {\n//   var args, el;\n//\n//   if (this.type === 'screen') {\n//     return this._emit.apply(this, arguments);\n//   }\n//\n//   this._emit.apply(this, arguments);\n//   if (this._bubbleStopped) return false;\n//\n//   args = slice.call(arguments, 1);\n//   el = this;\n//\n//   args.unshift('element ' + type, this);\n//   this._bubbleStopped = false;\n//   //args.push(stopBubble);\n//\n//   do {\n//     if (!el._events || !el._events[type]) continue;\n//     el._emit.apply(el, args);\n//     if (this._bubbleStopped) return false;\n//   } while (el = el.parent);\n//\n//   return true;\n// };\n//\n// Node.prototype._addListener = Node.prototype.addListener;\n// Node.prototype.on =\n// Node.prototype.addListener = function(type, listener) {\n//   function on() {\n//     if (listener.apply(this, arguments) === false) {\n//       this._bubbleStopped = true;\n//     }\n//   }\n//   on.listener = listener;\n//   return this._addListener(type, on);\n// };\n\n/**\n * Expose\n */\n\nexports = EventEmitter;\nexports.EventEmitter = EventEmitter;\n\nmodule.exports = exports;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/screen.js":"/**\n * screen.js - screen node for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar path = require('path')\n  , fs = require('fs')\n  , cp = require('child_process');\n\nvar colors = require('../colors')\n  , program = require('../program')\n  , unicode = require('../unicode');\n\nvar nextTick = global.setImmediate || process.nextTick.bind(process);\n\nvar helpers = require('../helpers');\n\nvar Node = require('./node');\nvar Log = require('./log');\nvar Element = require('./element');\nvar Box = require('./box');\n\n/**\n * Screen\n */\n\nfunction Screen(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Screen(options);\n  }\n\n  Screen.bind(this);\n\n  options = options || {};\n  if (options.rsety && options.listen) {\n    options = { program: options };\n  }\n\n  this.program = options.program;\n\n  if (!this.program) {\n    this.program = program({\n      input: options.input,\n      output: options.output,\n      log: options.log,\n      debug: options.debug,\n      dump: options.dump,\n      terminal: options.terminal || options.term,\n      resizeTimeout: options.resizeTimeout,\n      forceUnicode: options.forceUnicode,\n      tput: true,\n      buffer: true,\n      zero: true\n    });\n  } else {\n    this.program.setupTput();\n    this.program.useBuffer = true;\n    this.program.zero = true;\n    this.program.options.resizeTimeout = options.resizeTimeout;\n    if (options.forceUnicode != null) {\n      this.program.tput.features.unicode = options.forceUnicode;\n      this.program.tput.unicode = options.forceUnicode;\n    }\n  }\n\n  this.tput = this.program.tput;\n\n  Node.call(this, options);\n\n  this.autoPadding = options.autoPadding !== false;\n  this.tabc = Array((options.tabSize || 4) + 1).join(' ');\n  this.dockBorders = options.dockBorders;\n\n  this.ignoreLocked = options.ignoreLocked || [];\n\n  this._unicode = this.tput.unicode || this.tput.numbers.U8 === 1;\n  this.fullUnicode = this.options.fullUnicode && this._unicode;\n\n  this.dattr = ((0 << 18) | (0x1ff << 9)) | 0x1ff;\n\n  this.renders = 0;\n  this.position = {\n    left: this.left = this.aleft = this.rleft = 0,\n    right: this.right = this.aright = this.rright = 0,\n    top: this.top = this.atop = this.rtop = 0,\n    bottom: this.bottom = this.abottom = this.rbottom = 0,\n    get height() { return self.height; },\n    get width() { return self.width; }\n  };\n\n  this.ileft = 0;\n  this.itop = 0;\n  this.iright = 0;\n  this.ibottom = 0;\n  this.iheight = 0;\n  this.iwidth = 0;\n\n  this.padding = {\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  };\n\n  this.hover = null;\n  this.history = [];\n  this.clickable = [];\n  this.keyable = [];\n  this.grabKeys = false;\n  this.lockKeys = false;\n  this.focused;\n  this._buf = '';\n\n  this._ci = -1;\n\n  if (options.title) {\n    this.title = options.title;\n  }\n\n  options.cursor = options.cursor || {\n    artificial: options.artificialCursor,\n    shape: options.cursorShape,\n    blink: options.cursorBlink,\n    color: options.cursorColor\n  };\n\n  this.cursor = {\n    artificial: options.cursor.artificial || false,\n    shape: options.cursor.shape || 'block',\n    blink: options.cursor.blink || false,\n    color: options.cursor.color || null,\n    _set: false,\n    _state: 1,\n    _hidden: true\n  };\n\n  this.program.on('resize', function() {\n    self.alloc();\n    self.render();\n    (function emit(el) {\n      el.emit('resize');\n      el.children.forEach(emit);\n    })(self);\n  });\n\n  this.program.on('focus', function() {\n    self.emit('focus');\n  });\n\n  this.program.on('blur', function() {\n    self.emit('blur');\n  });\n\n  this.program.on('warning', function(text) {\n    self.emit('warning', text);\n  });\n\n  this.on('newListener', function fn(type) {\n    if (type === 'keypress' || type.indexOf('key ') === 0 || type === 'mouse') {\n      if (type === 'keypress' || type.indexOf('key ') === 0) self._listenKeys();\n      if (type === 'mouse') self._listenMouse();\n    }\n    if (type === 'mouse'\n      || type === 'click'\n      || type === 'mouseover'\n      || type === 'mouseout'\n      || type === 'mousedown'\n      || type === 'mouseup'\n      || type === 'mousewheel'\n      || type === 'wheeldown'\n      || type === 'wheelup'\n      || type === 'mousemove') {\n      self._listenMouse();\n    }\n  });\n\n  this.setMaxListeners(Infinity);\n\n  this.enter();\n\n  this.postEnter();\n}\n\nScreen.global = null;\n\nScreen.total = 0;\n\nScreen.instances = [];\n\nScreen.bind = function(screen) {\n  if (!Screen.global) {\n    Screen.global = screen;\n  }\n\n  if (!~Screen.instances.indexOf(screen)) {\n    Screen.instances.push(screen);\n    screen.index = Screen.total;\n    Screen.total++;\n  }\n\n  if (Screen._bound) return;\n  Screen._bound = true;\n\n  process.on('uncaughtException', Screen._exceptionHandler = function(err) {\n    if (process.listeners('uncaughtException').length > 1) {\n      return;\n    }\n    Screen.instances.slice().forEach(function(screen) {\n      screen.destroy();\n    });\n    err = err || new Error('Uncaught Exception.');\n    console.error(err.stack ? err.stack + '' : err + '');\n    nextTick(function() {\n      process.exit(1);\n    });\n  });\n\n  ['SIGTERM', 'SIGINT', 'SIGQUIT'].forEach(function(signal) {\n    var name = '_' + signal.toLowerCase() + 'Handler';\n    process.on(signal, Screen[name] = function() {\n      if (process.listeners(signal).length > 1) {\n        return;\n      }\n      nextTick(function() {\n        process.exit(0);\n      });\n    });\n  });\n\n  process.on('exit', Screen._exitHandler = function() {\n    Screen.instances.slice().forEach(function(screen) {\n      screen.destroy();\n    });\n  });\n};\n\nScreen.prototype.__proto__ = Node.prototype;\n\nScreen.prototype.type = 'screen';\n\nScreen.prototype.__defineGetter__('title', function() {\n  return this.program.title;\n});\n\nScreen.prototype.__defineSetter__('title', function(title) {\n  return this.program.title = title;\n});\n\nScreen.prototype.__defineGetter__('terminal', function() {\n  return this.program.terminal;\n});\n\nScreen.prototype.__defineSetter__('terminal', function(terminal) {\n  this.setTerminal(terminal);\n  return this.program.terminal;\n});\n\nScreen.prototype.setTerminal = function(terminal) {\n  var entered = !!this.program.isAlt;\n  if (entered) {\n    this._buf = '';\n    this.program._buf = '';\n    this.leave();\n  }\n  this.program.setTerminal(terminal);\n  this.tput = this.program.tput;\n  if (entered) {\n    this.enter();\n  }\n};\n\nScreen.prototype.enter = function() {\n  if (this.program.isAlt) return;\n  if (!this.cursor._set) {\n    if (this.options.cursor.shape) {\n      this.cursorShape(this.cursor.shape, this.cursor.blink);\n    }\n    if (this.options.cursor.color) {\n      this.cursorColor(this.cursor.color);\n    }\n  }\n  if (process.platform === 'win32') {\n    try {\n      cp.execSync('cls', { stdio: 'ignore', timeout: 1000 });\n    } catch (e) {\n      ;\n    }\n  }\n  this.program.alternateBuffer();\n  this.program.put.keypad_xmit();\n  this.program.csr(0, this.height - 1);\n  this.program.hideCursor();\n  this.program.cup(0, 0);\n  // We need this for tmux now:\n  if (this.tput.strings.ena_acs) {\n    this.program._write(this.tput.enacs());\n  }\n  this.alloc();\n};\n\nScreen.prototype.leave = function() {\n  if (!this.program.isAlt) return;\n  this.program.put.keypad_local();\n  if (this.program.scrollTop !== 0\n      || this.program.scrollBottom !== this.rows - 1) {\n    this.program.csr(0, this.height - 1);\n  }\n  // XXX For some reason if alloc/clear() is before this\n  // line, it doesn't work on linux console.\n  this.program.showCursor();\n  this.alloc();\n  if (this._listenedMouse) {\n    this.program.disableMouse();\n  }\n  this.program.normalBuffer();\n  if (this.cursor._set) this.cursorReset();\n  this.program.flush();\n  if (process.platform === 'win32') {\n    try {\n      cp.execSync('cls', { stdio: 'ignore', timeout: 1000 });\n    } catch (e) {\n      ;\n    }\n  }\n};\n\nScreen.prototype.postEnter = function() {\n  var self = this;\n  if (this.options.debug) {\n    this.debugLog = new Log({\n      screen: this,\n      parent: this,\n      hidden: true,\n      draggable: true,\n      left: 'center',\n      top: 'center',\n      width: '30%',\n      height: '30%',\n      border: 'line',\n      label: ' {bold}Debug Log{/bold} ',\n      tags: true,\n      keys: true,\n      vi: true,\n      mouse: true,\n      scrollbar: {\n        ch: ' ',\n        track: {\n          bg: 'yellow'\n        },\n        style: {\n          inverse: true\n        }\n      }\n    });\n\n    this.debugLog.toggle = function() {\n      if (self.debugLog.hidden) {\n        self.saveFocus();\n        self.debugLog.show();\n        self.debugLog.setFront();\n        self.debugLog.focus();\n      } else {\n        self.debugLog.hide();\n        self.restoreFocus();\n      }\n      self.render();\n    };\n\n    this.debugLog.key(['q', 'escape'], self.debugLog.toggle);\n    this.key('f12', self.debugLog.toggle);\n  }\n\n  if (this.options.warnings) {\n    this.on('warning', function(text) {\n      var warning = new Box({\n        screen: self,\n        parent: self,\n        left: 'center',\n        top: 'center',\n        width: 'shrink',\n        padding: 1,\n        height: 'shrink',\n        align: 'center',\n        valign: 'middle',\n        border: 'line',\n        label: ' {red-fg}{bold}WARNING{/} ',\n        content: '{bold}' + text + '{/bold}',\n        tags: true\n      });\n      self.render();\n      var timeout = setTimeout(function() {\n        warning.destroy();\n        self.render();\n      }, 1500);\n      if (timeout.unref) {\n        timeout.unref();\n      }\n    });\n  }\n};\n\nScreen.prototype._destroy = Screen.prototype.destroy;\nScreen.prototype.destroy = function() {\n  this.leave();\n\n  var index = Screen.instances.indexOf(this);\n  if (~index) {\n    Screen.instances.splice(index, 1);\n    Screen.total--;\n\n    Screen.global = Screen.instances[0];\n\n    if (Screen.total === 0) {\n      Screen.global = null;\n\n      process.removeListener('uncaughtException', Screen._exceptionHandler);\n      process.removeListener('SIGTERM', Screen._sigtermHandler);\n      process.removeListener('SIGINT', Screen._sigintHandler);\n      process.removeListener('SIGQUIT', Screen._sigquitHandler);\n      process.removeListener('exit', Screen._exitHandler);\n      delete Screen._exceptionHandler;\n      delete Screen._sigtermHandler;\n      delete Screen._sigintHandler;\n      delete Screen._sigquitHandler;\n      delete Screen._exitHandler;\n\n      delete Screen._bound;\n    }\n\n    this.destroyed = true;\n    this.emit('destroy');\n    this._destroy();\n  }\n\n  this.program.destroy();\n};\n\nScreen.prototype.log = function() {\n  return this.program.log.apply(this.program, arguments);\n};\n\nScreen.prototype.debug = function() {\n  if (this.debugLog) {\n    this.debugLog.log.apply(this.debugLog, arguments);\n  }\n  return this.program.debug.apply(this.program, arguments);\n};\n\nScreen.prototype._listenMouse = function(el) {\n  var self = this;\n\n  if (el && !~this.clickable.indexOf(el)) {\n    el.clickable = true;\n    this.clickable.push(el);\n  }\n\n  if (this._listenedMouse) return;\n  this._listenedMouse = true;\n\n  this.program.enableMouse();\n  if (this.options.sendFocus) {\n    this.program.setMouse({ sendFocus: true }, true);\n  }\n\n  this.on('render', function() {\n    self._needsClickableSort = true;\n  });\n\n  this.program.on('mouse', function(data) {\n    if (self.lockKeys) return;\n\n    if (self._needsClickableSort) {\n      self.clickable = helpers.hsort(self.clickable);\n      self._needsClickableSort = false;\n    }\n\n    var i = 0\n      , el\n      , set\n      , pos;\n\n    for (; i < self.clickable.length; i++) {\n      el = self.clickable[i];\n\n      if (el.detached || !el.visible) {\n        continue;\n      }\n\n      // if (self.grabMouse && self.focused !== el\n      //     && !el.hasAncestor(self.focused)) continue;\n\n      pos = el.lpos;\n      if (!pos) continue;\n\n      if (data.x >= pos.xi && data.x < pos.xl\n          && data.y >= pos.yi && data.y < pos.yl) {\n        el.emit('mouse', data);\n        if (data.action === 'mousedown') {\n          self.mouseDown = el;\n        } else if (data.action === 'mouseup') {\n          (self.mouseDown || el).emit('click', data);\n          self.mouseDown = null;\n        } else if (data.action === 'mousemove') {\n          if (self.hover && el.index > self.hover.index) {\n            set = false;\n          }\n          if (self.hover !== el && !set) {\n            if (self.hover) {\n              self.hover.emit('mouseout', data);\n            }\n            el.emit('mouseover', data);\n            self.hover = el;\n          }\n          set = true;\n        }\n        el.emit(data.action, data);\n        break;\n      }\n    }\n\n    // Just mouseover?\n    if ((data.action === 'mousemove'\n        || data.action === 'mousedown'\n        || data.action === 'mouseup')\n        && self.hover\n        && !set) {\n      self.hover.emit('mouseout', data);\n      self.hover = null;\n    }\n\n    self.emit('mouse', data);\n    self.emit(data.action, data);\n  });\n\n  // Autofocus highest element.\n  // this.on('element click', function(el, data) {\n  //   var target;\n  //   do {\n  //     if (el.clickable === true && el.options.autoFocus !== false) {\n  //       target = el;\n  //     }\n  //   } while (el = el.parent);\n  //   if (target) target.focus();\n  // });\n\n  // Autofocus elements with the appropriate option.\n  this.on('element click', function(el) {\n    if (el.clickable === true && el.options.autoFocus !== false) {\n      el.focus();\n    }\n  });\n};\n\nScreen.prototype.enableMouse = function(el) {\n  this._listenMouse(el);\n};\n\nScreen.prototype._listenKeys = function(el) {\n  var self = this;\n\n  if (el && !~this.keyable.indexOf(el)) {\n    el.keyable = true;\n    this.keyable.push(el);\n  }\n\n  if (this._listenedKeys) return;\n  this._listenedKeys = true;\n\n  // NOTE: The event emissions used to be reversed:\n  // element + screen\n  // They are now:\n  // screen + element\n  // After the first keypress emitted, the handler\n  // checks to make sure grabKeys, lockKeys, and focused\n  // weren't changed, and handles those situations appropriately.\n  this.program.on('keypress', function(ch, key) {\n    if (self.lockKeys && !~self.ignoreLocked.indexOf(key.full)) {\n      return;\n    }\n\n    var focused = self.focused\n      , grabKeys = self.grabKeys;\n\n    if (!grabKeys || ~self.ignoreLocked.indexOf(key.full)) {\n      self.emit('keypress', ch, key);\n      self.emit('key ' + key.full, ch, key);\n    }\n\n    // If something changed from the screen key handler, stop.\n    if (self.grabKeys !== grabKeys || self.lockKeys) {\n      return;\n    }\n\n    if (focused && focused.keyable) {\n      focused.emit('keypress', ch, key);\n      focused.emit('key ' + key.full, ch, key);\n    }\n  });\n};\n\nScreen.prototype.enableKeys = function(el) {\n  this._listenKeys(el);\n};\n\nScreen.prototype.enableInput = function(el) {\n  this._listenMouse(el);\n  this._listenKeys(el);\n};\n\nScreen.prototype._initHover = function() {\n  var self = this;\n\n  if (this._hoverText) {\n    return;\n  }\n\n  this._hoverText = new Box({\n    screen: this,\n    left: 0,\n    top: 0,\n    tags: false,\n    height: 'shrink',\n    width: 'shrink',\n    border: 'line',\n    style: {\n      border: {\n        fg: 'default'\n      },\n      bg: 'default',\n      fg: 'default'\n    }\n  });\n\n  this.on('mousemove', function(data) {\n    if (self._hoverText.detached) return;\n    self._hoverText.rleft = data.x + 1;\n    self._hoverText.rtop = data.y;\n    self.render();\n  });\n\n  this.on('element mouseover', function(el, data) {\n    if (!el._hoverOptions) return;\n    self._hoverText.parseTags = el.parseTags;\n    self._hoverText.setContent(el._hoverOptions.text);\n    self.append(self._hoverText);\n    self._hoverText.rleft = data.x + 1;\n    self._hoverText.rtop = data.y;\n    self.render();\n  });\n\n  this.on('element mouseout', function() {\n    if (self._hoverText.detached) return;\n    self._hoverText.detach();\n    self.render();\n  });\n\n  // XXX This can cause problems if the\n  // terminal does not support allMotion.\n  // Workaround: check to see if content is set.\n  this.on('element mouseup', function(el) {\n    if (!self._hoverText.getContent()) return;\n    if (!el._hoverOptions) return;\n    self.append(self._hoverText);\n    self.render();\n  });\n};\n\nScreen.prototype.__defineGetter__('cols', function() {\n  return this.program.cols;\n});\n\nScreen.prototype.__defineGetter__('rows', function() {\n  return this.program.rows;\n});\n\nScreen.prototype.__defineGetter__('width', function() {\n  return this.program.cols;\n});\n\nScreen.prototype.__defineGetter__('height', function() {\n  return this.program.rows;\n});\n\nScreen.prototype.alloc = function(dirty) {\n  var x, y;\n\n  this.lines = [];\n  for (y = 0; y < this.rows; y++) {\n    this.lines[y] = [];\n    for (x = 0; x < this.cols; x++) {\n      this.lines[y][x] = [this.dattr, ' '];\n    }\n    this.lines[y].dirty = !!dirty;\n  }\n\n  this.olines = [];\n  for (y = 0; y < this.rows; y++) {\n    this.olines[y] = [];\n    for (x = 0; x < this.cols; x++) {\n      this.olines[y][x] = [this.dattr, ' '];\n    }\n  }\n\n  this.program.clear();\n};\n\nScreen.prototype.realloc = function() {\n  return this.alloc(true);\n};\n\nScreen.prototype.render = function() {\n  var self = this;\n\n  if (this.destroyed) return;\n\n  this.emit('prerender');\n\n  this._borderStops = {};\n\n  // TODO: Possibly get rid of .dirty altogether.\n  // TODO: Could possibly drop .dirty and just clear the `lines` buffer every\n  // time before a screen.render. This way clearRegion doesn't have to be\n  // called in arbitrary places for the sake of clearing a spot where an\n  // element used to be (e.g. when an element moves or is hidden). There could\n  // be some overhead though.\n  // this.screen.clearRegion(0, this.cols, 0, this.rows);\n  this._ci = 0;\n  this.children.forEach(function(el) {\n    el.index = self._ci++;\n    //el._rendering = true;\n    el.render();\n    //el._rendering = false;\n  });\n  this._ci = -1;\n\n  if (this.screen.dockBorders) {\n    this._dockBorders();\n  }\n\n  this.draw(0, this.lines.length - 1);\n\n  // XXX Workaround to deal with cursor pos before the screen has rendered and\n  // lpos is not reliable (stale).\n  if (this.focused && this.focused._updateCursor) {\n    this.focused._updateCursor(true);\n  }\n\n  this.renders++;\n\n  this.emit('render');\n};\n\nScreen.prototype.blankLine = function(ch, dirty) {\n  var out = [];\n  for (var x = 0; x < this.cols; x++) {\n    out[x] = [this.dattr, ch || ' '];\n  }\n  out.dirty = dirty;\n  return out;\n};\n\nScreen.prototype.insertLine = function(n, y, top, bottom) {\n  // if (y === top) return this.insertLineNC(n, y, top, bottom);\n\n  if (!this.tput.strings.change_scroll_region\n      || !this.tput.strings.delete_line\n      || !this.tput.strings.insert_line) return;\n\n  this._buf += this.tput.csr(top, bottom);\n  this._buf += this.tput.cup(y, 0);\n  this._buf += this.tput.il(n);\n  this._buf += this.tput.csr(0, this.height - 1);\n\n  var j = bottom + 1;\n\n  while (n--) {\n    this.lines.splice(y, 0, this.blankLine());\n    this.lines.splice(j, 1);\n    this.olines.splice(y, 0, this.blankLine());\n    this.olines.splice(j, 1);\n  }\n};\n\nScreen.prototype.deleteLine = function(n, y, top, bottom) {\n  // if (y === top) return this.deleteLineNC(n, y, top, bottom);\n\n  if (!this.tput.strings.change_scroll_region\n      || !this.tput.strings.delete_line\n      || !this.tput.strings.insert_line) return;\n\n  this._buf += this.tput.csr(top, bottom);\n  this._buf += this.tput.cup(y, 0);\n  this._buf += this.tput.dl(n);\n  this._buf += this.tput.csr(0, this.height - 1);\n\n  var j = bottom + 1;\n\n  while (n--) {\n    this.lines.splice(j, 0, this.blankLine());\n    this.lines.splice(y, 1);\n    this.olines.splice(j, 0, this.blankLine());\n    this.olines.splice(y, 1);\n  }\n};\n\n// This is how ncurses does it.\n// Scroll down (up cursor-wise).\n// This will only work for top line deletion as opposed to arbitrary lines.\nScreen.prototype.insertLineNC = function(n, y, top, bottom) {\n  if (!this.tput.strings.change_scroll_region\n      || !this.tput.strings.delete_line) return;\n\n  this._buf += this.tput.csr(top, bottom);\n  this._buf += this.tput.cup(top, 0);\n  this._buf += this.tput.dl(n);\n  this._buf += this.tput.csr(0, this.height - 1);\n\n  var j = bottom + 1;\n\n  while (n--) {\n    this.lines.splice(j, 0, this.blankLine());\n    this.lines.splice(y, 1);\n    this.olines.splice(j, 0, this.blankLine());\n    this.olines.splice(y, 1);\n  }\n};\n\n// This is how ncurses does it.\n// Scroll up (down cursor-wise).\n// This will only work for bottom line deletion as opposed to arbitrary lines.\nScreen.prototype.deleteLineNC = function(n, y, top, bottom) {\n  if (!this.tput.strings.change_scroll_region\n      || !this.tput.strings.delete_line) return;\n\n  this._buf += this.tput.csr(top, bottom);\n  this._buf += this.tput.cup(bottom, 0);\n  this._buf += Array(n + 1).join('\\n');\n  this._buf += this.tput.csr(0, this.height - 1);\n\n  var j = bottom + 1;\n\n  while (n--) {\n    this.lines.splice(j, 0, this.blankLine());\n    this.lines.splice(y, 1);\n    this.olines.splice(j, 0, this.blankLine());\n    this.olines.splice(y, 1);\n  }\n};\n\nScreen.prototype.insertBottom = function(top, bottom) {\n  return this.deleteLine(1, top, top, bottom);\n};\n\nScreen.prototype.insertTop = function(top, bottom) {\n  return this.insertLine(1, top, top, bottom);\n};\n\nScreen.prototype.deleteBottom = function(top, bottom) {\n  return this.clearRegion(0, this.width, bottom, bottom);\n};\n\nScreen.prototype.deleteTop = function(top, bottom) {\n  // Same as: return this.insertBottom(top, bottom);\n  return this.deleteLine(1, top, top, bottom);\n};\n\n// Parse the sides of an element to determine\n// whether an element has uniform cells on\n// both sides. If it does, we can use CSR to\n// optimize scrolling on a scrollable element.\n// Not exactly sure how worthwile this is.\n// This will cause a performance/cpu-usage hit,\n// but will it be less or greater than the\n// performance hit of slow-rendering scrollable\n// boxes with clean sides?\nScreen.prototype.cleanSides = function(el) {\n  var pos = el.lpos;\n\n  if (!pos) {\n    return false;\n  }\n\n  if (pos._cleanSides != null) {\n    return pos._cleanSides;\n  }\n\n  if (pos.xi <= 0 && pos.xl >= this.width) {\n    return pos._cleanSides = true;\n  }\n\n  if (this.options.fastCSR) {\n    // Maybe just do this instead of parsing.\n    if (pos.yi < 0) return pos._cleanSides = false;\n    if (pos.yl > this.height) return pos._cleanSides = false;\n    if (this.width - (pos.xl - pos.xi) < 40) {\n      return pos._cleanSides = true;\n    }\n    return pos._cleanSides = false;\n  }\n\n  if (!this.options.smartCSR) {\n    return false;\n  }\n\n  // The scrollbar can't update properly, and there's also a\n  // chance that the scrollbar may get moved around senselessly.\n  // NOTE: In pratice, this doesn't seem to be the case.\n  // if (this.scrollbar) {\n  //   return pos._cleanSides = false;\n  // }\n\n  // Doesn't matter if we're only a height of 1.\n  // if ((pos.yl - el.ibottom) - (pos.yi + el.itop) <= 1) {\n  //   return pos._cleanSides = false;\n  // }\n\n  var yi = pos.yi + el.itop\n    , yl = pos.yl - el.ibottom\n    , first\n    , ch\n    , x\n    , y;\n\n  if (pos.yi < 0) return pos._cleanSides = false;\n  if (pos.yl > this.height) return pos._cleanSides = false;\n  if (pos.xi - 1 < 0) return pos._cleanSides = true;\n  if (pos.xl > this.width) return pos._cleanSides = true;\n\n  for (x = pos.xi - 1; x >= 0; x--) {\n    if (!this.olines[yi]) break;\n    first = this.olines[yi][x];\n    for (y = yi; y < yl; y++) {\n      if (!this.olines[y] || !this.olines[y][x]) break;\n      ch = this.olines[y][x];\n      if (ch[0] !== first[0] || ch[1] !== first[1]) {\n        return pos._cleanSides = false;\n      }\n    }\n  }\n\n  for (x = pos.xl; x < this.width; x++) {\n    if (!this.olines[yi]) break;\n    first = this.olines[yi][x];\n    for (y = yi; y < yl; y++) {\n      if (!this.olines[y] || !this.olines[y][x]) break;\n      ch = this.olines[y][x];\n      if (ch[0] !== first[0] || ch[1] !== first[1]) {\n        return pos._cleanSides = false;\n      }\n    }\n  }\n\n  return pos._cleanSides = true;\n};\n\nScreen.prototype._dockBorders = function() {\n  var lines = this.lines\n    , stops = this._borderStops\n    , i\n    , y\n    , x\n    , ch;\n\n  // var keys, stop;\n  //\n  // keys = Object.keys(this._borderStops)\n  //   .map(function(k) { return +k; })\n  //   .sort(function(a, b) { return a - b; });\n  //\n  // for (i = 0; i < keys.length; i++) {\n  //   y = keys[i];\n  //   if (!lines[y]) continue;\n  //   stop = this._borderStops[y];\n  //   for (x = stop.xi; x < stop.xl; x++) {\n\n  stops = Object.keys(stops)\n    .map(function(k) { return +k; })\n    .sort(function(a, b) { return a - b; });\n\n  for (i = 0; i < stops.length; i++) {\n    y = stops[i];\n    if (!lines[y]) continue;\n    for (x = 0; x < this.width; x++) {\n      ch = lines[y][x][1];\n      if (angles[ch]) {\n        lines[y][x][1] = this._getAngle(lines, x, y);\n        lines[y].dirty = true;\n      }\n    }\n  }\n};\n\nScreen.prototype._getAngle = function(lines, x, y) {\n  var angle = 0\n    , attr = lines[y][x][0]\n    , ch = lines[y][x][1];\n\n  if (lines[y][x - 1] && langles[lines[y][x - 1][1]]) {\n    if (!this.options.ignoreDockContrast) {\n      if (lines[y][x - 1][0] !== attr) return ch;\n    }\n    angle |= 1 << 3;\n  }\n\n  if (lines[y - 1] && uangles[lines[y - 1][x][1]]) {\n    if (!this.options.ignoreDockContrast) {\n      if (lines[y - 1][x][0] !== attr) return ch;\n    }\n    angle |= 1 << 2;\n  }\n\n  if (lines[y][x + 1] && rangles[lines[y][x + 1][1]]) {\n    if (!this.options.ignoreDockContrast) {\n      if (lines[y][x + 1][0] !== attr) return ch;\n    }\n    angle |= 1 << 1;\n  }\n\n  if (lines[y + 1] && dangles[lines[y + 1][x][1]]) {\n    if (!this.options.ignoreDockContrast) {\n      if (lines[y + 1][x][0] !== attr) return ch;\n    }\n    angle |= 1 << 0;\n  }\n\n  // Experimental: fixes this situation:\n  // +----------+\n  //            | <-- empty space here, should be a T angle\n  // +-------+  |\n  // |       |  |\n  // +-------+  |\n  // |          |\n  // +----------+\n  // if (uangles[lines[y][x][1]]) {\n  //   if (lines[y + 1] && cdangles[lines[y + 1][x][1]]) {\n  //     if (!this.options.ignoreDockContrast) {\n  //       if (lines[y + 1][x][0] !== attr) return ch;\n  //     }\n  //     angle |= 1 << 0;\n  //   }\n  // }\n\n  return angleTable[angle] || ch;\n};\n\nScreen.prototype.draw = function(start, end) {\n  // this.emit('predraw');\n\n  var x\n    , y\n    , line\n    , out\n    , ch\n    , data\n    , attr\n    , fg\n    , bg\n    , flags;\n\n  var main = ''\n    , pre\n    , post;\n\n  var clr\n    , neq\n    , xx;\n\n  var lx = -1\n    , ly = -1\n    , o;\n\n  var acs;\n\n  if (this._buf) {\n    main += this._buf;\n    this._buf = '';\n  }\n\n  for (y = start; y <= end; y++) {\n    line = this.lines[y];\n    o = this.olines[y];\n\n    if (!line.dirty && !(this.cursor.artificial && y === this.program.y)) {\n      continue;\n    }\n    line.dirty = false;\n\n    out = '';\n    attr = this.dattr;\n\n    for (x = 0; x < line.length; x++) {\n      data = line[x][0];\n      ch = line[x][1];\n\n      // Render the artificial cursor.\n      if (this.cursor.artificial\n          && !this.cursor._hidden\n          && this.cursor._state\n          && x === this.program.x\n          && y === this.program.y) {\n        var cattr = this._cursorAttr(this.cursor, data);\n        if (cattr.ch) ch = cattr.ch;\n        data = cattr.attr;\n      }\n\n      // Take advantage of xterm's back_color_erase feature by using a\n      // lookahead. Stop spitting out so many damn spaces. NOTE: Is checking\n      // the bg for non BCE terminals worth the overhead?\n      if (this.options.useBCE\n          && ch === ' '\n          && (this.tput.bools.back_color_erase\n          || (data & 0x1ff) === (this.dattr & 0x1ff))\n          && ((data >> 18) & 8) === ((this.dattr >> 18) & 8)) {\n        clr = true;\n        neq = false;\n\n        for (xx = x; xx < line.length; xx++) {\n          if (line[xx][0] !== data || line[xx][1] !== ' ') {\n            clr = false;\n            break;\n          }\n          if (line[xx][0] !== o[xx][0] || line[xx][1] !== o[xx][1]) {\n            neq = true;\n          }\n        }\n\n        if (clr && neq) {\n          lx = -1, ly = -1;\n          if (data !== attr) {\n            out += this.codeAttr(data);\n            attr = data;\n          }\n          out += this.tput.cup(y, x);\n          out += this.tput.el();\n          for (xx = x; xx < line.length; xx++) {\n            o[xx][0] = data;\n            o[xx][1] = ' ';\n          }\n          break;\n        }\n\n        // If there's more than 10 spaces, use EL regardless\n        // and start over drawing the rest of line. Might\n        // not be worth it. Try to use ECH if the terminal\n        // supports it. Maybe only try to use ECH here.\n        // //if (this.tput.strings.erase_chars)\n        // if (!clr && neq && (xx - x) > 10) {\n        //   lx = -1, ly = -1;\n        //   if (data !== attr) {\n        //     out += this.codeAttr(data);\n        //     attr = data;\n        //   }\n        //   out += this.tput.cup(y, x);\n        //   if (this.tput.strings.erase_chars) {\n        //     // Use erase_chars to avoid erasing the whole line.\n        //     out += this.tput.ech(xx - x);\n        //   } else {\n        //     out += this.tput.el();\n        //   }\n        //   if (this.tput.strings.parm_right_cursor) {\n        //     out += this.tput.cuf(xx - x);\n        //   } else {\n        //     out += this.tput.cup(y, xx);\n        //   }\n        //   this.fillRegion(data, ' ',\n        //     x, this.tput.strings.erase_chars ? xx : line.length,\n        //     y, y + 1);\n        //   x = xx - 1;\n        //   continue;\n        // }\n\n        // Skip to the next line if the\n        // rest of the line is already drawn.\n        // if (!neq) {\n        //   for (; xx < line.length; xx++) {\n        //     if (line[xx][0] !== o[xx][0] || line[xx][1] !== o[xx][1]) {\n        //       neq = true;\n        //       break;\n        //     }\n        //   }\n        //   if (!neq) {\n        //     attr = data;\n        //     break;\n        //   }\n        // }\n      }\n\n      // Optimize by comparing the real output\n      // buffer to the pending output buffer.\n      if (data === o[x][0] && ch === o[x][1]) {\n        if (lx === -1) {\n          lx = x;\n          ly = y;\n        }\n        continue;\n      } else if (lx !== -1) {\n        if (this.tput.strings.parm_right_cursor) {\n          out += y === ly\n            ? this.tput.cuf(x - lx)\n            : this.tput.cup(y, x);\n        } else {\n          out += this.tput.cup(y, x);\n        }\n        lx = -1, ly = -1;\n      }\n      o[x][0] = data;\n      o[x][1] = ch;\n\n      if (data !== attr) {\n        if (attr !== this.dattr) {\n          out += '\\x1b[m';\n        }\n        if (data !== this.dattr) {\n          out += '\\x1b[';\n\n          bg = data & 0x1ff;\n          fg = (data >> 9) & 0x1ff;\n          flags = data >> 18;\n\n          // bold\n          if (flags & 1) {\n            out += '1;';\n          }\n\n          // underline\n          if (flags & 2) {\n            out += '4;';\n          }\n\n          // blink\n          if (flags & 4) {\n            out += '5;';\n          }\n\n          // inverse\n          if (flags & 8) {\n            out += '7;';\n          }\n\n          // invisible\n          if (flags & 16) {\n            out += '8;';\n          }\n\n          if (bg !== 0x1ff) {\n            bg = this._reduceColor(bg);\n            if (bg < 16) {\n              if (bg < 8) {\n                bg += 40;\n              } else if (bg < 16) {\n                bg -= 8;\n                bg += 100;\n              }\n              out += bg + ';';\n            } else {\n              out += '48;5;' + bg + ';';\n            }\n          }\n\n          if (fg !== 0x1ff) {\n            fg = this._reduceColor(fg);\n            if (fg < 16) {\n              if (fg < 8) {\n                fg += 30;\n              } else if (fg < 16) {\n                fg -= 8;\n                fg += 90;\n              }\n              out += fg + ';';\n            } else {\n              out += '38;5;' + fg + ';';\n            }\n          }\n\n          if (out[out.length - 1] === ';') out = out.slice(0, -1);\n\n          out += 'm';\n        }\n      }\n\n      // If we find a double-width char, eat the next character which should be\n      // a space due to parseContent's behavior.\n      if (this.fullUnicode) {\n        // If this is a surrogate pair double-width char, we can ignore it\n        // because parseContent already counted it as length=2.\n        if (unicode.charWidth(line[x][1]) === 2) {\n          // NOTE: At cols=44, the bug that is avoided\n          // by the angles check occurs in widget-unicode:\n          // Might also need: `line[x + 1][0] !== line[x][0]`\n          // for borderless boxes?\n          if (x === line.length - 1 || angles[line[x + 1][1]]) {\n            // If we're at the end, we don't have enough space for a\n            // double-width. Overwrite it with a space and ignore.\n            ch = ' ';\n            o[x][1] = '\\0';\n          } else {\n            // ALWAYS refresh double-width chars because this special cursor\n            // behavior is needed. There may be a more efficient way of doing\n            // this. See above.\n            o[x][1] = '\\0';\n            // Eat the next character by moving forward and marking as a\n            // space (which it is).\n            o[++x][1] = '\\0';\n          }\n        }\n      }\n\n      // Attempt to use ACS for supported characters.\n      // This is not ideal, but it's how ncurses works.\n      // There are a lot of terminals that support ACS\n      // *and UTF8, but do not declare U8. So ACS ends\n      // up being used (slower than utf8). Terminals\n      // that do not support ACS and do not explicitly\n      // support UTF8 get their unicode characters\n      // replaced with really ugly ascii characters.\n      // It is possible there is a terminal out there\n      // somewhere that does not support ACS, but\n      // supports UTF8, but I imagine it's unlikely.\n      // Maybe remove !this.tput.unicode check, however,\n      // this seems to be the way ncurses does it.\n      if (this.tput.strings.enter_alt_charset_mode\n          && !this.tput.brokenACS && (this.tput.acscr[ch] || acs)) {\n        // Fun fact: even if this.tput.brokenACS wasn't checked here,\n        // the linux console would still work fine because the acs\n        // table would fail the check of: this.tput.acscr[ch]\n        if (this.tput.acscr[ch]) {\n          if (acs) {\n            ch = this.tput.acscr[ch];\n          } else {\n            ch = this.tput.smacs()\n              + this.tput.acscr[ch];\n            acs = true;\n          }\n        } else if (acs) {\n          ch = this.tput.rmacs() + ch;\n          acs = false;\n        }\n      } else {\n        // U8 is not consistently correct. Some terminfo's\n        // terminals that do not declare it may actually\n        // support utf8 (e.g. urxvt), but if the terminal\n        // does not declare support for ACS (and U8), chances\n        // are it does not support UTF8. This is probably\n        // the \"safest\" way to do this. Should fix things\n        // like sun-color.\n        // NOTE: It could be the case that the $LANG\n        // is all that matters in some cases:\n        // if (!this.tput.unicode && ch > '~') {\n        if (!this.tput.unicode && this.tput.numbers.U8 !== 1 && ch > '~') {\n          ch = this.tput.utoa[ch] || '?';\n        }\n      }\n\n      out += ch;\n      attr = data;\n    }\n\n    if (attr !== this.dattr) {\n      out += '\\x1b[m';\n    }\n\n    if (out) {\n      main += this.tput.cup(y, 0) + out;\n    }\n  }\n\n  if (acs) {\n    main += this.tput.rmacs();\n    acs = false;\n  }\n\n  if (main) {\n    pre = '';\n    post = '';\n\n    pre += this.tput.sc();\n    post += this.tput.rc();\n\n    if (!this.program.cursorHidden) {\n      pre += this.tput.civis();\n      post += this.tput.cnorm();\n    }\n\n    // this.program.flush();\n    // this.program._owrite(pre + main + post);\n    this.program._write(pre + main + post);\n  }\n\n  // this.emit('draw');\n};\n\nScreen.prototype._reduceColor = function(color) {\n  return colors.reduce(color, this.tput.colors);\n};\n\n// Convert an SGR string to our own attribute format.\nScreen.prototype.attrCode = function(code, cur, def) {\n  var flags = (cur >> 18) & 0x1ff\n    , fg = (cur >> 9) & 0x1ff\n    , bg = cur & 0x1ff\n    , c\n    , i;\n\n  code = code.slice(2, -1).split(';');\n  if (!code[0]) code[0] = '0';\n\n  for (i = 0; i < code.length; i++) {\n    c = +code[i] || 0;\n    switch (c) {\n      case 0: // normal\n        bg = def & 0x1ff;\n        fg = (def >> 9) & 0x1ff;\n        flags = (def >> 18) & 0x1ff;\n        break;\n      case 1: // bold\n        flags |= 1;\n        break;\n      case 22:\n        flags = (def >> 18) & 0x1ff;\n        break;\n      case 4: // underline\n        flags |= 2;\n        break;\n      case 24:\n        flags = (def >> 18) & 0x1ff;\n        break;\n      case 5: // blink\n        flags |= 4;\n        break;\n      case 25:\n        flags = (def >> 18) & 0x1ff;\n        break;\n      case 7: // inverse\n        flags |= 8;\n        break;\n      case 27:\n        flags = (def >> 18) & 0x1ff;\n        break;\n      case 8: // invisible\n        flags |= 16;\n        break;\n      case 28:\n        flags = (def >> 18) & 0x1ff;\n        break;\n      case 39: // default fg\n        fg = (def >> 9) & 0x1ff;\n        break;\n      case 49: // default bg\n        bg = def & 0x1ff;\n        break;\n      case 100: // default fg/bg\n        fg = (def >> 9) & 0x1ff;\n        bg = def & 0x1ff;\n        break;\n      default: // color\n        if (c === 48 && +code[i+1] === 5) {\n          i += 2;\n          bg = +code[i];\n          break;\n        } else if (c === 48 && +code[i+1] === 2) {\n          i += 2;\n          bg = colors.match(+code[i], +code[i+1], +code[i+2]);\n          if (bg === -1) bg = def & 0x1ff;\n          i += 2;\n          break;\n        } else if (c === 38 && +code[i+1] === 5) {\n          i += 2;\n          fg = +code[i];\n          break;\n        } else if (c === 38 && +code[i+1] === 2) {\n          i += 2;\n          fg = colors.match(+code[i], +code[i+1], +code[i+2]);\n          if (fg === -1) fg = (def >> 9) & 0x1ff;\n          i += 2;\n          break;\n        }\n        if (c >= 40 && c <= 47) {\n          bg = c - 40;\n        } else if (c >= 100 && c <= 107) {\n          bg = c - 100;\n          bg += 8;\n        } else if (c === 49) {\n          bg = def & 0x1ff;\n        } else if (c >= 30 && c <= 37) {\n          fg = c - 30;\n        } else if (c >= 90 && c <= 97) {\n          fg = c - 90;\n          fg += 8;\n        } else if (c === 39) {\n          fg = (def >> 9) & 0x1ff;\n        } else if (c === 100) {\n          fg = (def >> 9) & 0x1ff;\n          bg = def & 0x1ff;\n        }\n        break;\n    }\n  }\n\n  return (flags << 18) | (fg << 9) | bg;\n};\n\n// Convert our own attribute format to an SGR string.\nScreen.prototype.codeAttr = function(code) {\n  var flags = (code >> 18) & 0x1ff\n    , fg = (code >> 9) & 0x1ff\n    , bg = code & 0x1ff\n    , out = '';\n\n  // bold\n  if (flags & 1) {\n    out += '1;';\n  }\n\n  // underline\n  if (flags & 2) {\n    out += '4;';\n  }\n\n  // blink\n  if (flags & 4) {\n    out += '5;';\n  }\n\n  // inverse\n  if (flags & 8) {\n    out += '7;';\n  }\n\n  // invisible\n  if (flags & 16) {\n    out += '8;';\n  }\n\n  if (bg !== 0x1ff) {\n    bg = this._reduceColor(bg);\n    if (bg < 16) {\n      if (bg < 8) {\n        bg += 40;\n      } else if (bg < 16) {\n        bg -= 8;\n        bg += 100;\n      }\n      out += bg + ';';\n    } else {\n      out += '48;5;' + bg + ';';\n    }\n  }\n\n  if (fg !== 0x1ff) {\n    fg = this._reduceColor(fg);\n    if (fg < 16) {\n      if (fg < 8) {\n        fg += 30;\n      } else if (fg < 16) {\n        fg -= 8;\n        fg += 90;\n      }\n      out += fg + ';';\n    } else {\n      out += '38;5;' + fg + ';';\n    }\n  }\n\n  if (out[out.length - 1] === ';') out = out.slice(0, -1);\n\n  return '\\x1b[' + out + 'm';\n};\n\nScreen.prototype.focusOffset = function(offset) {\n  var shown = this.keyable.filter(function(el) {\n    return !el.detached && el.visible;\n  }).length;\n\n  if (!shown || !offset) {\n    return;\n  }\n\n  var i = this.keyable.indexOf(this.focused);\n  if (!~i) return;\n\n  if (offset > 0) {\n    while (offset--) {\n      if (++i > this.keyable.length - 1) i = 0;\n      if (this.keyable[i].detached || !this.keyable[i].visible) offset++;\n    }\n  } else {\n    offset = -offset;\n    while (offset--) {\n      if (--i < 0) i = this.keyable.length - 1;\n      if (this.keyable[i].detached || !this.keyable[i].visible) offset++;\n    }\n  }\n\n  return this.keyable[i].focus();\n};\n\nScreen.prototype.focusPrev =\nScreen.prototype.focusPrevious = function() {\n  return this.focusOffset(-1);\n};\n\nScreen.prototype.focusNext = function() {\n  return this.focusOffset(1);\n};\n\nScreen.prototype.focusPush = function(el) {\n  if (!el) return;\n  var old = this.history[this.history.length - 1];\n  if (this.history.length === 10) {\n    this.history.shift();\n  }\n  this.history.push(el);\n  this._focus(el, old);\n};\n\nScreen.prototype.focusPop = function() {\n  var old = this.history.pop();\n  if (this.history.length) {\n    this._focus(this.history[this.history.length - 1], old);\n  }\n  return old;\n};\n\nScreen.prototype.saveFocus = function() {\n  return this._savedFocus = this.focused;\n};\n\nScreen.prototype.restoreFocus = function() {\n  if (!this._savedFocus) return;\n  this._savedFocus.focus();\n  delete this._savedFocus;\n  return this.focused;\n};\n\nScreen.prototype.rewindFocus = function() {\n  var old = this.history.pop()\n    , el;\n\n  while (this.history.length) {\n    el = this.history.pop();\n    if (!el.detached && el.visible) {\n      this.history.push(el);\n      this._focus(el, old);\n      return el;\n    }\n  }\n\n  if (old) {\n    old.emit('blur');\n  }\n};\n\nScreen.prototype._focus = function(self, old) {\n  // Find a scrollable ancestor if we have one.\n  var el = self;\n  while (el = el.parent) {\n    if (el.scrollable) break;\n  }\n\n  // If we're in a scrollable element,\n  // automatically scroll to the focused element.\n  if (el && !el.detached) {\n    // NOTE: This is different from the other \"visible\" values - it needs the\n    // visible height of the scrolling element itself, not the element within\n    // it.\n    var visible = self.screen.height - el.atop - el.itop - el.abottom - el.ibottom;\n    if (self.rtop < el.childBase) {\n      el.scrollTo(self.rtop);\n      self.screen.render();\n    } else if (self.rtop + self.height - self.ibottom > el.childBase + visible) {\n      // Explanation for el.itop here: takes into account scrollable elements\n      // with borders otherwise the element gets covered by the bottom border:\n      el.scrollTo(self.rtop - (el.height - self.height) + el.itop, true);\n      self.screen.render();\n    }\n  }\n\n  if (old) {\n    old.emit('blur', self);\n  }\n\n  self.emit('focus', old);\n};\n\nScreen.prototype.__defineGetter__('focused', function() {\n  return this.history[this.history.length - 1];\n});\n\nScreen.prototype.__defineSetter__('focused', function(el) {\n  return this.focusPush(el);\n});\n\nScreen.prototype.clearRegion = function(xi, xl, yi, yl, override) {\n  return this.fillRegion(this.dattr, ' ', xi, xl, yi, yl, override);\n};\n\nScreen.prototype.fillRegion = function(attr, ch, xi, xl, yi, yl, override) {\n  var lines = this.lines\n    , cell\n    , xx;\n\n  if (xi < 0) xi = 0;\n  if (yi < 0) yi = 0;\n\n  for (; yi < yl; yi++) {\n    if (!lines[yi]) break;\n    for (xx = xi; xx < xl; xx++) {\n      cell = lines[yi][xx];\n      if (!cell) break;\n      if (override || attr !== cell[0] || ch !== cell[1]) {\n        lines[yi][xx][0] = attr;\n        lines[yi][xx][1] = ch;\n        lines[yi].dirty = true;\n      }\n    }\n  }\n};\n\nScreen.prototype.key = function() {\n  return this.program.key.apply(this, arguments);\n};\n\nScreen.prototype.onceKey = function() {\n  return this.program.onceKey.apply(this, arguments);\n};\n\nScreen.prototype.unkey =\nScreen.prototype.removeKey = function() {\n  return this.program.unkey.apply(this, arguments);\n};\n\nScreen.prototype.spawn = function(file, args, options) {\n  if (!Array.isArray(args)) {\n    options = args;\n    args = [];\n  }\n\n  var screen = this\n    , program = screen.program\n    , spawn = require('child_process').spawn\n    , mouse = program.mouseEnabled\n    , ps;\n\n  options = options || {};\n\n  options.stdio = options.stdio || 'inherit';\n\n  program.lsaveCursor('spawn');\n  // program.csr(0, program.rows - 1);\n  program.normalBuffer();\n  program.showCursor();\n  if (mouse) program.disableMouse();\n\n  var write = program.output.write;\n  program.output.write = function() {};\n  program.input.pause();\n  if (program.input.setRawMode) {\n    program.input.setRawMode(false);\n  }\n\n  var resume = function() {\n    if (resume.done) return;\n    resume.done = true;\n\n    if (program.input.setRawMode) {\n      program.input.setRawMode(true);\n    }\n    program.input.resume();\n    program.output.write = write;\n\n    program.alternateBuffer();\n    // program.csr(0, program.rows - 1);\n    if (mouse) {\n      program.enableMouse();\n      if (screen.options.sendFocus) {\n        screen.program.setMouse({ sendFocus: true }, true);\n      }\n    }\n\n    screen.alloc();\n    screen.render();\n\n    screen.program.lrestoreCursor('spawn', true);\n  };\n\n  ps = spawn(file, args, options);\n\n  ps.on('error', resume);\n\n  ps.on('exit', resume);\n\n  return ps;\n};\n\nScreen.prototype.exec = function(file, args, options, callback) {\n  var ps = this.spawn(file, args, options);\n\n  ps.on('error', function(err) {\n    if (!callback) return;\n    return callback(err, false);\n  });\n\n  ps.on('exit', function(code) {\n    if (!callback) return;\n    return callback(null, code === 0);\n  });\n\n  return ps;\n};\n\nScreen.prototype.readEditor = function(options, callback) {\n  if (typeof options === 'string') {\n    options = { editor: options };\n  }\n\n  if (!callback) {\n    callback = options;\n    options = null;\n  }\n\n  if (!callback) {\n    callback = function() {};\n  }\n\n  options = options || {};\n\n  var self = this\n    , editor = options.editor || process.env.EDITOR || 'vi'\n    , name = options.name || process.title || 'blessed'\n    , rnd = Math.random().toString(36).split('.').pop()\n    , file = '/tmp/' + name + '.' + rnd\n    , args = [file]\n    , opt;\n\n  opt = {\n    stdio: 'inherit',\n    env: process.env,\n    cwd: process.env.HOME\n  };\n\n  function writeFile(callback) {\n    if (!options.value) return callback();\n    return fs.writeFile(file, options.value, callback);\n  }\n\n  return writeFile(function(err) {\n    if (err) return callback(err);\n    return self.exec(editor, args, opt, function(err, success) {\n      if (err) return callback(err);\n      return fs.readFile(file, 'utf8', function(err, data) {\n        return fs.unlink(file, function() {\n          if (!success) return callback(new Error('Unsuccessful.'));\n          if (err) return callback(err);\n          return callback(null, data);\n        });\n      });\n    });\n  });\n};\n\nScreen.prototype.displayImage = function(file, callback) {\n  if (!file) {\n    if (!callback) return;\n    return callback(new Error('No image.'));\n  }\n\n  file = path.resolve(process.cwd(), file);\n\n  if (!~file.indexOf('://')) {\n    file = 'file://' + file;\n  }\n\n  var args = ['w3m', '-T', 'text/html'];\n\n  var input = '<title>press q to exit</title>'\n    + '<img align=\"center\" src=\"' + file + '\">';\n\n  var opt = {\n    stdio: ['pipe', 1, 2],\n    env: process.env,\n    cwd: process.env.HOME\n  };\n\n  var ps = this.spawn(args[0], args.slice(1), opt);\n\n  ps.on('error', function(err) {\n    if (!callback) return;\n    return callback(err);\n  });\n\n  ps.on('exit', function(code) {\n    if (!callback) return;\n    if (code !== 0) return callback(new Error('Exit Code: ' + code));\n    return callback(null, code === 0);\n  });\n\n  ps.stdin.write(input + '\\n');\n  ps.stdin.end();\n};\n\nScreen.prototype.setEffects = function(el, fel, over, out, effects, temp) {\n  if (!effects) return;\n\n  var tmp = {};\n  if (temp) el[temp] = tmp;\n\n  if (typeof el !== 'function') {\n    var _el = el;\n    el = function() { return _el; };\n  }\n\n  fel.on(over, function() {\n    var element = el();\n    Object.keys(effects).forEach(function(key) {\n      var val = effects[key];\n      if (val !== null && typeof val === 'object') {\n        tmp[key] = tmp[key] || {};\n        // element.style[key] = element.style[key] || {};\n        Object.keys(val).forEach(function(k) {\n          var v = val[k];\n          tmp[key][k] = element.style[key][k];\n          element.style[key][k] = v;\n        });\n        return;\n      }\n      tmp[key] = element.style[key];\n      element.style[key] = val;\n    });\n    element.screen.render();\n  });\n\n  fel.on(out, function() {\n    var element = el();\n    Object.keys(effects).forEach(function(key) {\n      var val = effects[key];\n      if (val !== null && typeof val === 'object') {\n        tmp[key] = tmp[key] || {};\n        // element.style[key] = element.style[key] || {};\n        Object.keys(val).forEach(function(k) {\n          if (tmp[key].hasOwnProperty(k)) {\n            element.style[key][k] = tmp[key][k];\n          }\n        });\n        return;\n      }\n      if (tmp.hasOwnProperty(key)) {\n        element.style[key] = tmp[key];\n      }\n    });\n    element.screen.render();\n  });\n};\n\nScreen.prototype.sigtstp = function(callback) {\n  var self = this;\n  this.program.sigtstp(function() {\n    self.alloc();\n    self.render();\n    self.program.lrestoreCursor('pause', true);\n    if (callback) callback();\n  });\n};\n\nScreen.prototype.copyToClipboard = function(text) {\n  return this.program.copyToClipboard(text);\n};\n\nScreen.prototype.cursorShape = function(shape, blink) {\n  var self = this;\n\n  this.cursor.shape = shape || 'block';\n  this.cursor.blink = blink || false;\n  this.cursor._set = true;\n\n  if (this.cursor.artificial) {\n    if (!this.program.hideCursor_old) {\n      var hideCursor = this.program.hideCursor;\n      this.program.hideCursor_old = this.program.hideCursor;\n      this.program.hideCursor = function() {\n        hideCursor.call(self.program);\n        self.cursor._hidden = true;\n        if (self.renders) self.render();\n      };\n    }\n    if (!this.program.showCursor_old) {\n      var showCursor = this.program.showCursor;\n      this.program.showCursor_old = this.program.showCursor;\n      this.program.showCursor = function() {\n        self.cursor._hidden = false;\n        if (self.program._exiting) showCursor.call(self.program);\n        if (self.renders) self.render();\n      };\n    }\n    if (!this._cursorBlink) {\n      this._cursorBlink = setInterval(function() {\n        if (!self.cursor.blink) return;\n        self.cursor._state ^= 1;\n        if (self.renders) self.render();\n      }, 500);\n      if (this._cursorBlink.unref) {\n        this._cursorBlink.unref();\n      }\n    }\n    return true;\n  }\n\n  return this.program.cursorShape(this.cursor.shape, this.cursor.blink);\n};\n\nScreen.prototype.cursorColor = function(color) {\n  this.cursor.color = color != null\n    ? colors.convert(color)\n    : null;\n  this.cursor._set = true;\n\n  if (this.cursor.artificial) {\n    return true;\n  }\n\n  return this.program.cursorColor(colors.ncolors[this.cursor.color]);\n};\n\nScreen.prototype.cursorReset =\nScreen.prototype.resetCursor = function() {\n  this.cursor.shape = 'block';\n  this.cursor.blink = false;\n  this.cursor.color = null;\n  this.cursor._set = false;\n\n  if (this.cursor.artificial) {\n    this.cursor.artificial = false;\n    if (this.program.hideCursor_old) {\n      this.program.hideCursor = this.program.hideCursor_old;\n      delete this.program.hideCursor_old;\n    }\n    if (this.program.showCursor_old) {\n      this.program.showCursor = this.program.showCursor_old;\n      delete this.program.showCursor_old;\n    }\n    if (this._cursorBlink) {\n      clearInterval(this._cursorBlink);\n      delete this._cursorBlink;\n    }\n    return true;\n  }\n\n  return this.program.cursorReset();\n};\n\nScreen.prototype._cursorAttr = function(cursor, dattr) {\n  var attr = dattr || this.dattr\n    , cattr\n    , ch;\n\n  if (cursor.shape === 'line') {\n    attr &= ~(0x1ff << 9);\n    attr |= 7 << 9;\n    ch = '\\u2502';\n  } else if (cursor.shape === 'underline') {\n    attr &= ~(0x1ff << 9);\n    attr |= 7 << 9;\n    attr |= 2 << 18;\n  } else if (cursor.shape === 'block') {\n    attr &= ~(0x1ff << 9);\n    attr |= 7 << 9;\n    attr |= 8 << 18;\n  } else if (typeof cursor.shape === 'object' && cursor.shape) {\n    cattr = Element.prototype.sattr.call(cursor, cursor.shape);\n\n    if (cursor.shape.bold || cursor.shape.underline\n        || cursor.shape.blink || cursor.shape.inverse\n        || cursor.shape.invisible) {\n      attr &= ~(0x1ff << 18);\n      attr |= ((cattr >> 18) & 0x1ff) << 18;\n    }\n\n    if (cursor.shape.fg) {\n      attr &= ~(0x1ff << 9);\n      attr |= ((cattr >> 9) & 0x1ff) << 9;\n    }\n\n    if (cursor.shape.bg) {\n      attr &= ~(0x1ff << 0);\n      attr |= cattr & 0x1ff;\n    }\n\n    if (cursor.shape.ch) {\n      ch = cursor.shape.ch;\n    }\n  }\n\n  if (cursor.color != null) {\n    attr &= ~(0x1ff << 9);\n    attr |= cursor.color << 9;\n  }\n\n  return {\n    ch: ch,\n    attr: attr\n  };\n};\n\nScreen.prototype.screenshot = function(xi, xl, yi, yl, term) {\n  if (xi == null) xi = 0;\n  if (xl == null) xl = this.cols;\n  if (yi == null) yi = 0;\n  if (yl == null) yl = this.rows;\n\n  if (xi < 0) xi = 0;\n  if (yi < 0) yi = 0;\n\n  var x\n    , y\n    , line\n    , out\n    , ch\n    , data\n    , attr;\n\n  var sdattr = this.dattr;\n\n  if (term) {\n    this.dattr = term.defAttr;\n  }\n\n  var main = '';\n\n  for (y = yi; y < yl; y++) {\n    line = term\n      ? term.lines[y]\n      : this.lines[y];\n\n    if (!line) break;\n\n    out = '';\n    attr = this.dattr;\n\n    for (x = xi; x < xl; x++) {\n      if (!line[x]) break;\n\n      data = line[x][0];\n      ch = line[x][1];\n\n      if (data !== attr) {\n        if (attr !== this.dattr) {\n          out += '\\x1b[m';\n        }\n        if (data !== this.dattr) {\n          var _data = data;\n          if (term) {\n            if (((_data >> 9) & 0x1ff) === 257) _data |= 0x1ff << 9;\n            if ((_data & 0x1ff) === 256) _data |= 0x1ff;\n          }\n          out += this.codeAttr(_data);\n        }\n      }\n\n      if (this.fullUnicode) {\n        if (unicode.charWidth(line[x][1]) === 2) {\n          if (x === xl - 1) {\n            ch = ' ';\n          } else {\n            x++;\n          }\n        }\n      }\n\n      out += ch;\n      attr = data;\n    }\n\n    if (attr !== this.dattr) {\n      out += '\\x1b[m';\n    }\n\n    if (out) {\n      main += (y > 0 ? '\\n' : '') + out;\n    }\n  }\n\n  main = main.replace(/(?:\\s*\\x1b\\[40m\\s*\\x1b\\[m\\s*)*$/, '') + '\\n';\n\n  if (term) {\n    this.dattr = sdattr;\n  }\n\n  return main;\n};\n\n/**\n * Positioning\n */\n\nScreen.prototype._getPos = function() {\n  return this;\n};\n\n/**\n * Angle Table\n */\n\nvar angles = {\n  '\\u2518': true, // '┘'\n  '\\u2510': true, // '┐'\n  '\\u250c': true, // '┌'\n  '\\u2514': true, // '└'\n  '\\u253c': true, // '┼'\n  '\\u251c': true, // '├'\n  '\\u2524': true, // '┤'\n  '\\u2534': true, // '┴'\n  '\\u252c': true, // '┬'\n  '\\u2502': true, // '│'\n  '\\u2500': true  // '─'\n};\n\nvar langles = {\n  '\\u250c': true, // '┌'\n  '\\u2514': true, // '└'\n  '\\u253c': true, // '┼'\n  '\\u251c': true, // '├'\n  '\\u2534': true, // '┴'\n  '\\u252c': true, // '┬'\n  '\\u2500': true  // '─'\n};\n\nvar uangles = {\n  '\\u2510': true, // '┐'\n  '\\u250c': true, // '┌'\n  '\\u253c': true, // '┼'\n  '\\u251c': true, // '├'\n  '\\u2524': true, // '┤'\n  '\\u252c': true, // '┬'\n  '\\u2502': true  // '│'\n};\n\nvar rangles = {\n  '\\u2518': true, // '┘'\n  '\\u2510': true, // '┐'\n  '\\u253c': true, // '┼'\n  '\\u2524': true, // '┤'\n  '\\u2534': true, // '┴'\n  '\\u252c': true, // '┬'\n  '\\u2500': true  // '─'\n};\n\nvar dangles = {\n  '\\u2518': true, // '┘'\n  '\\u2514': true, // '└'\n  '\\u253c': true, // '┼'\n  '\\u251c': true, // '├'\n  '\\u2524': true, // '┤'\n  '\\u2534': true, // '┴'\n  '\\u2502': true  // '│'\n};\n\n// var cdangles = {\n//   '\\u250c': true  // '┌'\n// };\n\n// Every ACS angle character can be\n// represented by 4 bits ordered like this:\n// [langle][uangle][rangle][dangle]\nvar angleTable = {\n  '0000': '', // ?\n  '0001': '\\u2502', // '│' // ?\n  '0010': '\\u2500', // '─' // ??\n  '0011': '\\u250c', // '┌'\n  '0100': '\\u2502', // '│' // ?\n  '0101': '\\u2502', // '│'\n  '0110': '\\u2514', // '└'\n  '0111': '\\u251c', // '├'\n  '1000': '\\u2500', // '─' // ??\n  '1001': '\\u2510', // '┐'\n  '1010': '\\u2500', // '─' // ??\n  '1011': '\\u252c', // '┬'\n  '1100': '\\u2518', // '┘'\n  '1101': '\\u2524', // '┤'\n  '1110': '\\u2534', // '┴'\n  '1111': '\\u253c'  // '┼'\n};\n\nObject.keys(angleTable).forEach(function(key) {\n  angleTable[parseInt(key, 2)] = angleTable[key];\n  delete angleTable[key];\n});\n\n/**\n * Expose\n */\n\nmodule.exports = Screen;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/unicode.js":"/**\n * unicode.js - east asian width and surrogate pairs\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n * Borrowed from vangie/east-asian-width, komagata/eastasianwidth,\n * and mathiasbynens/String.prototype.codePointAt. Licenses below.\n */\n\n// east-asian-width\n//\n// Copyright (c) 2015 Vangie Du\n// https://github.com/vangie/east-asian-width\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation\n// files (the \"Software\"), to deal in the Software without\n// restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n// eastasianwidth\n//\n// Copyright (c) 2013, Masaki Komagata\n// https://github.com/komagata/eastasianwidth\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// String.prototype.codePointAt\n//\n// Copyright Mathias Bynens <https://mathiasbynens.be/>\n// https://github.com/mathiasbynens/String.prototype.codePointAt\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// String.fromCodePoint\n//\n// Copyright Mathias Bynens <https://mathiasbynens.be/>\n// https://github.com/mathiasbynens/String.fromCodePoint\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar stringFromCharCode = String.fromCharCode;\nvar floor = Math.floor;\n\n/**\n * Wide, Surrogates, and Combining\n */\n\nexports.charWidth = function(str, i) {\n  var point = typeof str !== 'number'\n    ? exports.codePointAt(str, i || 0)\n    : str;\n\n  // nul\n  if (point === 0) return 0;\n\n  // tab\n  if (point === 0x09) {\n    if (!exports.blessed) {\n      exports.blessed = require('../');\n    }\n    return exports.blessed.screen.global\n      ? exports.blessed.screen.global.tabc.length\n      : 8;\n  }\n\n  // 8-bit control characters (2-width according to unicode??)\n  if (point < 32 || (point >= 0x7f && point < 0xa0)) {\n    return 0;\n  }\n\n  // search table of non-spacing characters\n  // is ucs combining or C0/C1 control character\n  if (exports.combining[point]) {\n    return 0;\n  }\n\n  // check for double-wide\n  // if (point >= 0x1100\n  //     && (point <= 0x115f // Hangul Jamo init. consonants\n  //     || point === 0x2329 || point === 0x232a\n  //     || (point >= 0x2e80 && point <= 0xa4cf\n  //     && point !== 0x303f) // CJK ... Yi\n  //     || (point >= 0xac00 && point <= 0xd7a3) // Hangul Syllables\n  //     || (point >= 0xf900 && point <= 0xfaff) // CJK Compatibility Ideographs\n  //     || (point >= 0xfe10 && point <= 0xfe19) // Vertical forms\n  //     || (point >= 0xfe30 && point <= 0xfe6f) // CJK Compatibility Forms\n  //     || (point >= 0xff00 && point <= 0xff60) // Fullwidth Forms\n  //     || (point >= 0xffe0 && point <= 0xffe6)\n  //     || (point >= 0x20000 && point <= 0x2fffd)\n  //     || (point >= 0x30000 && point <= 0x3fffd))) {\n  //   return 2;\n  // }\n\n  // check for double-wide\n  if ((0x3000 === point)\n      || (0xFF01 <= point && point <= 0xFF60)\n      || (0xFFE0 <= point && point <= 0xFFE6)) {\n    return 2;\n  }\n\n  if ((0x1100 <= point && point <= 0x115F)\n      || (0x11A3 <= point && point <= 0x11A7)\n      || (0x11FA <= point && point <= 0x11FF)\n      || (0x2329 <= point && point <= 0x232A)\n      || (0x2E80 <= point && point <= 0x2E99)\n      || (0x2E9B <= point && point <= 0x2EF3)\n      || (0x2F00 <= point && point <= 0x2FD5)\n      || (0x2FF0 <= point && point <= 0x2FFB)\n      || (0x3001 <= point && point <= 0x303E)\n      || (0x3041 <= point && point <= 0x3096)\n      || (0x3099 <= point && point <= 0x30FF)\n      || (0x3105 <= point && point <= 0x312D)\n      || (0x3131 <= point && point <= 0x318E)\n      || (0x3190 <= point && point <= 0x31BA)\n      || (0x31C0 <= point && point <= 0x31E3)\n      || (0x31F0 <= point && point <= 0x321E)\n      || (0x3220 <= point && point <= 0x3247)\n      || (0x3250 <= point && point <= 0x32FE)\n      || (0x3300 <= point && point <= 0x4DBF)\n      || (0x4E00 <= point && point <= 0xA48C)\n      || (0xA490 <= point && point <= 0xA4C6)\n      || (0xA960 <= point && point <= 0xA97C)\n      || (0xAC00 <= point && point <= 0xD7A3)\n      || (0xD7B0 <= point && point <= 0xD7C6)\n      || (0xD7CB <= point && point <= 0xD7FB)\n      || (0xF900 <= point && point <= 0xFAFF)\n      || (0xFE10 <= point && point <= 0xFE19)\n      || (0xFE30 <= point && point <= 0xFE52)\n      || (0xFE54 <= point && point <= 0xFE66)\n      || (0xFE68 <= point && point <= 0xFE6B)\n      || (0x1B000 <= point && point <= 0x1B001)\n      || (0x1F200 <= point && point <= 0x1F202)\n      || (0x1F210 <= point && point <= 0x1F23A)\n      || (0x1F240 <= point && point <= 0x1F248)\n      || (0x1F250 <= point && point <= 0x1F251)\n      || (0x20000 <= point && point <= 0x2F73F)\n      || (0x2B740 <= point && point <= 0x2FFFD)\n      || (0x30000 <= point && point <= 0x3FFFD)) {\n    return 2;\n  }\n\n  // CJK Ambiguous\n  // http://www.unicode.org/reports/tr11/\n  // http://www.unicode.org/reports/tr11/#Ambiguous\n  if (process.env.NCURSES_CJK_WIDTH) {\n    if ((0x00A1 === point)\n        || (0x00A4 === point)\n        || (0x00A7 <= point && point <= 0x00A8)\n        || (0x00AA === point)\n        || (0x00AD <= point && point <= 0x00AE)\n        || (0x00B0 <= point && point <= 0x00B4)\n        || (0x00B6 <= point && point <= 0x00BA)\n        || (0x00BC <= point && point <= 0x00BF)\n        || (0x00C6 === point)\n        || (0x00D0 === point)\n        || (0x00D7 <= point && point <= 0x00D8)\n        || (0x00DE <= point && point <= 0x00E1)\n        || (0x00E6 === point)\n        || (0x00E8 <= point && point <= 0x00EA)\n        || (0x00EC <= point && point <= 0x00ED)\n        || (0x00F0 === point)\n        || (0x00F2 <= point && point <= 0x00F3)\n        || (0x00F7 <= point && point <= 0x00FA)\n        || (0x00FC === point)\n        || (0x00FE === point)\n        || (0x0101 === point)\n        || (0x0111 === point)\n        || (0x0113 === point)\n        || (0x011B === point)\n        || (0x0126 <= point && point <= 0x0127)\n        || (0x012B === point)\n        || (0x0131 <= point && point <= 0x0133)\n        || (0x0138 === point)\n        || (0x013F <= point && point <= 0x0142)\n        || (0x0144 === point)\n        || (0x0148 <= point && point <= 0x014B)\n        || (0x014D === point)\n        || (0x0152 <= point && point <= 0x0153)\n        || (0x0166 <= point && point <= 0x0167)\n        || (0x016B === point)\n        || (0x01CE === point)\n        || (0x01D0 === point)\n        || (0x01D2 === point)\n        || (0x01D4 === point)\n        || (0x01D6 === point)\n        || (0x01D8 === point)\n        || (0x01DA === point)\n        || (0x01DC === point)\n        || (0x0251 === point)\n        || (0x0261 === point)\n        || (0x02C4 === point)\n        || (0x02C7 === point)\n        || (0x02C9 <= point && point <= 0x02CB)\n        || (0x02CD === point)\n        || (0x02D0 === point)\n        || (0x02D8 <= point && point <= 0x02DB)\n        || (0x02DD === point)\n        || (0x02DF === point)\n        || (0x0300 <= point && point <= 0x036F)\n        || (0x0391 <= point && point <= 0x03A1)\n        || (0x03A3 <= point && point <= 0x03A9)\n        || (0x03B1 <= point && point <= 0x03C1)\n        || (0x03C3 <= point && point <= 0x03C9)\n        || (0x0401 === point)\n        || (0x0410 <= point && point <= 0x044F)\n        || (0x0451 === point)\n        || (0x2010 === point)\n        || (0x2013 <= point && point <= 0x2016)\n        || (0x2018 <= point && point <= 0x2019)\n        || (0x201C <= point && point <= 0x201D)\n        || (0x2020 <= point && point <= 0x2022)\n        || (0x2024 <= point && point <= 0x2027)\n        || (0x2030 === point)\n        || (0x2032 <= point && point <= 0x2033)\n        || (0x2035 === point)\n        || (0x203B === point)\n        || (0x203E === point)\n        || (0x2074 === point)\n        || (0x207F === point)\n        || (0x2081 <= point && point <= 0x2084)\n        || (0x20AC === point)\n        || (0x2103 === point)\n        || (0x2105 === point)\n        || (0x2109 === point)\n        || (0x2113 === point)\n        || (0x2116 === point)\n        || (0x2121 <= point && point <= 0x2122)\n        || (0x2126 === point)\n        || (0x212B === point)\n        || (0x2153 <= point && point <= 0x2154)\n        || (0x215B <= point && point <= 0x215E)\n        || (0x2160 <= point && point <= 0x216B)\n        || (0x2170 <= point && point <= 0x2179)\n        || (0x2189 === point)\n        || (0x2190 <= point && point <= 0x2199)\n        || (0x21B8 <= point && point <= 0x21B9)\n        || (0x21D2 === point)\n        || (0x21D4 === point)\n        || (0x21E7 === point)\n        || (0x2200 === point)\n        || (0x2202 <= point && point <= 0x2203)\n        || (0x2207 <= point && point <= 0x2208)\n        || (0x220B === point)\n        || (0x220F === point)\n        || (0x2211 === point)\n        || (0x2215 === point)\n        || (0x221A === point)\n        || (0x221D <= point && point <= 0x2220)\n        || (0x2223 === point)\n        || (0x2225 === point)\n        || (0x2227 <= point && point <= 0x222C)\n        || (0x222E === point)\n        || (0x2234 <= point && point <= 0x2237)\n        || (0x223C <= point && point <= 0x223D)\n        || (0x2248 === point)\n        || (0x224C === point)\n        || (0x2252 === point)\n        || (0x2260 <= point && point <= 0x2261)\n        || (0x2264 <= point && point <= 0x2267)\n        || (0x226A <= point && point <= 0x226B)\n        || (0x226E <= point && point <= 0x226F)\n        || (0x2282 <= point && point <= 0x2283)\n        || (0x2286 <= point && point <= 0x2287)\n        || (0x2295 === point)\n        || (0x2299 === point)\n        || (0x22A5 === point)\n        || (0x22BF === point)\n        || (0x2312 === point)\n        || (0x2460 <= point && point <= 0x24E9)\n        || (0x24EB <= point && point <= 0x254B)\n        || (0x2550 <= point && point <= 0x2573)\n        || (0x2580 <= point && point <= 0x258F)\n        || (0x2592 <= point && point <= 0x2595)\n        || (0x25A0 <= point && point <= 0x25A1)\n        || (0x25A3 <= point && point <= 0x25A9)\n        || (0x25B2 <= point && point <= 0x25B3)\n        || (0x25B6 <= point && point <= 0x25B7)\n        || (0x25BC <= point && point <= 0x25BD)\n        || (0x25C0 <= point && point <= 0x25C1)\n        || (0x25C6 <= point && point <= 0x25C8)\n        || (0x25CB === point)\n        || (0x25CE <= point && point <= 0x25D1)\n        || (0x25E2 <= point && point <= 0x25E5)\n        || (0x25EF === point)\n        || (0x2605 <= point && point <= 0x2606)\n        || (0x2609 === point)\n        || (0x260E <= point && point <= 0x260F)\n        || (0x2614 <= point && point <= 0x2615)\n        || (0x261C === point)\n        || (0x261E === point)\n        || (0x2640 === point)\n        || (0x2642 === point)\n        || (0x2660 <= point && point <= 0x2661)\n        || (0x2663 <= point && point <= 0x2665)\n        || (0x2667 <= point && point <= 0x266A)\n        || (0x266C <= point && point <= 0x266D)\n        || (0x266F === point)\n        || (0x269E <= point && point <= 0x269F)\n        || (0x26BE <= point && point <= 0x26BF)\n        || (0x26C4 <= point && point <= 0x26CD)\n        || (0x26CF <= point && point <= 0x26E1)\n        || (0x26E3 === point)\n        || (0x26E8 <= point && point <= 0x26FF)\n        || (0x273D === point)\n        || (0x2757 === point)\n        || (0x2776 <= point && point <= 0x277F)\n        || (0x2B55 <= point && point <= 0x2B59)\n        || (0x3248 <= point && point <= 0x324F)\n        || (0xE000 <= point && point <= 0xF8FF)\n        || (0xFE00 <= point && point <= 0xFE0F)\n        || (0xFFFD === point)\n        || (0x1F100 <= point && point <= 0x1F10A)\n        || (0x1F110 <= point && point <= 0x1F12D)\n        || (0x1F130 <= point && point <= 0x1F169)\n        || (0x1F170 <= point && point <= 0x1F19A)\n        || (0xE0100 <= point && point <= 0xE01EF)\n        || (0xF0000 <= point && point <= 0xFFFFD)\n        || (0x100000 <= point && point <= 0x10FFFD)) {\n      return +process.env.NCURSES_CJK_WIDTH || 1;\n    }\n  }\n\n  return 1;\n};\n\nexports.strWidth = function(str) {\n  var width = 0;\n  for (var i = 0; i < str.length; i++) {\n    width += exports.charWidth(str, i);\n    if (exports.isSurrogate(str, i)) i++;\n  }\n  return width;\n};\n\nexports.isSurrogate = function(str, i) {\n  var point = typeof str !== 'number'\n    ? exports.codePointAt(str, i || 0)\n    : str;\n  return point > 0x00ffff;\n};\n\nexports.combiningTable = [\n  [0x0300, 0x036F],   [0x0483, 0x0486],   [0x0488, 0x0489],\n  [0x0591, 0x05BD],   [0x05BF, 0x05BF],   [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5],   [0x05C7, 0x05C7],   [0x0600, 0x0603],\n  [0x0610, 0x0615],   [0x064B, 0x065E],   [0x0670, 0x0670],\n  [0x06D6, 0x06E4],   [0x06E7, 0x06E8],   [0x06EA, 0x06ED],\n  [0x070F, 0x070F],   [0x0711, 0x0711],   [0x0730, 0x074A],\n  [0x07A6, 0x07B0],   [0x07EB, 0x07F3],   [0x0901, 0x0902],\n  [0x093C, 0x093C],   [0x0941, 0x0948],   [0x094D, 0x094D],\n  [0x0951, 0x0954],   [0x0962, 0x0963],   [0x0981, 0x0981],\n  [0x09BC, 0x09BC],   [0x09C1, 0x09C4],   [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3],   [0x0A01, 0x0A02],   [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42],   [0x0A47, 0x0A48],   [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71],   [0x0A81, 0x0A82],   [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5],   [0x0AC7, 0x0AC8],   [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3],   [0x0B01, 0x0B01],   [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F],   [0x0B41, 0x0B43],   [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56],   [0x0B82, 0x0B82],   [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD],   [0x0C3E, 0x0C40],   [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D],   [0x0C55, 0x0C56],   [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF],   [0x0CC6, 0x0CC6],   [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3],   [0x0D41, 0x0D43],   [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA],   [0x0DD2, 0x0DD4],   [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31],   [0x0E34, 0x0E3A],   [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1],   [0x0EB4, 0x0EB9],   [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD],   [0x0F18, 0x0F19],   [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37],   [0x0F39, 0x0F39],   [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84],   [0x0F86, 0x0F87],   [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC],   [0x0FC6, 0x0FC6],   [0x102D, 0x1030],\n  [0x1032, 0x1032],   [0x1036, 0x1037],   [0x1039, 0x1039],\n  [0x1058, 0x1059],   [0x1160, 0x11FF],   [0x135F, 0x135F],\n  [0x1712, 0x1714],   [0x1732, 0x1734],   [0x1752, 0x1753],\n  [0x1772, 0x1773],   [0x17B4, 0x17B5],   [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6],   [0x17C9, 0x17D3],   [0x17DD, 0x17DD],\n  [0x180B, 0x180D],   [0x18A9, 0x18A9],   [0x1920, 0x1922],\n  [0x1927, 0x1928],   [0x1932, 0x1932],   [0x1939, 0x193B],\n  [0x1A17, 0x1A18],   [0x1B00, 0x1B03],   [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A],   [0x1B3C, 0x1B3C],   [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73],   [0x1DC0, 0x1DCA],   [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F],   [0x202A, 0x202E],   [0x2060, 0x2063],\n  [0x206A, 0x206F],   [0x20D0, 0x20EF],   [0x302A, 0x302F],\n  [0x3099, 0x309A],   [0xA806, 0xA806],   [0xA80B, 0xA80B],\n  [0xA825, 0xA826],   [0xFB1E, 0xFB1E],   [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23],   [0xFEFF, 0xFEFF],   [0xFFF9, 0xFFFB],\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\nexports.combining = exports.combiningTable.reduce(function(out, row) {\n  for (var i = row[0]; i <= row[1]; i++) {\n    out[i] = true;\n  }\n  return out;\n}, {});\n\nexports.isCombining = function(str, i) {\n  var point = typeof str !== 'number'\n    ? exports.codePointAt(str, i || 0)\n    : str;\n  return exports.combining[point] === true;\n};\n\n/**\n * Code Point Helpers\n */\n\nexports.codePointAt = function(str, position) {\n  if (str == null) {\n    throw TypeError();\n  }\n  var string = String(str);\n  if (string.codePointAt) {\n    return string.codePointAt(position);\n  }\n  var size = string.length;\n  // `ToInteger`\n  var index = position ? Number(position) : 0;\n  if (index !== index) { // better `isNaN`\n    index = 0;\n  }\n  // Account for out-of-bounds indices:\n  if (index < 0 || index >= size) {\n    return undefined;\n  }\n  // Get the first code unit\n  var first = string.charCodeAt(index);\n  var second;\n  if ( // check if it’s the start of a surrogate pair\n    first >= 0xD800 && first <= 0xDBFF && // high surrogate\n    size > index + 1 // there is a next code unit\n  ) {\n    second = string.charCodeAt(index + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n  return first;\n};\n\n// exports.codePointAt = function(str, position) {\n//   position = +position || 0;\n//   var x = str.charCodeAt(position);\n//   var y = str.length > 1 ? str.charCodeAt(position + 1) : 0;\n//   var point = x;\n//   if ((0xD800 <= x && x <= 0xDBFF) && (0xDC00 <= y && y <= 0xDFFF)) {\n//     x &= 0x3FF;\n//     y &= 0x3FF;\n//     point = (x << 10) | y;\n//     point += 0x10000;\n//   }\n//   return point;\n// };\n\nexports.fromCodePoint = function() {\n  if (String.fromCodePoint) {\n    return String.fromCodePoint.apply(String, arguments);\n  }\n  var MAX_SIZE = 0x4000;\n  var codeUnits = [];\n  var highSurrogate;\n  var lowSurrogate;\n  var index = -1;\n  var length = arguments.length;\n  if (!length) {\n    return '';\n  }\n  var result = '';\n  while (++index < length) {\n    var codePoint = Number(arguments[index]);\n    if (\n      !isFinite(codePoint) ||       // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 ||              // not a valid Unicode code point\n      codePoint > 0x10FFFF ||       // not a valid Unicode code point\n      floor(codePoint) !== codePoint // not an integer\n    ) {\n      throw RangeError('Invalid code point: ' + codePoint);\n    }\n    if (codePoint <= 0xFFFF) { // BMP code point\n      codeUnits.push(codePoint);\n    } else { // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      highSurrogate = (codePoint >> 10) + 0xD800;\n      lowSurrogate = (codePoint % 0x400) + 0xDC00;\n      codeUnits.push(highSurrogate, lowSurrogate);\n    }\n    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n      result += stringFromCharCode.apply(null, codeUnits);\n      codeUnits.length = 0;\n    }\n  }\n  return result;\n};\n\n/**\n * Regexes\n */\n\nexports.chars = {};\n\n// Double width characters that are _not_ surrogate pairs.\n// NOTE: 0x20000 - 0x2fffd and 0x30000 - 0x3fffd are not necessary for this\n// regex anyway. This regex is used to put a blank char after wide chars to\n// be eaten, however, if this is a surrogate pair, parseContent already adds\n// the extra one char because its length equals 2 instead of 1.\nexports.chars.wide = new RegExp('(['\n  + '\\\\u1100-\\\\u115f' // Hangul Jamo init. consonants\n  + '\\\\u2329\\\\u232a'\n  + '\\\\u2e80-\\\\u303e\\\\u3040-\\\\ua4cf' // CJK ... Yi\n  + '\\\\uac00-\\\\ud7a3' // Hangul Syllables\n  + '\\\\uf900-\\\\ufaff' // CJK Compatibility Ideographs\n  + '\\\\ufe10-\\\\ufe19' // Vertical forms\n  + '\\\\ufe30-\\\\ufe6f' // CJK Compatibility Forms\n  + '\\\\uff00-\\\\uff60' // Fullwidth Forms\n  + '\\\\uffe0-\\\\uffe6'\n  + '])', 'g');\n\n// All surrogate pair wide chars.\nexports.chars.swide = new RegExp('('\n  // 0x20000 - 0x2fffd:\n  + '[\\\\ud840-\\\\ud87f][\\\\udc00-\\\\udffd]'\n  + '|'\n  // 0x30000 - 0x3fffd:\n  + '[\\\\ud880-\\\\ud8bf][\\\\udc00-\\\\udffd]'\n  + ')', 'g');\n\n// All wide chars including surrogate pairs.\nexports.chars.all = new RegExp('('\n  + exports.chars.swide.source.slice(1, -1)\n  + '|'\n  + exports.chars.wide.source.slice(1, -1)\n  + ')', 'g');\n\n// Regex to detect a surrogate pair.\nexports.chars.surrogate = /[\\ud800-\\udbff][\\udc00-\\udfff]/g;\n\n// Regex to find combining characters.\nexports.chars.combining = exports.combiningTable.reduce(function(out, row) {\n  var low, high, range;\n  if (row[0] > 0x00ffff) {\n    low = exports.fromCodePoint(row[0]);\n    low = [\n      hexify(low.charCodeAt(0)),\n      hexify(low.charCodeAt(1))\n    ];\n    high = exports.fromCodePoint(row[1]);\n    high = [\n      hexify(high.charCodeAt(0)),\n      hexify(high.charCodeAt(1))\n    ];\n    range = '[\\\\u' + low[0] + '-' + '\\\\u' + high[0] + ']'\n          + '[\\\\u' + low[1] + '-' + '\\\\u' + high[1] + ']';\n    if (!~out.indexOf('|')) out += ']';\n    out += '|' + range;\n  } else {\n    low = hexify(row[0]);\n    high = hexify(row[1]);\n    low = '\\\\u' + low;\n    high = '\\\\u' + high;\n    out += low + '-' + high;\n  }\n  return out;\n}, '[');\n\nexports.chars.combining = new RegExp(exports.chars.combining, 'g');\n\nfunction hexify(n) {\n  n = n.toString(16);\n  while (n.length < 4) n = '0' + n;\n  return n;\n}\n\n/*\nexports.chars.combining = new RegExp(\n  '['\n  + '\\\\u0300-\\\\u036f'\n  + '\\\\u0483-\\\\u0486'\n  + '\\\\u0488-\\\\u0489'\n  + '\\\\u0591-\\\\u05bd'\n  + '\\\\u05bf-\\\\u05bf'\n  + '\\\\u05c1-\\\\u05c2'\n  + '\\\\u05c4-\\\\u05c5'\n  + '\\\\u05c7-\\\\u05c7'\n  + '\\\\u0600-\\\\u0603'\n  + '\\\\u0610-\\\\u0615'\n  + '\\\\u064b-\\\\u065e'\n  + '\\\\u0670-\\\\u0670'\n  + '\\\\u06d6-\\\\u06e4'\n  + '\\\\u06e7-\\\\u06e8'\n  + '\\\\u06ea-\\\\u06ed'\n  + '\\\\u070f-\\\\u070f'\n  + '\\\\u0711-\\\\u0711'\n  + '\\\\u0730-\\\\u074a'\n  + '\\\\u07a6-\\\\u07b0'\n  + '\\\\u07eb-\\\\u07f3'\n  + '\\\\u0901-\\\\u0902'\n  + '\\\\u093c-\\\\u093c'\n  + '\\\\u0941-\\\\u0948'\n  + '\\\\u094d-\\\\u094d'\n  + '\\\\u0951-\\\\u0954'\n  + '\\\\u0962-\\\\u0963'\n  + '\\\\u0981-\\\\u0981'\n  + '\\\\u09bc-\\\\u09bc'\n  + '\\\\u09c1-\\\\u09c4'\n  + '\\\\u09cd-\\\\u09cd'\n  + '\\\\u09e2-\\\\u09e3'\n  + '\\\\u0a01-\\\\u0a02'\n  + '\\\\u0a3c-\\\\u0a3c'\n  + '\\\\u0a41-\\\\u0a42'\n  + '\\\\u0a47-\\\\u0a48'\n  + '\\\\u0a4b-\\\\u0a4d'\n  + '\\\\u0a70-\\\\u0a71'\n  + '\\\\u0a81-\\\\u0a82'\n  + '\\\\u0abc-\\\\u0abc'\n  + '\\\\u0ac1-\\\\u0ac5'\n  + '\\\\u0ac7-\\\\u0ac8'\n  + '\\\\u0acd-\\\\u0acd'\n  + '\\\\u0ae2-\\\\u0ae3'\n  + '\\\\u0b01-\\\\u0b01'\n  + '\\\\u0b3c-\\\\u0b3c'\n  + '\\\\u0b3f-\\\\u0b3f'\n  + '\\\\u0b41-\\\\u0b43'\n  + '\\\\u0b4d-\\\\u0b4d'\n  + '\\\\u0b56-\\\\u0b56'\n  + '\\\\u0b82-\\\\u0b82'\n  + '\\\\u0bc0-\\\\u0bc0'\n  + '\\\\u0bcd-\\\\u0bcd'\n  + '\\\\u0c3e-\\\\u0c40'\n  + '\\\\u0c46-\\\\u0c48'\n  + '\\\\u0c4a-\\\\u0c4d'\n  + '\\\\u0c55-\\\\u0c56'\n  + '\\\\u0cbc-\\\\u0cbc'\n  + '\\\\u0cbf-\\\\u0cbf'\n  + '\\\\u0cc6-\\\\u0cc6'\n  + '\\\\u0ccc-\\\\u0ccd'\n  + '\\\\u0ce2-\\\\u0ce3'\n  + '\\\\u0d41-\\\\u0d43'\n  + '\\\\u0d4d-\\\\u0d4d'\n  + '\\\\u0dca-\\\\u0dca'\n  + '\\\\u0dd2-\\\\u0dd4'\n  + '\\\\u0dd6-\\\\u0dd6'\n  + '\\\\u0e31-\\\\u0e31'\n  + '\\\\u0e34-\\\\u0e3a'\n  + '\\\\u0e47-\\\\u0e4e'\n  + '\\\\u0eb1-\\\\u0eb1'\n  + '\\\\u0eb4-\\\\u0eb9'\n  + '\\\\u0ebb-\\\\u0ebc'\n  + '\\\\u0ec8-\\\\u0ecd'\n  + '\\\\u0f18-\\\\u0f19'\n  + '\\\\u0f35-\\\\u0f35'\n  + '\\\\u0f37-\\\\u0f37'\n  + '\\\\u0f39-\\\\u0f39'\n  + '\\\\u0f71-\\\\u0f7e'\n  + '\\\\u0f80-\\\\u0f84'\n  + '\\\\u0f86-\\\\u0f87'\n  + '\\\\u0f90-\\\\u0f97'\n  + '\\\\u0f99-\\\\u0fbc'\n  + '\\\\u0fc6-\\\\u0fc6'\n  + '\\\\u102d-\\\\u1030'\n  + '\\\\u1032-\\\\u1032'\n  + '\\\\u1036-\\\\u1037'\n  + '\\\\u1039-\\\\u1039'\n  + '\\\\u1058-\\\\u1059'\n  + '\\\\u1160-\\\\u11ff'\n  + '\\\\u135f-\\\\u135f'\n  + '\\\\u1712-\\\\u1714'\n  + '\\\\u1732-\\\\u1734'\n  + '\\\\u1752-\\\\u1753'\n  + '\\\\u1772-\\\\u1773'\n  + '\\\\u17b4-\\\\u17b5'\n  + '\\\\u17b7-\\\\u17bd'\n  + '\\\\u17c6-\\\\u17c6'\n  + '\\\\u17c9-\\\\u17d3'\n  + '\\\\u17dd-\\\\u17dd'\n  + '\\\\u180b-\\\\u180d'\n  + '\\\\u18a9-\\\\u18a9'\n  + '\\\\u1920-\\\\u1922'\n  + '\\\\u1927-\\\\u1928'\n  + '\\\\u1932-\\\\u1932'\n  + '\\\\u1939-\\\\u193b'\n  + '\\\\u1a17-\\\\u1a18'\n  + '\\\\u1b00-\\\\u1b03'\n  + '\\\\u1b34-\\\\u1b34'\n  + '\\\\u1b36-\\\\u1b3a'\n  + '\\\\u1b3c-\\\\u1b3c'\n  + '\\\\u1b42-\\\\u1b42'\n  + '\\\\u1b6b-\\\\u1b73'\n  + '\\\\u1dc0-\\\\u1dca'\n  + '\\\\u1dfe-\\\\u1dff'\n  + '\\\\u200b-\\\\u200f'\n  + '\\\\u202a-\\\\u202e'\n  + '\\\\u2060-\\\\u2063'\n  + '\\\\u206a-\\\\u206f'\n  + '\\\\u20d0-\\\\u20ef'\n  + '\\\\u302a-\\\\u302f'\n  + '\\\\u3099-\\\\u309a'\n  + '\\\\ua806-\\\\ua806'\n  + '\\\\ua80b-\\\\ua80b'\n  + '\\\\ua825-\\\\ua826'\n  + '\\\\ufb1e-\\\\ufb1e'\n  + '\\\\ufe00-\\\\ufe0f'\n  + '\\\\ufe20-\\\\ufe23'\n  + '\\\\ufeff-\\\\ufeff'\n  + '\\\\ufff9-\\\\ufffb'\n  + ']'\n  + '|[\\\\ud802-\\\\ud802][\\\\ude01-\\\\ude03]'\n  + '|[\\\\ud802-\\\\ud802][\\\\ude05-\\\\ude06]'\n  + '|[\\\\ud802-\\\\ud802][\\\\ude0c-\\\\ude0f]'\n  + '|[\\\\ud802-\\\\ud802][\\\\ude38-\\\\ude3a]'\n  + '|[\\\\ud802-\\\\ud802][\\\\ude3f-\\\\ude3f]'\n  + '|[\\\\ud834-\\\\ud834][\\\\udd67-\\\\udd69]'\n  + '|[\\\\ud834-\\\\ud834][\\\\udd73-\\\\udd82]'\n  + '|[\\\\ud834-\\\\ud834][\\\\udd85-\\\\udd8b]'\n  + '|[\\\\ud834-\\\\ud834][\\\\uddaa-\\\\uddad]'\n  + '|[\\\\ud834-\\\\ud834][\\\\ude42-\\\\ude44]'\n  + '|[\\\\udb40-\\\\udb40][\\\\udc01-\\\\udc01]'\n  + '|[\\\\udb40-\\\\udb40][\\\\udc20-\\\\udc7f]'\n  + '|[\\\\udb40-\\\\udb40][\\\\udd00-\\\\uddef]'\n, 'g');\n*/\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/helpers.js":"/**\n * helpers.js - helpers for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar fs = require('fs');\n\nvar unicode = require('./unicode');\n\n/**\n * Helpers\n */\n\nvar helpers = exports;\n\nhelpers.merge = function(a, b) {\n  Object.keys(b).forEach(function(key) {\n    a[key] = b[key];\n  });\n  return a;\n};\n\nhelpers.asort = function(obj) {\n  return obj.sort(function(a, b) {\n    a = a.name.toLowerCase();\n    b = b.name.toLowerCase();\n\n    if (a[0] === '.' && b[0] === '.') {\n      a = a[1];\n      b = b[1];\n    } else {\n      a = a[0];\n      b = b[0];\n    }\n\n    return a > b ? 1 : (a < b ? -1 : 0);\n  });\n};\n\nhelpers.hsort = function(obj) {\n  return obj.sort(function(a, b) {\n    return b.index - a.index;\n  });\n};\n\nhelpers.findFile = function(start, target) {\n  return (function read(dir) {\n    var files, file, stat, out;\n\n    if (dir === '/dev' || dir === '/sys'\n        || dir === '/proc' || dir === '/net') {\n      return null;\n    }\n\n    try {\n      files = fs.readdirSync(dir);\n    } catch (e) {\n      files = [];\n    }\n\n    for (var i = 0; i < files.length; i++) {\n      file = files[i];\n\n      if (file === target) {\n        return (dir === '/' ? '' : dir) + '/' + file;\n      }\n\n      try {\n        stat = fs.lstatSync((dir === '/' ? '' : dir) + '/' + file);\n      } catch (e) {\n        stat = null;\n      }\n\n      if (stat && stat.isDirectory() && !stat.isSymbolicLink()) {\n        out = read((dir === '/' ? '' : dir) + '/' + file);\n        if (out) return out;\n      }\n    }\n\n    return null;\n  })(start);\n};\n\n// Escape text for tag-enabled elements.\nhelpers.escape = function(text) {\n  return text.replace(/[{}]/g, function(ch) {\n    return ch === '{' ? '{open}' : '{close}';\n  });\n};\n\nhelpers.parseTags = function(text, screen) {\n  return helpers.Element.prototype._parseTags.call(\n    { parseTags: true, screen: screen || helpers.Screen.global }, text);\n};\n\nhelpers.generateTags = function(style, text) {\n  var open = ''\n    , close = '';\n\n  Object.keys(style || {}).forEach(function(key) {\n    var val = style[key];\n    if (typeof val === 'string') {\n      val = val.replace(/^light(?!-)/, 'light-');\n      val = val.replace(/^bright(?!-)/, 'bright-');\n      open = '{' + val + '-' + key + '}' + open;\n      close += '{/' + val + '-' + key + '}';\n    } else {\n      if (val === true) {\n        open = '{' + key + '}' + open;\n        close += '{/' + key + '}';\n      }\n    }\n  });\n\n  if (text != null) {\n    return open + text + close;\n  }\n\n  return {\n    open: open,\n    close: close\n  };\n};\n\nhelpers.attrToBinary = function(style, element) {\n  return helpers.Element.prototype.sattr.call(element || {}, style);\n};\n\nhelpers.stripTags = function(text) {\n  if (!text) return '';\n  return text\n    .replace(/{(\\/?)([\\w\\-,;!#]*)}/g, '')\n    .replace(/\\x1b\\[[\\d;]*m/g, '');\n};\n\nhelpers.cleanTags = function(text) {\n  return helpers.stripTags(text).trim();\n};\n\nhelpers.dropUnicode = function(text) {\n  if (!text) return '';\n  return text\n    .replace(unicode.chars.all, '??')\n    .replace(unicode.chars.combining, '')\n    .replace(unicode.chars.surrogate, '?');\n};\n\nhelpers.__defineGetter__('Screen', function() {\n  if (!helpers._screen) {\n    helpers._screen = require('./widgets/screen');\n  }\n  return helpers._screen;\n});\n\nhelpers.__defineGetter__('Element', function() {\n  if (!helpers._element) {\n    helpers._element = require('./widgets/element');\n  }\n  return helpers._element;\n});\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/log.js":"/**\n * log.js - log element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar util = require('util');\n\nvar nextTick = global.setImmediate || process.nextTick.bind(process);\n\nvar Node = require('./node');\nvar ScrollableText = require('./scrollabletext');\n\n/**\n * Log\n */\n\nfunction Log(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Log(options);\n  }\n\n  options = options || {};\n\n  ScrollableText.call(this, options);\n\n  this.scrollback = options.scrollback != null\n    ? options.scrollback\n    : Infinity;\n  this.scrollOnInput = options.scrollOnInput;\n\n  this.on('set content', function() {\n    if (!self._userScrolled || self.scrollOnInput) {\n      nextTick(function() {\n        self.setScrollPerc(100);\n        self._userScrolled = false;\n        self.screen.render();\n      });\n    }\n  });\n}\n\nLog.prototype.__proto__ = ScrollableText.prototype;\n\nLog.prototype.type = 'log';\n\nLog.prototype.log =\nLog.prototype.add = function() {\n  var args = Array.prototype.slice.call(arguments);\n  if (typeof args[0] === 'object') {\n    args[0] = util.inspect(args[0], true, 20, true);\n  }\n  var text = util.format.apply(util, args);\n  this.emit('log', text);\n  var ret = this.pushLine(text);\n  if (this._clines.fake.length > this.scrollback) {\n    this.shiftLine(0, (this.scrollback / 3) | 0);\n  }\n  return ret;\n};\n\nLog.prototype._scroll = Log.prototype.scroll;\nLog.prototype.scroll = function(offset, always) {\n  if (offset === 0) return this._scroll(offset, always);\n  this._userScrolled = true;\n  var ret = this._scroll(offset, always);\n  if (this.getScrollPerc() === 100) {\n    this._userScrolled = false;\n  }\n  return ret;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Log;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/scrollabletext.js":"/**\n * scrollabletext.js - scrollable text element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar ScrollableBox = require('./scrollablebox');\n\n/**\n * ScrollableText\n */\n\nfunction ScrollableText(options) {\n  if (!(this instanceof Node)) {\n    return new ScrollableText(options);\n  }\n  options = options || {};\n  options.alwaysScroll = true;\n  ScrollableBox.call(this, options);\n}\n\nScrollableText.prototype.__proto__ = ScrollableBox.prototype;\n\nScrollableText.prototype.type = 'scrollable-text';\n\n/**\n * Expose\n */\n\nmodule.exports = ScrollableText;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/scrollablebox.js":"/**\n * scrollablebox.js - scrollable box element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * ScrollableBox\n */\n\nfunction ScrollableBox(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new ScrollableBox(options);\n  }\n\n  options = options || {};\n\n  Box.call(this, options);\n\n  if (options.scrollable === false) {\n    return this;\n  }\n\n  this.scrollable = true;\n  this.childOffset = 0;\n  this.childBase = 0;\n  this.baseLimit = options.baseLimit || Infinity;\n  this.alwaysScroll = options.alwaysScroll;\n\n  this.scrollbar = options.scrollbar;\n  if (this.scrollbar) {\n    this.scrollbar.ch = this.scrollbar.ch || ' ';\n    this.style.scrollbar = this.style.scrollbar || this.scrollbar.style;\n    if (!this.style.scrollbar) {\n      this.style.scrollbar = {};\n      this.style.scrollbar.fg = this.scrollbar.fg;\n      this.style.scrollbar.bg = this.scrollbar.bg;\n      this.style.scrollbar.bold = this.scrollbar.bold;\n      this.style.scrollbar.underline = this.scrollbar.underline;\n      this.style.scrollbar.inverse = this.scrollbar.inverse;\n      this.style.scrollbar.invisible = this.scrollbar.invisible;\n    }\n    //this.scrollbar.style = this.style.scrollbar;\n    if (this.track || this.scrollbar.track) {\n      this.track = this.scrollbar.track || this.track;\n      this.style.track = this.style.scrollbar.track || this.style.track;\n      this.track.ch = this.track.ch || ' ';\n      this.style.track = this.style.track || this.track.style;\n      if (!this.style.track) {\n        this.style.track = {};\n        this.style.track.fg = this.track.fg;\n        this.style.track.bg = this.track.bg;\n        this.style.track.bold = this.track.bold;\n        this.style.track.underline = this.track.underline;\n        this.style.track.inverse = this.track.inverse;\n        this.style.track.invisible = this.track.invisible;\n      }\n      this.track.style = this.style.track;\n    }\n    // Allow controlling of the scrollbar via the mouse:\n    if (options.mouse) {\n      this.on('mousedown', function(data) {\n        if (self._scrollingBar) {\n          // Do not allow dragging on the scrollbar:\n          delete self.screen._dragging;\n          delete self._drag;\n          return;\n        }\n        var x = data.x - self.aleft;\n        var y = data.y - self.atop;\n        if (x === self.width - self.iright - 1) {\n          // Do not allow dragging on the scrollbar:\n          delete self.screen._dragging;\n          delete self._drag;\n          var perc = (y - self.itop) / (self.height - self.iheight);\n          self.setScrollPerc(perc * 100 | 0);\n          self.screen.render();\n          var smd, smu;\n          self._scrollingBar = true;\n          self.onScreenEvent('mousedown', smd = function(data) {\n            var y = data.y - self.atop;\n            var perc = y / self.height;\n            self.setScrollPerc(perc * 100 | 0);\n            self.screen.render();\n          });\n          // If mouseup occurs out of the window, no mouseup event fires, and\n          // scrollbar will drag again on mousedown until another mouseup\n          // occurs.\n          self.onScreenEvent('mouseup', smu = function() {\n            self._scrollingBar = false;\n            self.removeScreenEvent('mousedown', smd);\n            self.removeScreenEvent('mouseup', smu);\n          });\n        }\n      });\n    }\n  }\n\n  if (options.mouse) {\n    this.on('wheeldown', function() {\n      self.scroll(self.height / 2 | 0 || 1);\n      self.screen.render();\n    });\n    this.on('wheelup', function() {\n      self.scroll(-(self.height / 2 | 0) || -1);\n      self.screen.render();\n    });\n  }\n\n  if (options.keys && !options.ignoreKeys) {\n    this.on('keypress', function(ch, key) {\n      if (key.name === 'up' || (options.vi && key.name === 'k')) {\n        self.scroll(-1);\n        self.screen.render();\n        return;\n      }\n      if (key.name === 'down' || (options.vi && key.name === 'j')) {\n        self.scroll(1);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'u' && key.ctrl) {\n        self.scroll(-(self.height / 2 | 0) || -1);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'd' && key.ctrl) {\n        self.scroll(self.height / 2 | 0 || 1);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'b' && key.ctrl) {\n        self.scroll(-self.height || -1);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'f' && key.ctrl) {\n        self.scroll(self.height || 1);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'g' && !key.shift) {\n        self.scrollTo(0);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'g' && key.shift) {\n        self.scrollTo(self.getScrollHeight());\n        self.screen.render();\n        return;\n      }\n    });\n  }\n\n  this.on('parsed content', function() {\n    self._recalculateIndex();\n  });\n\n  self._recalculateIndex();\n}\n\nScrollableBox.prototype.__proto__ = Box.prototype;\n\nScrollableBox.prototype.type = 'scrollable-box';\n\n// XXX Potentially use this in place of scrollable checks elsewhere.\nScrollableBox.prototype.__defineGetter__('reallyScrollable', function() {\n  if (this.shrink) return this.scrollable;\n  return this.getScrollHeight() > this.height;\n});\n\nScrollableBox.prototype._scrollBottom = function() {\n  if (!this.scrollable) return 0;\n\n  // We could just calculate the children, but we can\n  // optimize for lists by just returning the items.length.\n  if (this._isList) {\n    return this.items ? this.items.length : 0;\n  }\n\n  if (this.lpos && this.lpos._scrollBottom) {\n    return this.lpos._scrollBottom;\n  }\n\n  var bottom = this.children.reduce(function(current, el) {\n    // el.height alone does not calculate the shrunken height, we need to use\n    // getCoords. A shrunken box inside a scrollable element will not grow any\n    // larger than the scrollable element's context regardless of how much\n    // content is in the shrunken box, unless we do this (call getCoords\n    // without the scrollable calculation):\n    // See: $ node test/widget-shrink-fail-2.js\n    if (!el.detached) {\n      var lpos = el._getCoords(false, true);\n      if (lpos) {\n        return Math.max(current, el.rtop + (lpos.yl - lpos.yi));\n      }\n    }\n    return Math.max(current, el.rtop + el.height);\n  }, 0);\n\n  // XXX Use this? Makes .getScrollHeight() useless!\n  // if (bottom < this._clines.length) bottom = this._clines.length;\n\n  if (this.lpos) this.lpos._scrollBottom = bottom;\n\n  return bottom;\n};\n\nScrollableBox.prototype.setScroll =\nScrollableBox.prototype.scrollTo = function(offset, always) {\n  // XXX\n  // At first, this appeared to account for the first new calculation of childBase:\n  this.scroll(0);\n  return this.scroll(offset - (this.childBase + this.childOffset), always);\n};\n\nScrollableBox.prototype.getScroll = function() {\n  return this.childBase + this.childOffset;\n};\n\nScrollableBox.prototype.scroll = function(offset, always) {\n  if (!this.scrollable) return;\n\n  if (this.detached) return;\n\n  // Handle scrolling.\n  var visible = this.height - this.iheight\n    , base = this.childBase\n    , d\n    , p\n    , t\n    , b\n    , max\n    , emax;\n\n  if (this.alwaysScroll || always) {\n    // Semi-workaround\n    this.childOffset = offset > 0\n      ? visible - 1 + offset\n      : offset;\n  } else {\n    this.childOffset += offset;\n  }\n\n  if (this.childOffset > visible - 1) {\n    d = this.childOffset - (visible - 1);\n    this.childOffset -= d;\n    this.childBase += d;\n  } else if (this.childOffset < 0) {\n    d = this.childOffset;\n    this.childOffset += -d;\n    this.childBase += d;\n  }\n\n  if (this.childBase < 0) {\n    this.childBase = 0;\n  } else if (this.childBase > this.baseLimit) {\n    this.childBase = this.baseLimit;\n  }\n\n  // Find max \"bottom\" value for\n  // content and descendant elements.\n  // Scroll the content if necessary.\n  if (this.childBase === base) {\n    return this.emit('scroll');\n  }\n\n  // When scrolling text, we want to be able to handle SGR codes as well as line\n  // feeds. This allows us to take preformatted text output from other programs\n  // and put it in a scrollable text box.\n  this.parseContent();\n\n  // XXX\n  // max = this.getScrollHeight() - (this.height - this.iheight);\n\n  max = this._clines.length - (this.height - this.iheight);\n  if (max < 0) max = 0;\n  emax = this._scrollBottom() - (this.height - this.iheight);\n  if (emax < 0) emax = 0;\n\n  this.childBase = Math.min(this.childBase, Math.max(emax, max));\n\n  if (this.childBase < 0) {\n    this.childBase = 0;\n  } else if (this.childBase > this.baseLimit) {\n    this.childBase = this.baseLimit;\n  }\n\n  // Optimize scrolling with CSR + IL/DL.\n  p = this.lpos;\n  // Only really need _getCoords() if we want\n  // to allow nestable scrolling elements...\n  // or if we **really** want shrinkable\n  // scrolling elements.\n  // p = this._getCoords();\n  if (p && this.childBase !== base && this.screen.cleanSides(this)) {\n    t = p.yi + this.itop;\n    b = p.yl - this.ibottom - 1;\n    d = this.childBase - base;\n\n    if (d > 0 && d < visible) {\n      // scrolled down\n      this.screen.deleteLine(d, t, t, b);\n    } else if (d < 0 && -d < visible) {\n      // scrolled up\n      d = -d;\n      this.screen.insertLine(d, t, t, b);\n    }\n  }\n\n  return this.emit('scroll');\n};\n\nScrollableBox.prototype._recalculateIndex = function() {\n  var max, emax;\n\n  if (this.detached || !this.scrollable) {\n    return 0;\n  }\n\n  // XXX\n  // max = this.getScrollHeight() - (this.height - this.iheight);\n\n  max = this._clines.length - (this.height - this.iheight);\n  if (max < 0) max = 0;\n  emax = this._scrollBottom() - (this.height - this.iheight);\n  if (emax < 0) emax = 0;\n\n  this.childBase = Math.min(this.childBase, Math.max(emax, max));\n\n  if (this.childBase < 0) {\n    this.childBase = 0;\n  } else if (this.childBase > this.baseLimit) {\n    this.childBase = this.baseLimit;\n  }\n};\n\nScrollableBox.prototype.resetScroll = function() {\n  if (!this.scrollable) return;\n  this.childOffset = 0;\n  this.childBase = 0;\n  return this.emit('scroll');\n};\n\nScrollableBox.prototype.getScrollHeight = function() {\n  return Math.max(this._clines.length, this._scrollBottom());\n};\n\nScrollableBox.prototype.getScrollPerc = function(s) {\n  var pos = this.lpos || this._getCoords();\n  if (!pos) return s ? -1 : 0;\n\n  var height = (pos.yl - pos.yi) - this.iheight\n    , i = this.getScrollHeight()\n    , p;\n\n  if (height < i) {\n    if (this.alwaysScroll) {\n      p = this.childBase / (i - height);\n    } else {\n      p = (this.childBase + this.childOffset) / (i - 1);\n    }\n    return p * 100;\n  }\n\n  return s ? -1 : 0;\n};\n\nScrollableBox.prototype.setScrollPerc = function(i) {\n  // XXX\n  // var m = this.getScrollHeight();\n  var m = Math.max(this._clines.length, this._scrollBottom());\n  return this.scrollTo((i / 100) * m | 0);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = ScrollableBox;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/box.js":"/**\n * box.js - box element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Element = require('./element');\n\n/**\n * Box\n */\n\nfunction Box(options) {\n  if (!(this instanceof Node)) {\n    return new Box(options);\n  }\n  options = options || {};\n  Element.call(this, options);\n}\n\nBox.prototype.__proto__ = Element.prototype;\n\nBox.prototype.type = 'box';\n\n/**\n * Expose\n */\n\nmodule.exports = Box;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/element.js":"/**\n * element.js - base element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar assert = require('assert');\n\nvar colors = require('../colors')\n  , unicode = require('../unicode');\n\nvar nextTick = global.setImmediate || process.nextTick.bind(process);\n\nvar helpers = require('../helpers');\n\nvar Node = require('./node');\n\n/**\n * Element\n */\n\nfunction Element(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Element(options);\n  }\n\n  options = options || {};\n\n  // Workaround to get a `scrollable` option.\n  if (options.scrollable && !this._ignore && this.type !== 'scrollable-box') {\n    var ScrollableBox = require('./scrollablebox');\n    Object.getOwnPropertyNames(ScrollableBox.prototype).forEach(function(key) {\n      if (key === 'type') return;\n      Object.defineProperty(this, key,\n        Object.getOwnPropertyDescriptor(ScrollableBox.prototype, key));\n    }, this);\n    this._ignore = true;\n    ScrollableBox.call(this, options);\n    delete this._ignore;\n    return this;\n  }\n\n  Node.call(this, options);\n\n  this.name = options.name;\n\n  options.position = options.position || {\n    left: options.left,\n    right: options.right,\n    top: options.top,\n    bottom: options.bottom,\n    width: options.width,\n    height: options.height\n  };\n\n  if (options.position.width === 'shrink'\n      || options.position.height === 'shrink') {\n    if (options.position.width === 'shrink') {\n      delete options.position.width;\n    }\n    if (options.position.height === 'shrink') {\n      delete options.position.height;\n    }\n    options.shrink = true;\n  }\n\n  this.position = options.position;\n\n  this.noOverflow = options.noOverflow;\n  this.dockBorders = options.dockBorders;\n  this.shadow = options.shadow;\n\n  this.style = options.style;\n\n  if (!this.style) {\n    this.style = {};\n    this.style.fg = options.fg;\n    this.style.bg = options.bg;\n    this.style.bold = options.bold;\n    this.style.underline = options.underline;\n    this.style.blink = options.blink;\n    this.style.inverse = options.inverse;\n    this.style.invisible = options.invisible;\n    this.style.transparent = options.transparent;\n  }\n\n  this.hidden = options.hidden || false;\n  this.fixed = options.fixed || false;\n  this.align = options.align || 'left';\n  this.valign = options.valign || 'top';\n  this.wrap = options.wrap !== false;\n  this.shrink = options.shrink;\n  this.fixed = options.fixed;\n  this.ch = options.ch || ' ';\n\n  if (typeof options.padding === 'number' || !options.padding) {\n    options.padding = {\n      left: options.padding,\n      top: options.padding,\n      right: options.padding,\n      bottom: options.padding\n    };\n  }\n\n  this.padding = {\n    left: options.padding.left || 0,\n    top: options.padding.top || 0,\n    right: options.padding.right || 0,\n    bottom: options.padding.bottom || 0\n  };\n\n  this.border = options.border;\n  if (this.border) {\n    if (typeof this.border === 'string') {\n      this.border = { type: this.border };\n    }\n    this.border.type = this.border.type || 'bg';\n    if (this.border.type === 'ascii') this.border.type = 'line';\n    this.border.ch = this.border.ch || ' ';\n    this.style.border = this.style.border || this.border.style;\n    if (!this.style.border) {\n      this.style.border = {};\n      this.style.border.fg = this.border.fg;\n      this.style.border.bg = this.border.bg;\n    }\n    //this.border.style = this.style.border;\n    if (this.border.left == null) this.border.left = true;\n    if (this.border.top == null) this.border.top = true;\n    if (this.border.right == null) this.border.right = true;\n    if (this.border.bottom == null) this.border.bottom = true;\n  }\n\n  // if (options.mouse || options.clickable) {\n  if (options.clickable) {\n    this.screen._listenMouse(this);\n  }\n\n  if (options.input || options.keyable) {\n    this.screen._listenKeys(this);\n  }\n\n  this.parseTags = options.parseTags || options.tags;\n\n  this.setContent(options.content || '', true);\n\n  if (options.label) {\n    this.setLabel(options.label);\n  }\n\n  if (options.hoverText) {\n    this.setHover(options.hoverText);\n  }\n\n  // TODO: Possibly move this to Node for onScreenEvent('mouse', ...).\n  this.on('newListener', function fn(type) {\n    // type = type.split(' ').slice(1).join(' ');\n    if (type === 'mouse'\n      || type === 'click'\n      || type === 'mouseover'\n      || type === 'mouseout'\n      || type === 'mousedown'\n      || type === 'mouseup'\n      || type === 'mousewheel'\n      || type === 'wheeldown'\n      || type === 'wheelup'\n      || type === 'mousemove') {\n      self.screen._listenMouse(self);\n    } else if (type === 'keypress' || type.indexOf('key ') === 0) {\n      self.screen._listenKeys(self);\n    }\n  });\n\n  this.on('resize', function() {\n    self.parseContent();\n  });\n\n  this.on('attach', function() {\n    self.parseContent();\n  });\n\n  this.on('detach', function() {\n    delete self.lpos;\n  });\n\n  if (options.hoverBg != null) {\n    options.hoverEffects = options.hoverEffects || {};\n    options.hoverEffects.bg = options.hoverBg;\n  }\n\n  if (this.style.hover) {\n    options.hoverEffects = this.style.hover;\n  }\n\n  if (this.style.focus) {\n    options.focusEffects = this.style.focus;\n  }\n\n  if (options.effects) {\n    if (options.effects.hover) options.hoverEffects = options.effects.hover;\n    if (options.effects.focus) options.focusEffects = options.effects.focus;\n  }\n\n  [['hoverEffects', 'mouseover', 'mouseout', '_htemp'],\n   ['focusEffects', 'focus', 'blur', '_ftemp']].forEach(function(props) {\n    var pname = props[0], over = props[1], out = props[2], temp = props[3];\n    self.screen.setEffects(self, self, over, out, self.options[pname], temp);\n  });\n\n  if (this.options.draggable) {\n    this.draggable = true;\n  }\n\n  if (options.focused) {\n    this.focus();\n  }\n}\n\nElement.prototype.__proto__ = Node.prototype;\n\nElement.prototype.type = 'element';\n\nElement.prototype.__defineGetter__('focused', function() {\n  return this.screen.focused === this;\n});\n\nElement.prototype.sattr = function(style, fg, bg) {\n  var bold = style.bold\n    , underline = style.underline\n    , blink = style.blink\n    , inverse = style.inverse\n    , invisible = style.invisible;\n\n  // if (arguments.length === 1) {\n  if (fg == null && bg == null) {\n    fg = style.fg;\n    bg = style.bg;\n  }\n\n  // This used to be a loop, but I decided\n  // to unroll it for performance's sake.\n  if (typeof bold === 'function') bold = bold(this);\n  if (typeof underline === 'function') underline = underline(this);\n  if (typeof blink === 'function') blink = blink(this);\n  if (typeof inverse === 'function') inverse = inverse(this);\n  if (typeof invisible === 'function') invisible = invisible(this);\n\n  if (typeof fg === 'function') fg = fg(this);\n  if (typeof bg === 'function') bg = bg(this);\n\n  // return (this.uid << 24)\n  //   | ((this.dockBorders ? 32 : 0) << 18)\n  return ((invisible ? 16 : 0) << 18)\n    | ((inverse ? 8 : 0) << 18)\n    | ((blink ? 4 : 0) << 18)\n    | ((underline ? 2 : 0) << 18)\n    | ((bold ? 1 : 0) << 18)\n    | (colors.convert(fg) << 9)\n    | colors.convert(bg);\n};\n\nElement.prototype.onScreenEvent = function(type, handler) {\n  var listeners = this._slisteners = this._slisteners || [];\n  listeners.push({ type: type, handler: handler });\n  this.screen.on(type, handler);\n};\n\nElement.prototype.onceScreenEvent = function(type, handler) {\n  var listeners = this._slisteners = this._slisteners || [];\n  var entry = { type: type, handler: handler };\n  listeners.push(entry);\n  this.screen.once(type, function() {\n    var i = listeners.indexOf(entry);\n    if (~i) listeners.splice(i, 1);\n    return handler.apply(this, arguments);\n  });\n};\n\nElement.prototype.removeScreenEvent = function(type, handler) {\n  var listeners = this._slisteners = this._slisteners || [];\n  for (var i = 0; i < listeners.length; i++) {\n    var listener = listeners[i];\n    if (listener.type === type && listener.handler === handler) {\n      listeners.splice(i, 1);\n      if (this._slisteners.length === 0) {\n        delete this._slisteners;\n      }\n      break;\n    }\n  }\n  this.screen.removeListener(type, handler);\n};\n\nElement.prototype.free = function() {\n  var listeners = this._slisteners = this._slisteners || [];\n  for (var i = 0; i < listeners.length; i++) {\n    var listener = listeners[i];\n    this.screen.removeListener(listener.type, listener.handler);\n  }\n  delete this._slisteners;\n};\n\nElement.prototype.hide = function() {\n  if (this.hidden) return;\n  this.clearPos();\n  this.hidden = true;\n  this.emit('hide');\n  if (this.screen.focused === this) {\n    this.screen.rewindFocus();\n  }\n};\n\nElement.prototype.show = function() {\n  if (!this.hidden) return;\n  this.hidden = false;\n  this.emit('show');\n};\n\nElement.prototype.toggle = function() {\n  return this.hidden ? this.show() : this.hide();\n};\n\nElement.prototype.focus = function() {\n  return this.screen.focused = this;\n};\n\nElement.prototype.setContent = function(content, noClear, noTags) {\n  if (!noClear) this.clearPos();\n  this.content = content || '';\n  this.parseContent(noTags);\n  this.emit('set content');\n};\n\nElement.prototype.getContent = function() {\n  if (!this._clines) return '';\n  return this._clines.fake.join('\\n');\n};\n\nElement.prototype.setText = function(content, noClear) {\n  content = content || '';\n  content = content.replace(/\\x1b\\[[\\d;]*m/g, '');\n  return this.setContent(content, noClear, true);\n};\n\nElement.prototype.getText = function() {\n  return this.getContent().replace(/\\x1b\\[[\\d;]*m/g, '');\n};\n\nElement.prototype.parseContent = function(noTags) {\n  if (this.detached) return false;\n\n  var width = this.width - this.iwidth;\n  if (this._clines == null\n      || this._clines.width !== width\n      || this._clines.content !== this.content) {\n    var content = this.content;\n\n    content = content\n      .replace(/[\\x00-\\x08\\x0b-\\x0c\\x0e-\\x1a\\x1c-\\x1f\\x7f]/g, '')\n      .replace(/\\x1b(?!\\[[\\d;]*m)/g, '')\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, this.screen.tabc);\n\n    if (this.screen.fullUnicode) {\n      // double-width chars will eat the next char after render. create a\n      // blank character after it so it doesn't eat the real next char.\n      content = content.replace(unicode.chars.all, '$1\\x03');\n      // iTerm2 cannot render combining characters properly.\n      if (this.screen.program.isiTerm2) {\n        content = content.replace(unicode.chars.combining, '');\n      }\n    } else {\n      // no double-width: replace them with question-marks.\n      content = content.replace(unicode.chars.all, '??');\n      // delete combining characters since they're 0-width anyway.\n      // NOTE: We could drop this, the non-surrogates would get changed to ? by\n      // the unicode filter, and surrogates changed to ? by the surrogate\n      // regex. however, the user might expect them to be 0-width.\n      // NOTE: Might be better for performance to drop!\n      content = content.replace(unicode.chars.combining, '');\n      // no surrogate pairs: replace them with question-marks.\n      content = content.replace(unicode.chars.surrogate, '?');\n      // XXX Deduplicate code here:\n      // content = helpers.dropUnicode(content);\n    }\n\n    if (!noTags) {\n      content = this._parseTags(content);\n    }\n\n    this._clines = this._wrapContent(content, width);\n    this._clines.width = width;\n    this._clines.content = this.content;\n    this._clines.attr = this._parseAttr(this._clines);\n    this._clines.ci = [];\n    this._clines.reduce(function(total, line) {\n      this._clines.ci.push(total);\n      return total + line.length + 1;\n    }.bind(this), 0);\n\n    this._pcontent = this._clines.join('\\n');\n    this.emit('parsed content');\n\n    return true;\n  }\n\n  // Need to calculate this every time because the default fg/bg may change.\n  this._clines.attr = this._parseAttr(this._clines) || this._clines.attr;\n\n  return false;\n};\n\n// Convert `{red-fg}foo{/red-fg}` to `\\x1b[31mfoo\\x1b[39m`.\nElement.prototype._parseTags = function(text) {\n  if (!this.parseTags) return text;\n  if (!/{\\/?[\\w\\-,;!#]*}/.test(text)) return text;\n\n  var program = this.screen.program\n    , out = ''\n    , state\n    , bg = []\n    , fg = []\n    , flag = []\n    , cap\n    , slash\n    , param\n    , attr\n    , esc;\n\n  for (;;) {\n    if (!esc && (cap = /^{escape}/.exec(text))) {\n      text = text.substring(cap[0].length);\n      esc = true;\n      continue;\n    }\n\n    if (esc && (cap = /^([\\s\\S]+?){\\/escape}/.exec(text))) {\n      text = text.substring(cap[0].length);\n      out += cap[1];\n      esc = false;\n      continue;\n    }\n\n    if (esc) {\n      // throw new Error('Unterminated escape tag.');\n      out += text;\n      break;\n    }\n\n    if (cap = /^{(\\/?)([\\w\\-,;!#]*)}/.exec(text)) {\n      text = text.substring(cap[0].length);\n      slash = cap[1] === '/';\n      param = cap[2].replace(/-/g, ' ');\n\n      if (param === 'open') {\n        out += '{';\n        continue;\n      } else if (param === 'close') {\n        out += '}';\n        continue;\n      }\n\n      if (param.slice(-3) === ' bg') state = bg;\n      else if (param.slice(-3) === ' fg') state = fg;\n      else state = flag;\n\n      if (slash) {\n        if (!param) {\n          out += program._attr('normal');\n          bg.length = 0;\n          fg.length = 0;\n          flag.length = 0;\n        } else {\n          attr = program._attr(param, false);\n          if (attr == null) {\n            out += cap[0];\n          } else {\n            // if (param !== state[state.length - 1]) {\n            //   throw new Error('Misnested tags.');\n            // }\n            state.pop();\n            if (state.length) {\n              out += program._attr(state[state.length - 1]);\n            } else {\n              out += attr;\n            }\n          }\n        }\n      } else {\n        if (!param) {\n          out += cap[0];\n        } else {\n          attr = program._attr(param);\n          if (attr == null) {\n            out += cap[0];\n          } else {\n            state.push(param);\n            out += attr;\n          }\n        }\n      }\n\n      continue;\n    }\n\n    if (cap = /^[\\s\\S]+?(?={\\/?[\\w\\-,;!#]*})/.exec(text)) {\n      text = text.substring(cap[0].length);\n      out += cap[0];\n      continue;\n    }\n\n    out += text;\n    break;\n  }\n\n  return out;\n};\n\nElement.prototype._parseAttr = function(lines) {\n  var dattr = this.sattr(this.style)\n    , attr = dattr\n    , attrs = []\n    , line\n    , i\n    , j\n    , c;\n\n  if (lines[0].attr === attr) {\n    return;\n  }\n\n  for (j = 0; j < lines.length; j++) {\n    line = lines[j];\n    attrs[j] = attr;\n    for (i = 0; i < line.length; i++) {\n      if (line[i] === '\\x1b') {\n        if (c = /^\\x1b\\[[\\d;]*m/.exec(line.substring(i))) {\n          attr = this.screen.attrCode(c[0], attr, dattr);\n          i += c[0].length - 1;\n        }\n      }\n    }\n  }\n\n  return attrs;\n};\n\nElement.prototype._align = function(line, width, align) {\n  if (!align) return line;\n  //if (!align && !~line.indexOf('{|}')) return line;\n\n  var cline = line.replace(/\\x1b\\[[\\d;]*m/g, '')\n    , len = cline.length\n    , s = width - len;\n\n  if (this.shrink) {\n    s = 0;\n  }\n\n  if (len === 0) return line;\n  if (s < 0) return line;\n\n  if (align === 'center') {\n    s = Array(((s / 2) | 0) + 1).join(' ');\n    return s + line + s;\n  } else if (align === 'right') {\n    s = Array(s + 1).join(' ');\n    return s + line;\n  } else if (this.parseTags && ~line.indexOf('{|}')) {\n    var parts = line.split('{|}');\n    var cparts = cline.split('{|}');\n    s = Math.max(width - cparts[0].length - cparts[1].length, 0);\n    s = Array(s + 1).join(' ');\n    return parts[0] + s + parts[1];\n  }\n\n  return line;\n};\n\nElement.prototype._wrapContent = function(content, width) {\n  var tags = this.parseTags\n    , state = this.align\n    , wrap = this.wrap\n    , margin = 0\n    , rtof = []\n    , ftor = []\n    , out = []\n    , no = 0\n    , line\n    , align\n    , cap\n    , total\n    , i\n    , part\n    , j\n    , lines\n    , rest;\n\n  lines = content.split('\\n');\n\n  if (!content) {\n    out.push(content);\n    out.rtof = [0];\n    out.ftor = [[0]];\n    out.fake = lines;\n    out.real = out;\n    out.mwidth = 0;\n    return out;\n  }\n\n  if (this.scrollbar) margin++;\n  if (this.type === 'textarea') margin++;\n  if (width > margin) width -= margin;\n\nmain:\n  for (; no < lines.length; no++) {\n    line = lines[no];\n    align = state;\n\n    ftor.push([]);\n\n    // Handle alignment tags.\n    if (tags) {\n      if (cap = /^{(left|center|right)}/.exec(line)) {\n        line = line.substring(cap[0].length);\n        align = state = cap[1] !== 'left'\n          ? cap[1]\n          : null;\n      }\n      if (cap = /{\\/(left|center|right)}$/.exec(line)) {\n        line = line.slice(0, -cap[0].length);\n        //state = null;\n        state = this.align;\n      }\n    }\n\n    // If the string is apparently too long, wrap it.\n    while (line.length > width) {\n      // Measure the real width of the string.\n      for (i = 0, total = 0; i < line.length; i++) {\n        while (line[i] === '\\x1b') {\n          while (line[i] && line[i++] !== 'm');\n        }\n        if (!line[i]) break;\n        if (++total === width) {\n          // If we're not wrapping the text, we have to finish up the rest of\n          // the control sequences before cutting off the line.\n          i++;\n          if (!wrap) {\n            rest = line.substring(i).match(/\\x1b\\[[^m]*m/g);\n            rest = rest ? rest.join('') : '';\n            out.push(this._align(line.substring(0, i) + rest, width, align));\n            ftor[no].push(out.length - 1);\n            rtof.push(no);\n            continue main;\n          }\n          if (!this.screen.fullUnicode) {\n            // Try to find a space to break on.\n            if (i !== line.length) {\n              j = i;\n              while (j > i - 10 && j > 0 && line[--j] !== ' ');\n              if (line[j] === ' ') i = j + 1;\n            }\n          } else {\n            // Try to find a character to break on.\n            if (i !== line.length) {\n              // <XXX>\n              // Compensate for surrogate length\n              // counts on wrapping (experimental):\n              // NOTE: Could optimize this by putting\n              // it in the parent for loop.\n              if (unicode.isSurrogate(line, i)) i--;\n              for (var s = 0, n = 0; n < i; n++) {\n                if (unicode.isSurrogate(line, n)) s++, n++;\n              }\n              i += s;\n              // </XXX>\n              j = i;\n              // Break _past_ space.\n              // Break _past_ double-width chars.\n              // Break _past_ surrogate pairs.\n              // Break _past_ combining chars.\n              while (j > i - 10 && j > 0) {\n                j--;\n                if (line[j] === ' '\n                    || line[j] === '\\x03'\n                    || (unicode.isSurrogate(line, j - 1) && line[j + 1] !== '\\x03')\n                    || unicode.isCombining(line, j)) {\n                  break;\n                }\n              }\n              if (line[j] === ' '\n                  || line[j] === '\\x03'\n                  || (unicode.isSurrogate(line, j - 1) && line[j + 1] !== '\\x03')\n                  || unicode.isCombining(line, j)) {\n                i = j + 1;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      part = line.substring(0, i);\n      line = line.substring(i);\n\n      out.push(this._align(part, width, align));\n      ftor[no].push(out.length - 1);\n      rtof.push(no);\n\n      // Make sure we didn't wrap the line to the very end, otherwise\n      // we get a pointless empty line after a newline.\n      if (line === '') continue main;\n\n      // If only an escape code got cut off, at it to `part`.\n      if (/^(?:\\x1b[\\[\\d;]*m)+$/.test(line)) {\n        out[out.length - 1] += line;\n        continue main;\n      }\n    }\n\n    out.push(this._align(line, width, align));\n    ftor[no].push(out.length - 1);\n    rtof.push(no);\n  }\n\n  out.rtof = rtof;\n  out.ftor = ftor;\n  out.fake = lines;\n  out.real = out;\n\n  out.mwidth = out.reduce(function(current, line) {\n    line = line.replace(/\\x1b\\[[\\d;]*m/g, '');\n    return line.length > current\n      ? line.length\n      : current;\n  }, 0);\n\n  return out;\n};\n\nElement.prototype.__defineGetter__('visible', function() {\n  var el = this;\n  do {\n    if (el.detached) return false;\n    if (el.hidden) return false;\n    // if (!el.lpos) return false;\n    // if (el.position.width === 0 || el.position.height === 0) return false;\n  } while (el = el.parent);\n  return true;\n});\n\nElement.prototype.__defineGetter__('_detached', function() {\n  var el = this;\n  do {\n    if (el.type === 'screen') return false;\n    if (!el.parent) return true;\n  } while (el = el.parent);\n  return false;\n});\n\nElement.prototype.enableMouse = function() {\n  this.screen._listenMouse(this);\n};\n\nElement.prototype.enableKeys = function() {\n  this.screen._listenKeys(this);\n};\n\nElement.prototype.enableInput = function() {\n  this.screen._listenMouse(this);\n  this.screen._listenKeys(this);\n};\n\nElement.prototype.__defineGetter__('draggable', function() {\n  return this._draggable === true;\n});\n\nElement.prototype.__defineSetter__('draggable', function(draggable) {\n  return draggable ? this.enableDrag(draggable) : this.disableDrag();\n});\n\nElement.prototype.enableDrag = function(verify) {\n  var self = this;\n\n  if (this._draggable) return true;\n\n  if (typeof verify !== 'function') {\n    verify = function() { return true; };\n  }\n\n  this.enableMouse();\n\n  this.on('mousedown', this._dragMD = function(data) {\n    if (self.screen._dragging) return;\n    if (!verify(data)) return;\n    self.screen._dragging = self;\n    self._drag = {\n      x: data.x - self.aleft,\n      y: data.y - self.atop\n    };\n    self.setFront();\n  });\n\n  this.onScreenEvent('mouse', this._dragM = function(data) {\n    if (self.screen._dragging !== self) return;\n\n    if (data.action !== 'mousedown' && data.action !== 'mousemove') {\n      delete self.screen._dragging;\n      delete self._drag;\n      return;\n    }\n\n    // This can happen in edge cases where the user is\n    // already dragging and element when it is detached.\n    if (!self.parent) return;\n\n    var ox = self._drag.x\n      , oy = self._drag.y\n      , px = self.parent.aleft\n      , py = self.parent.atop\n      , x = data.x - px - ox\n      , y = data.y - py - oy;\n\n    if (self.position.right != null) {\n      if (self.position.left != null) {\n        self.width = '100%-' + (self.parent.width - self.width);\n      }\n      self.position.right = null;\n    }\n\n    if (self.position.bottom != null) {\n      if (self.position.top != null) {\n        self.height = '100%-' + (self.parent.height - self.height);\n      }\n      self.position.bottom = null;\n    }\n\n    self.rleft = x;\n    self.rtop = y;\n\n    self.screen.render();\n  });\n\n  return this._draggable = true;\n};\n\nElement.prototype.disableDrag = function() {\n  if (!this._draggable) return false;\n  delete this.screen._dragging;\n  delete this._drag;\n  this.removeListener('mousedown', this._dragMD);\n  this.removeScreenEvent('mouse', this._dragM);\n  return this._draggable = false;\n};\n\nElement.prototype.key = function() {\n  return this.screen.program.key.apply(this, arguments);\n};\n\nElement.prototype.onceKey = function() {\n  return this.screen.program.onceKey.apply(this, arguments);\n};\n\nElement.prototype.unkey =\nElement.prototype.removeKey = function() {\n  return this.screen.program.unkey.apply(this, arguments);\n};\n\nElement.prototype.setIndex = function(index) {\n  if (!this.parent) return;\n\n  if (index < 0) {\n    index = this.parent.children.length + index;\n  }\n\n  index = Math.max(index, 0);\n  index = Math.min(index, this.parent.children.length - 1);\n\n  var i = this.parent.children.indexOf(this);\n  if (!~i) return;\n\n  var item = this.parent.children.splice(i, 1)[0];\n  this.parent.children.splice(index, 0, item);\n};\n\nElement.prototype.setFront = function() {\n  return this.setIndex(-1);\n};\n\nElement.prototype.setBack = function() {\n  return this.setIndex(0);\n};\n\nElement.prototype.clearPos = function(get, override) {\n  if (this.detached) return;\n  var lpos = this._getCoords(get);\n  if (!lpos) return;\n  this.screen.clearRegion(\n    lpos.xi, lpos.xl,\n    lpos.yi, lpos.yl,\n    override);\n};\n\nElement.prototype.setLabel = function(options) {\n  var self = this;\n  var Box = require('./box');\n\n  if (typeof options === 'string') {\n    options = { text: options };\n  }\n\n  if (this._label) {\n    this._label.setContent(options.text);\n    if (options.side !== 'right') {\n      this._label.rleft = 2 + (this.border ? -1 : 0);\n      this._label.position.right = undefined;\n      if (!this.screen.autoPadding) {\n        this._label.rleft = 2;\n      }\n    } else {\n      this._label.rright = 2 + (this.border ? -1 : 0);\n      this._label.position.left = undefined;\n      if (!this.screen.autoPadding) {\n        this._label.rright = 2;\n      }\n    }\n    return;\n  }\n\n  this._label = new Box({\n    screen: this.screen,\n    parent: this,\n    content: options.text,\n    top: -this.itop,\n    tags: this.parseTags,\n    shrink: true,\n    style: this.style.label\n  });\n\n  if (options.side !== 'right') {\n    this._label.rleft = 2 - this.ileft;\n  } else {\n    this._label.rright = 2 - this.iright;\n  }\n\n  this._label._isLabel = true;\n\n  if (!this.screen.autoPadding) {\n    if (options.side !== 'right') {\n      this._label.rleft = 2;\n    } else {\n      this._label.rright = 2;\n    }\n    this._label.rtop = 0;\n  }\n\n  var reposition = function() {\n    self._label.rtop = (self.childBase || 0) - self.itop;\n    if (!self.screen.autoPadding) {\n      self._label.rtop = (self.childBase || 0);\n    }\n    self.screen.render();\n  };\n\n  this.on('scroll', this._labelScroll = function() {\n    reposition();\n  });\n\n  this.on('resize', this._labelResize = function() {\n    nextTick(function() {\n      reposition();\n    });\n  });\n};\n\nElement.prototype.removeLabel = function() {\n  if (!this._label) return;\n  this.removeListener('scroll', this._labelScroll);\n  this.removeListener('resize', this._labelResize);\n  this._label.detach();\n  delete this._labelScroll;\n  delete this._labelResize;\n  delete this._label;\n};\n\nElement.prototype.setHover = function(options) {\n  if (typeof options === 'string') {\n    options = { text: options };\n  }\n\n  this._hoverOptions = options;\n  this.enableMouse();\n  this.screen._initHover();\n};\n\nElement.prototype.removeHover = function() {\n  delete this._hoverOptions;\n  if (!this.screen._hoverText || this.screen._hoverText.detached) return;\n  this.screen._hoverText.detach();\n  this.screen.render();\n};\n\n/**\n * Positioning\n */\n\n// The below methods are a bit confusing: basically\n// whenever Box.render is called `lpos` gets set on\n// the element, an object containing the rendered\n// coordinates. Since these don't update if the\n// element is moved somehow, they're unreliable in\n// that situation. However, if we can guarantee that\n// lpos is good and up to date, it can be more\n// accurate than the calculated positions below.\n// In this case, if the element is being rendered,\n// it's guaranteed that the parent will have been\n// rendered first, in which case we can use the\n// parant's lpos instead of recalculating it's\n// position (since that might be wrong because\n// it doesn't handle content shrinkage).\n\nElement.prototype._getPos = function() {\n  var pos = this.lpos;\n\n  assert.ok(pos);\n\n  if (pos.aleft != null) return pos;\n\n  pos.aleft = pos.xi;\n  pos.atop = pos.yi;\n  pos.aright = this.screen.cols - pos.xl;\n  pos.abottom = this.screen.rows - pos.yl;\n  pos.width = pos.xl - pos.xi;\n  pos.height = pos.yl - pos.yi;\n\n  return pos;\n};\n\n/**\n * Position Getters\n */\n\nElement.prototype._getWidth = function(get) {\n  var parent = get ? this.parent._getPos() : this.parent\n    , width = this.position.width\n    , left\n    , expr;\n\n  if (typeof width === 'string') {\n    if (width === 'half') width = '50%';\n    expr = width.split(/(?=\\+|-)/);\n    width = expr[0];\n    width = +width.slice(0, -1) / 100;\n    width = parent.width * width | 0;\n    width += +(expr[1] || 0);\n    return width;\n  }\n\n  // This is for if the element is being streched or shrunken.\n  // Although the width for shrunken elements is calculated\n  // in the render function, it may be calculated based on\n  // the content width, and the content width is initially\n  // decided by the width the element, so it needs to be\n  // calculated here.\n  if (width == null) {\n    left = this.position.left || 0;\n    if (typeof left === 'string') {\n      if (left === 'center') left = '50%';\n      expr = left.split(/(?=\\+|-)/);\n      left = expr[0];\n      left = +left.slice(0, -1) / 100;\n      left = parent.width * left | 0;\n      left += +(expr[1] || 0);\n    }\n    width = parent.width - (this.position.right || 0) - left;\n    if (this.screen.autoPadding) {\n      if ((this.position.left != null || this.position.right == null)\n          && this.position.left !== 'center') {\n        width -= this.parent.ileft;\n      }\n      width -= this.parent.iright;\n    }\n  }\n\n  return width;\n};\n\nElement.prototype.__defineGetter__('width', function() {\n  return this._getWidth(false);\n});\n\nElement.prototype._getHeight = function(get) {\n  var parent = get ? this.parent._getPos() : this.parent\n    , height = this.position.height\n    , top\n    , expr;\n\n  if (typeof height === 'string') {\n    if (height === 'half') height = '50%';\n    expr = height.split(/(?=\\+|-)/);\n    height = expr[0];\n    height = +height.slice(0, -1) / 100;\n    height = parent.height * height | 0;\n    height += +(expr[1] || 0);\n    return height;\n  }\n\n  // This is for if the element is being streched or shrunken.\n  // Although the width for shrunken elements is calculated\n  // in the render function, it may be calculated based on\n  // the content width, and the content width is initially\n  // decided by the width the element, so it needs to be\n  // calculated here.\n  if (height == null) {\n    top = this.position.top || 0;\n    if (typeof top === 'string') {\n      if (top === 'center') top = '50%';\n      expr = top.split(/(?=\\+|-)/);\n      top = expr[0];\n      top = +top.slice(0, -1) / 100;\n      top = parent.height * top | 0;\n      top += +(expr[1] || 0);\n    }\n    height = parent.height - (this.position.bottom || 0) - top;\n    if (this.screen.autoPadding) {\n      if ((this.position.top != null\n          || this.position.bottom == null)\n          && this.position.top !== 'center') {\n        height -= this.parent.itop;\n      }\n      height -= this.parent.ibottom;\n    }\n  }\n\n  return height;\n};\n\nElement.prototype.__defineGetter__('height', function() {\n  return this._getHeight(false);\n});\n\nElement.prototype._getLeft = function(get) {\n  var parent = get ? this.parent._getPos() : this.parent\n    , left = this.position.left || 0\n    , expr;\n\n  if (typeof left === 'string') {\n    if (left === 'center') left = '50%';\n    expr = left.split(/(?=\\+|-)/);\n    left = expr[0];\n    left = +left.slice(0, -1) / 100;\n    left = parent.width * left | 0;\n    left += +(expr[1] || 0);\n    if (this.position.left === 'center') {\n      left -= this._getWidth(get) / 2 | 0;\n    }\n  }\n\n  if (this.position.left == null && this.position.right != null) {\n    return this.screen.cols - this._getWidth(get) - this._getRight(get);\n  }\n\n  if (this.screen.autoPadding) {\n    if ((this.position.left != null\n        || this.position.right == null)\n        && this.position.left !== 'center') {\n      left += this.parent.ileft;\n    }\n  }\n\n  return (parent.aleft || 0) + left;\n};\n\nElement.prototype.__defineGetter__('aleft', function() {\n  return this._getLeft(false);\n});\n\nElement.prototype._getRight = function(get) {\n  var parent = get ? this.parent._getPos() : this.parent\n    , right;\n\n  if (this.position.right == null && this.position.left != null) {\n    right = this.screen.cols - (this._getLeft(get) + this._getWidth(get));\n    if (this.screen.autoPadding) {\n      right += this.parent.iright;\n    }\n    return right;\n  }\n\n  right = (parent.aright || 0) + (this.position.right || 0);\n\n  if (this.screen.autoPadding) {\n    right += this.parent.iright;\n  }\n\n  return right;\n};\n\nElement.prototype.__defineGetter__('aright', function() {\n  return this._getRight(false);\n});\n\nElement.prototype._getTop = function(get) {\n  var parent = get ? this.parent._getPos() : this.parent\n    , top = this.position.top || 0\n    , expr;\n\n  if (typeof top === 'string') {\n    if (top === 'center') top = '50%';\n    expr = top.split(/(?=\\+|-)/);\n    top = expr[0];\n    top = +top.slice(0, -1) / 100;\n    top = parent.height * top | 0;\n    top += +(expr[1] || 0);\n    if (this.position.top === 'center') {\n      top -= this._getHeight(get) / 2 | 0;\n    }\n  }\n\n  if (this.position.top == null && this.position.bottom != null) {\n    return this.screen.rows - this._getHeight(get) - this._getBottom(get);\n  }\n\n  if (this.screen.autoPadding) {\n    if ((this.position.top != null\n        || this.position.bottom == null)\n        && this.position.top !== 'center') {\n      top += this.parent.itop;\n    }\n  }\n\n  return (parent.atop || 0) + top;\n};\n\nElement.prototype.__defineGetter__('atop', function() {\n  return this._getTop(false);\n});\n\nElement.prototype._getBottom = function(get) {\n  var parent = get ? this.parent._getPos() : this.parent\n    , bottom;\n\n  if (this.position.bottom == null && this.position.top != null) {\n    bottom = this.screen.rows - (this._getTop(get) + this._getHeight(get));\n    if (this.screen.autoPadding) {\n      bottom += this.parent.ibottom;\n    }\n    return bottom;\n  }\n\n  bottom = (parent.abottom || 0) + (this.position.bottom || 0);\n\n  if (this.screen.autoPadding) {\n    bottom += this.parent.ibottom;\n  }\n\n  return bottom;\n};\n\nElement.prototype.__defineGetter__('abottom', function() {\n  return this._getBottom(false);\n});\n\nElement.prototype.__defineGetter__('rleft', function() {\n  return this.aleft - this.parent.aleft;\n});\n\nElement.prototype.__defineGetter__('rright', function() {\n  return this.aright - this.parent.aright;\n});\n\nElement.prototype.__defineGetter__('rtop', function() {\n  return this.atop - this.parent.atop;\n});\n\nElement.prototype.__defineGetter__('rbottom', function() {\n  return this.abottom - this.parent.abottom;\n});\n\n/**\n * Position Setters\n */\n\n// NOTE:\n// For aright, abottom, right, and bottom:\n// If position.bottom is null, we could simply set top instead.\n// But it wouldn't replicate bottom behavior appropriately if\n// the parent was resized, etc.\nElement.prototype.__defineSetter__('width', function(val) {\n  if (this.position.width === val) return;\n  if (/^\\d+$/.test(val)) val = +val;\n  this.emit('resize');\n  this.clearPos();\n  return this.position.width = val;\n});\n\nElement.prototype.__defineSetter__('height', function(val) {\n  if (this.position.height === val) return;\n  if (/^\\d+$/.test(val)) val = +val;\n  this.emit('resize');\n  this.clearPos();\n  return this.position.height = val;\n});\n\nElement.prototype.__defineSetter__('aleft', function(val) {\n  var expr;\n  if (typeof val === 'string') {\n    if (val === 'center') {\n      val = this.screen.width / 2 | 0;\n      val -= this.width / 2 | 0;\n    } else {\n      expr = val.split(/(?=\\+|-)/);\n      val = expr[0];\n      val = +val.slice(0, -1) / 100;\n      val = this.screen.width * val | 0;\n      val += +(expr[1] || 0);\n    }\n  }\n  val -= this.parent.aleft;\n  if (this.position.left === val) return;\n  this.emit('move');\n  this.clearPos();\n  return this.position.left = val;\n});\n\nElement.prototype.__defineSetter__('aright', function(val) {\n  val -= this.parent.aright;\n  if (this.position.right === val) return;\n  this.emit('move');\n  this.clearPos();\n  return this.position.right = val;\n});\n\nElement.prototype.__defineSetter__('atop', function(val) {\n  var expr;\n  if (typeof val === 'string') {\n    if (val === 'center') {\n      val = this.screen.height / 2 | 0;\n      val -= this.height / 2 | 0;\n    } else {\n      expr = val.split(/(?=\\+|-)/);\n      val = expr[0];\n      val = +val.slice(0, -1) / 100;\n      val = this.screen.height * val | 0;\n      val += +(expr[1] || 0);\n    }\n  }\n  val -= this.parent.atop;\n  if (this.position.top === val) return;\n  this.emit('move');\n  this.clearPos();\n  return this.position.top = val;\n});\n\nElement.prototype.__defineSetter__('abottom', function(val) {\n  val -= this.parent.abottom;\n  if (this.position.bottom === val) return;\n  this.emit('move');\n  this.clearPos();\n  return this.position.bottom = val;\n});\n\nElement.prototype.__defineSetter__('rleft', function(val) {\n  if (this.position.left === val) return;\n  if (/^\\d+$/.test(val)) val = +val;\n  this.emit('move');\n  this.clearPos();\n  return this.position.left = val;\n});\n\nElement.prototype.__defineSetter__('rright', function(val) {\n  if (this.position.right === val) return;\n  this.emit('move');\n  this.clearPos();\n  return this.position.right = val;\n});\n\nElement.prototype.__defineSetter__('rtop', function(val) {\n  if (this.position.top === val) return;\n  if (/^\\d+$/.test(val)) val = +val;\n  this.emit('move');\n  this.clearPos();\n  return this.position.top = val;\n});\n\nElement.prototype.__defineSetter__('rbottom', function(val) {\n  if (this.position.bottom === val) return;\n  this.emit('move');\n  this.clearPos();\n  return this.position.bottom = val;\n});\n\nElement.prototype.__defineGetter__('ileft', function() {\n  return (this.border ? 1 : 0) + this.padding.left;\n  // return (this.border && this.border.left ? 1 : 0) + this.padding.left;\n});\n\nElement.prototype.__defineGetter__('itop', function() {\n  return (this.border ? 1 : 0) + this.padding.top;\n  // return (this.border && this.border.top ? 1 : 0) + this.padding.top;\n});\n\nElement.prototype.__defineGetter__('iright', function() {\n  return (this.border ? 1 : 0) + this.padding.right;\n  // return (this.border && this.border.right ? 1 : 0) + this.padding.right;\n});\n\nElement.prototype.__defineGetter__('ibottom', function() {\n  return (this.border ? 1 : 0) + this.padding.bottom;\n  // return (this.border && this.border.bottom ? 1 : 0) + this.padding.bottom;\n});\n\nElement.prototype.__defineGetter__('iwidth', function() {\n  // return (this.border\n  //   ? ((this.border.left ? 1 : 0) + (this.border.right ? 1 : 0)) : 0)\n  //   + this.padding.left + this.padding.right;\n  return (this.border ? 2 : 0) + this.padding.left + this.padding.right;\n});\n\nElement.prototype.__defineGetter__('iheight', function() {\n  // return (this.border\n  //   ? ((this.border.top ? 1 : 0) + (this.border.bottom ? 1 : 0)) : 0)\n  //   + this.padding.top + this.padding.bottom;\n  return (this.border ? 2 : 0) + this.padding.top + this.padding.bottom;\n});\n\nElement.prototype.__defineGetter__('tpadding', function() {\n  return this.padding.left + this.padding.top\n    + this.padding.right + this.padding.bottom;\n});\n\n/**\n * Relative coordinates as default properties\n */\n\nElement.prototype.__defineGetter__('left', function() {\n  return this.rleft;\n});\n\nElement.prototype.__defineGetter__('right', function() {\n  return this.rright;\n});\n\nElement.prototype.__defineGetter__('top', function() {\n  return this.rtop;\n});\n\nElement.prototype.__defineGetter__('bottom', function() {\n  return this.rbottom;\n});\n\nElement.prototype.__defineSetter__('left', function(val) {\n  return this.rleft = val;\n});\n\nElement.prototype.__defineSetter__('right', function(val) {\n  return this.rright = val;\n});\n\nElement.prototype.__defineSetter__('top', function(val) {\n  return this.rtop = val;\n});\n\nElement.prototype.__defineSetter__('bottom', function(val) {\n  return this.rbottom = val;\n});\n\n/**\n * Rendering - here be dragons\n */\n\nElement.prototype._getShrinkBox = function(xi, xl, yi, yl, get) {\n  if (!this.children.length) {\n    return { xi: xi, xl: xi + 1, yi: yi, yl: yi + 1 };\n  }\n\n  var i, el, ret, mxi = xi, mxl = xi + 1, myi = yi, myl = yi + 1;\n\n  // This is a chicken and egg problem. We need to determine how the children\n  // will render in order to determine how this element renders, but it in\n  // order to figure out how the children will render, they need to know\n  // exactly how their parent renders, so, we can give them what we have so\n  // far.\n  var _lpos;\n  if (get) {\n    _lpos = this.lpos;\n    this.lpos = { xi: xi, xl: xl, yi: yi, yl: yl };\n    //this.shrink = false;\n  }\n\n  for (i = 0; i < this.children.length; i++) {\n    el = this.children[i];\n\n    ret = el._getCoords(get);\n\n    // Or just (seemed to work, but probably not good):\n    // ret = el.lpos || this.lpos;\n\n    if (!ret) continue;\n\n    // Since the parent element is shrunk, and the child elements think it's\n    // going to take up as much space as possible, an element anchored to the\n    // right or bottom will inadvertantly make the parent's shrunken size as\n    // large as possible. So, we can just use the height and/or width the of\n    // element.\n    // if (get) {\n    if (el.position.left == null && el.position.right != null) {\n      ret.xl = xi + (ret.xl - ret.xi);\n      ret.xi = xi;\n      if (this.screen.autoPadding) {\n        // Maybe just do this no matter what.\n        ret.xl += this.ileft;\n        ret.xi += this.ileft;\n      }\n    }\n    if (el.position.top == null && el.position.bottom != null) {\n      ret.yl = yi + (ret.yl - ret.yi);\n      ret.yi = yi;\n      if (this.screen.autoPadding) {\n        // Maybe just do this no matter what.\n        ret.yl += this.itop;\n        ret.yi += this.itop;\n      }\n    }\n\n    if (ret.xi < mxi) mxi = ret.xi;\n    if (ret.xl > mxl) mxl = ret.xl;\n    if (ret.yi < myi) myi = ret.yi;\n    if (ret.yl > myl) myl = ret.yl;\n  }\n\n  if (get) {\n    this.lpos = _lpos;\n    //this.shrink = true;\n  }\n\n  if (this.position.width == null\n      && (this.position.left == null\n      || this.position.right == null)) {\n    if (this.position.left == null && this.position.right != null) {\n      xi = xl - (mxl - mxi);\n      if (!this.screen.autoPadding) {\n        xi -= this.padding.left + this.padding.right;\n      } else {\n        xi -= this.ileft;\n      }\n    } else {\n      xl = mxl;\n      if (!this.screen.autoPadding) {\n        xl += this.padding.left + this.padding.right;\n        // XXX Temporary workaround until we decide to make autoPadding default.\n        // See widget-listtable.js for an example of why this is necessary.\n        // XXX Maybe just to this for all this being that this would affect\n        // width shrunken normal shrunken lists as well.\n        // if (this._isList) {\n        if (this.type === 'list-table') {\n          xl -= this.padding.left + this.padding.right;\n          xl += this.iright;\n        }\n      } else {\n        //xl += this.padding.right;\n        xl += this.iright;\n      }\n    }\n  }\n\n  if (this.position.height == null\n      && (this.position.top == null\n      || this.position.bottom == null)\n      && (!this.scrollable || this._isList)) {\n    // NOTE: Lists get special treatment if they are shrunken - assume they\n    // want all list items showing. This is one case we can calculate the\n    // height based on items/boxes.\n    if (this._isList) {\n      myi = 0 - this.itop;\n      myl = this.items.length + this.ibottom;\n    }\n    if (this.position.top == null && this.position.bottom != null) {\n      yi = yl - (myl - myi);\n      if (!this.screen.autoPadding) {\n        yi -= this.padding.top + this.padding.bottom;\n      } else {\n        yi -= this.itop;\n      }\n    } else {\n      yl = myl;\n      if (!this.screen.autoPadding) {\n        yl += this.padding.top + this.padding.bottom;\n      } else {\n        yl += this.ibottom;\n      }\n    }\n  }\n\n  return { xi: xi, xl: xl, yi: yi, yl: yl };\n};\n\nElement.prototype._getShrinkContent = function(xi, xl, yi, yl) {\n  var h = this._clines.length\n    , w = this._clines.mwidth || 1;\n\n  if (this.position.width == null\n      && (this.position.left == null\n      || this.position.right == null)) {\n    if (this.position.left == null && this.position.right != null) {\n      xi = xl - w - this.iwidth;\n    } else {\n      xl = xi + w + this.iwidth;\n    }\n  }\n\n  if (this.position.height == null\n      && (this.position.top == null\n      || this.position.bottom == null)\n      && (!this.scrollable || this._isList)) {\n    if (this.position.top == null && this.position.bottom != null) {\n      yi = yl - h - this.iheight;\n    } else {\n      yl = yi + h + this.iheight;\n    }\n  }\n\n  return { xi: xi, xl: xl, yi: yi, yl: yl };\n};\n\nElement.prototype._getShrink = function(xi, xl, yi, yl, get) {\n  var shrinkBox = this._getShrinkBox(xi, xl, yi, yl, get)\n    , shrinkContent = this._getShrinkContent(xi, xl, yi, yl, get)\n    , xll = xl\n    , yll = yl;\n\n  // Figure out which one is bigger and use it.\n  if (shrinkBox.xl - shrinkBox.xi > shrinkContent.xl - shrinkContent.xi) {\n    xi = shrinkBox.xi;\n    xl = shrinkBox.xl;\n  } else {\n    xi = shrinkContent.xi;\n    xl = shrinkContent.xl;\n  }\n\n  if (shrinkBox.yl - shrinkBox.yi > shrinkContent.yl - shrinkContent.yi) {\n    yi = shrinkBox.yi;\n    yl = shrinkBox.yl;\n  } else {\n    yi = shrinkContent.yi;\n    yl = shrinkContent.yl;\n  }\n\n  // Recenter shrunken elements.\n  if (xl < xll && this.position.left === 'center') {\n    xll = (xll - xl) / 2 | 0;\n    xi += xll;\n    xl += xll;\n  }\n\n  if (yl < yll && this.position.top === 'center') {\n    yll = (yll - yl) / 2 | 0;\n    yi += yll;\n    yl += yll;\n  }\n\n  return { xi: xi, xl: xl, yi: yi, yl: yl };\n};\n\nElement.prototype._getCoords = function(get, noscroll) {\n  if (this.hidden) return;\n\n  // if (this.parent._rendering) {\n  //   get = true;\n  // }\n\n  var xi = this._getLeft(get)\n    , xl = xi + this._getWidth(get)\n    , yi = this._getTop(get)\n    , yl = yi + this._getHeight(get)\n    , base = this.childBase || 0\n    , el = this\n    , fixed = this.fixed\n    , coords\n    , v\n    , noleft\n    , noright\n    , notop\n    , nobot\n    , ppos\n    , b;\n\n  // Attempt to shrink the element base on the\n  // size of the content and child elements.\n  if (this.shrink) {\n    coords = this._getShrink(xi, xl, yi, yl, get);\n    xi = coords.xi, xl = coords.xl;\n    yi = coords.yi, yl = coords.yl;\n  }\n\n  // Find a scrollable ancestor if we have one.\n  while (el = el.parent) {\n    if (el.scrollable) {\n      if (fixed) {\n        fixed = false;\n        continue;\n      }\n      break;\n    }\n  }\n\n  // Check to make sure we're visible and\n  // inside of the visible scroll area.\n  // NOTE: Lists have a property where only\n  // the list items are obfuscated.\n\n  // Old way of doing things, this would not render right if a shrunken element\n  // with lots of boxes in it was within a scrollable element.\n  // See: $ node test/widget-shrink-fail.js\n  // var thisparent = this.parent;\n\n  var thisparent = el;\n  if (el && !noscroll) {\n    ppos = thisparent.lpos;\n\n    // The shrink option can cause a stack overflow\n    // by calling _getCoords on the child again.\n    // if (!get && !thisparent.shrink) {\n    //   ppos = thisparent._getCoords();\n    // }\n\n    if (!ppos) return;\n\n    // TODO: Figure out how to fix base (and cbase to only\n    // take into account the *parent's* padding.\n\n    yi -= ppos.base;\n    yl -= ppos.base;\n\n    b = thisparent.border ? 1 : 0;\n\n    // XXX\n    // Fixes non-`fixed` labels to work with scrolling (they're ON the border):\n    // if (this.position.left < 0\n    //     || this.position.right < 0\n    //     || this.position.top < 0\n    //     || this.position.bottom < 0) {\n    if (this._isLabel) {\n      b = 0;\n    }\n\n    if (yi < ppos.yi + b) {\n      if (yl - 1 < ppos.yi + b) {\n        // Is above.\n        return;\n      } else {\n        // Is partially covered above.\n        notop = true;\n        v = ppos.yi - yi;\n        if (this.border) v--;\n        if (thisparent.border) v++;\n        base += v;\n        yi += v;\n      }\n    } else if (yl > ppos.yl - b) {\n      if (yi > ppos.yl - 1 - b) {\n        // Is below.\n        return;\n      } else {\n        // Is partially covered below.\n        nobot = true;\n        v = yl - ppos.yl;\n        if (this.border) v--;\n        if (thisparent.border) v++;\n        yl -= v;\n      }\n    }\n\n    // Shouldn't be necessary.\n    // assert.ok(yi < yl);\n    if (yi >= yl) return;\n\n    // Could allow overlapping stuff in scrolling elements\n    // if we cleared the pending buffer before every draw.\n    if (xi < el.lpos.xi) {\n      xi = el.lpos.xi;\n      noleft = true;\n      if (this.border) xi--;\n      if (thisparent.border) xi++;\n    }\n    if (xl > el.lpos.xl) {\n      xl = el.lpos.xl;\n      noright = true;\n      if (this.border) xl++;\n      if (thisparent.border) xl--;\n    }\n    //if (xi > xl) return;\n    if (xi >= xl) return;\n  }\n\n  if (this.noOverflow && this.parent.lpos) {\n    if (xi < this.parent.lpos.xi + this.parent.ileft) {\n      xi = this.parent.lpos.xi + this.parent.ileft;\n    }\n    if (xl > this.parent.lpos.xl - this.parent.iright) {\n      xl = this.parent.lpos.xl - this.parent.iright;\n    }\n    if (yi < this.parent.lpos.yi + this.parent.itop) {\n      yi = this.parent.lpos.yi + this.parent.itop;\n    }\n    if (yl > this.parent.lpos.yl - this.parent.ibottom) {\n      yl = this.parent.lpos.yl - this.parent.ibottom;\n    }\n  }\n\n  // if (this.parent.lpos) {\n  //   this.parent.lpos._scrollBottom = Math.max(\n  //     this.parent.lpos._scrollBottom, yl);\n  // }\n\n  return {\n    xi: xi,\n    xl: xl,\n    yi: yi,\n    yl: yl,\n    base: base,\n    noleft: noleft,\n    noright: noright,\n    notop: notop,\n    nobot: nobot,\n    renders: this.screen.renders\n  };\n};\n\nElement.prototype.render = function() {\n  this._emit('prerender');\n\n  this.parseContent();\n\n  var coords = this._getCoords(true);\n  if (!coords) {\n    delete this.lpos;\n    return;\n  }\n\n  if (coords.xl - coords.xi <= 0) {\n    coords.xl = Math.max(coords.xl, coords.xi);\n    return;\n  }\n\n  if (coords.yl - coords.yi <= 0) {\n    coords.yl = Math.max(coords.yl, coords.yi);\n    return;\n  }\n\n  var lines = this.screen.lines\n    , xi = coords.xi\n    , xl = coords.xl\n    , yi = coords.yi\n    , yl = coords.yl\n    , x\n    , y\n    , cell\n    , attr\n    , ch\n    , content = this._pcontent\n    , ci = this._clines.ci[coords.base]\n    , battr\n    , dattr\n    , c\n    , visible\n    , i\n    , bch = this.ch;\n\n  // Clip content if it's off the edge of the screen\n  // if (xi + this.ileft < 0 || yi + this.itop < 0) {\n  //   var clines = this._clines.slice();\n  //   if (xi + this.ileft < 0) {\n  //     for (var i = 0; i < clines.length; i++) {\n  //       var t = 0;\n  //       var csi = '';\n  //       var csis = '';\n  //       for (var j = 0; j < clines[i].length; j++) {\n  //         while (clines[i][j] === '\\x1b') {\n  //           csi = '\\x1b';\n  //           while (clines[i][j++] !== 'm') csi += clines[i][j];\n  //           csis += csi;\n  //         }\n  //         if (++t === -(xi + this.ileft) + 1) break;\n  //       }\n  //       clines[i] = csis + clines[i].substring(j);\n  //     }\n  //   }\n  //   if (yi + this.itop < 0) {\n  //     clines = clines.slice(-(yi + this.itop));\n  //   }\n  //   content = clines.join('\\n');\n  // }\n\n  if (coords.base >= this._clines.ci.length) {\n    ci = this._pcontent.length;\n  }\n\n  this.lpos = coords;\n\n  if (this.border && this.border.type === 'line') {\n    this.screen._borderStops[coords.yi] = true;\n    this.screen._borderStops[coords.yl - 1] = true;\n    // if (!this.screen._borderStops[coords.yi]) {\n    //   this.screen._borderStops[coords.yi] = { xi: coords.xi, xl: coords.xl };\n    // } else {\n    //   if (this.screen._borderStops[coords.yi].xi > coords.xi) {\n    //     this.screen._borderStops[coords.yi].xi = coords.xi;\n    //   }\n    //   if (this.screen._borderStops[coords.yi].xl < coords.xl) {\n    //     this.screen._borderStops[coords.yi].xl = coords.xl;\n    //   }\n    // }\n    // this.screen._borderStops[coords.yl - 1] = this.screen._borderStops[coords.yi];\n  }\n\n  dattr = this.sattr(this.style);\n  attr = dattr;\n\n  // If we're in a scrollable text box, check to\n  // see which attributes this line starts with.\n  if (ci > 0) {\n    attr = this._clines.attr[Math.min(coords.base, this._clines.length - 1)];\n  }\n\n  if (this.border) xi++, xl--, yi++, yl--;\n\n  // If we have padding/valign, that means the\n  // content-drawing loop will skip a few cells/lines.\n  // To deal with this, we can just fill the whole thing\n  // ahead of time. This could be optimized.\n  if (this.tpadding || (this.valign && this.valign !== 'top')) {\n    if (this.style.transparent) {\n      for (y = Math.max(yi, 0); y < yl; y++) {\n        if (!lines[y]) break;\n        for (x = Math.max(xi, 0); x < xl; x++) {\n          if (!lines[y][x]) break;\n          lines[y][x][0] = colors.blend(attr, lines[y][x][0]);\n          // lines[y][x][1] = bch;\n          lines[y].dirty = true;\n        }\n      }\n    } else {\n      this.screen.fillRegion(dattr, bch, xi, xl, yi, yl);\n    }\n  }\n\n  if (this.tpadding) {\n    xi += this.padding.left, xl -= this.padding.right;\n    yi += this.padding.top, yl -= this.padding.bottom;\n  }\n\n  // Determine where to place the text if it's vertically aligned.\n  if (this.valign === 'middle' || this.valign === 'bottom') {\n    visible = yl - yi;\n    if (this._clines.length < visible) {\n      if (this.valign === 'middle') {\n        visible = visible / 2 | 0;\n        visible -= this._clines.length / 2 | 0;\n      } else if (this.valign === 'bottom') {\n        visible -= this._clines.length;\n      }\n      ci -= visible * (xl - xi);\n    }\n  }\n\n  // Draw the content and background.\n  for (y = yi; y < yl; y++) {\n    if (!lines[y]) {\n      if (y >= this.screen.height || yl < this.ibottom) {\n        break;\n      } else {\n        continue;\n      }\n    }\n    for (x = xi; x < xl; x++) {\n      cell = lines[y][x];\n      if (!cell) {\n        if (x >= this.screen.width || xl < this.iright) {\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      ch = content[ci++] || bch;\n\n      // if (!content[ci] && !coords._contentEnd) {\n      //   coords._contentEnd = { x: x - xi, y: y - yi };\n      // }\n\n      // Handle escape codes.\n      while (ch === '\\x1b') {\n        if (c = /^\\x1b\\[[\\d;]*m/.exec(content.substring(ci - 1))) {\n          ci += c[0].length - 1;\n          attr = this.screen.attrCode(c[0], attr, dattr);\n          // Ignore foreground changes for selected items.\n          if (this.parent._isList && this.parent.interactive\n              && this.parent.items[this.parent.selected] === this\n              && this.parent.options.invertSelected !== false) {\n            attr = (attr & ~(0x1ff << 9)) | (dattr & (0x1ff << 9));\n          }\n          ch = content[ci] || bch;\n          ci++;\n        } else {\n          break;\n        }\n      }\n\n      // Handle newlines.\n      if (ch === '\\t') ch = bch;\n      if (ch === '\\n') {\n        // If we're on the first cell and we find a newline and the last cell\n        // of the last line was not a newline, let's just treat this like the\n        // newline was already \"counted\".\n        if (x === xi && y !== yi && content[ci - 2] !== '\\n') {\n          x--;\n          continue;\n        }\n        // We could use fillRegion here, name the\n        // outer loop, and continue to it instead.\n        ch = bch;\n        for (; x < xl; x++) {\n          cell = lines[y][x];\n          if (!cell) break;\n          if (this.style.transparent) {\n            lines[y][x][0] = colors.blend(attr, lines[y][x][0]);\n            if (content[ci]) lines[y][x][1] = ch;\n            lines[y].dirty = true;\n          } else {\n            if (attr !== cell[0] || ch !== cell[1]) {\n              lines[y][x][0] = attr;\n              lines[y][x][1] = ch;\n              lines[y].dirty = true;\n            }\n          }\n        }\n        continue;\n      }\n\n      if (this.screen.fullUnicode && content[ci - 1]) {\n        var point = unicode.codePointAt(content, ci - 1);\n        // Handle combining chars:\n        // Make sure they get in the same cell and are counted as 0.\n        if (unicode.combining[point]) {\n          if (point > 0x00ffff) {\n            ch = content[ci - 1] + content[ci];\n            ci++;\n          }\n          if (x - 1 >= xi) {\n            lines[y][x - 1][1] += ch;\n          } else if (y - 1 >= yi) {\n            lines[y - 1][xl - 1][1] += ch;\n          }\n          x--;\n          continue;\n        }\n        // Handle surrogate pairs:\n        // Make sure we put surrogate pair chars in one cell.\n        if (point > 0x00ffff) {\n          ch = content[ci - 1] + content[ci];\n          ci++;\n        }\n      }\n\n      if (this._noFill) continue;\n\n      if (this.style.transparent) {\n        lines[y][x][0] = colors.blend(attr, lines[y][x][0]);\n        if (content[ci]) lines[y][x][1] = ch;\n        lines[y].dirty = true;\n      } else {\n        if (attr !== cell[0] || ch !== cell[1]) {\n          lines[y][x][0] = attr;\n          lines[y][x][1] = ch;\n          lines[y].dirty = true;\n        }\n      }\n    }\n  }\n\n  // Draw the scrollbar.\n  // Could possibly draw this after all child elements.\n  if (this.scrollbar) {\n    // XXX\n    // i = this.getScrollHeight();\n    i = Math.max(this._clines.length, this._scrollBottom());\n  }\n  if (coords.notop || coords.nobot) i = -Infinity;\n  if (this.scrollbar && (yl - yi) < i) {\n    x = xl - 1;\n    if (this.scrollbar.ignoreBorder && this.border) x++;\n    if (this.alwaysScroll) {\n      y = this.childBase / (i - (yl - yi));\n    } else {\n      y = (this.childBase + this.childOffset) / (i - 1);\n    }\n    y = yi + ((yl - yi) * y | 0);\n    if (y >= yl) y = yl - 1;\n    cell = lines[y] && lines[y][x];\n    if (cell) {\n      if (this.track) {\n        ch = this.track.ch || ' ';\n        attr = this.sattr(this.style.track,\n          this.style.track.fg || this.style.fg,\n          this.style.track.bg || this.style.bg);\n        this.screen.fillRegion(attr, ch, x, x + 1, yi, yl);\n      }\n      ch = this.scrollbar.ch || ' ';\n      attr = this.sattr(this.style.scrollbar,\n        this.style.scrollbar.fg || this.style.fg,\n        this.style.scrollbar.bg || this.style.bg);\n      if (attr !== cell[0] || ch !== cell[1]) {\n        lines[y][x][0] = attr;\n        lines[y][x][1] = ch;\n        lines[y].dirty = true;\n      }\n    }\n  }\n\n  if (this.border) xi--, xl++, yi--, yl++;\n\n  if (this.tpadding) {\n    xi -= this.padding.left, xl += this.padding.right;\n    yi -= this.padding.top, yl += this.padding.bottom;\n  }\n\n  // Draw the border.\n  if (this.border) {\n    battr = this.sattr(this.style.border);\n    y = yi;\n    if (coords.notop) y = -1;\n    for (x = xi; x < xl; x++) {\n      if (!lines[y]) break;\n      if (coords.noleft && x === xi) continue;\n      if (coords.noright && x === xl - 1) continue;\n      cell = lines[y][x];\n      if (!cell) continue;\n      if (this.border.type === 'line') {\n        if (x === xi) {\n          ch = '\\u250c'; // '┌'\n          if (!this.border.left) {\n            if (this.border.top) {\n              ch = '\\u2500'; // '─'\n            } else {\n              continue;\n            }\n          } else {\n            if (!this.border.top) {\n              ch = '\\u2502'; // '│'\n            }\n          }\n        } else if (x === xl - 1) {\n          ch = '\\u2510'; // '┐'\n          if (!this.border.right) {\n            if (this.border.top) {\n              ch = '\\u2500'; // '─'\n            } else {\n              continue;\n            }\n          } else {\n            if (!this.border.top) {\n              ch = '\\u2502'; // '│'\n            }\n          }\n        } else {\n          ch = '\\u2500'; // '─'\n        }\n      } else if (this.border.type === 'bg') {\n        ch = this.border.ch;\n      }\n      if (!this.border.top && x !== xi && x !== xl - 1) {\n        ch = ' ';\n        if (dattr !== cell[0] || ch !== cell[1]) {\n          lines[y][x][0] = dattr;\n          lines[y][x][1] = ch;\n          lines[y].dirty = true;\n          continue;\n        }\n      }\n      if (battr !== cell[0] || ch !== cell[1]) {\n        lines[y][x][0] = battr;\n        lines[y][x][1] = ch;\n        lines[y].dirty = true;\n      }\n    }\n    y = yi + 1;\n    for (; y < yl - 1; y++) {\n      if (!lines[y]) continue;\n      cell = lines[y][xi];\n      if (cell) {\n        if (this.border.left) {\n          if (this.border.type === 'line') {\n            ch = '\\u2502'; // '│'\n          } else if (this.border.type === 'bg') {\n            ch = this.border.ch;\n          }\n          if (!coords.noleft)\n          if (battr !== cell[0] || ch !== cell[1]) {\n            lines[y][xi][0] = battr;\n            lines[y][xi][1] = ch;\n            lines[y].dirty = true;\n          }\n        } else {\n          ch = ' ';\n          if (dattr !== cell[0] || ch !== cell[1]) {\n            lines[y][xi][0] = dattr;\n            lines[y][xi][1] = ch;\n            lines[y].dirty = true;\n          }\n        }\n      }\n      cell = lines[y][xl - 1];\n      if (cell) {\n        if (this.border.right) {\n          if (this.border.type === 'line') {\n            ch = '\\u2502'; // '│'\n          } else if (this.border.type === 'bg') {\n            ch = this.border.ch;\n          }\n          if (!coords.noright)\n          if (battr !== cell[0] || ch !== cell[1]) {\n            lines[y][xl - 1][0] = battr;\n            lines[y][xl - 1][1] = ch;\n            lines[y].dirty = true;\n          }\n        } else {\n          ch = ' ';\n          if (dattr !== cell[0] || ch !== cell[1]) {\n            lines[y][xl - 1][0] = dattr;\n            lines[y][xl - 1][1] = ch;\n            lines[y].dirty = true;\n          }\n        }\n      }\n    }\n    y = yl - 1;\n    if (coords.nobot) y = -1;\n    for (x = xi; x < xl; x++) {\n      if (!lines[y]) break;\n      if (coords.noleft && x === xi) continue;\n      if (coords.noright && x === xl - 1) continue;\n      cell = lines[y][x];\n      if (!cell) continue;\n      if (this.border.type === 'line') {\n        if (x === xi) {\n          ch = '\\u2514'; // '└'\n          if (!this.border.left) {\n            if (this.border.bottom) {\n              ch = '\\u2500'; // '─'\n            } else {\n              continue;\n            }\n          } else {\n            if (!this.border.bottom) {\n              ch = '\\u2502'; // '│'\n            }\n          }\n        } else if (x === xl - 1) {\n          ch = '\\u2518'; // '┘'\n          if (!this.border.right) {\n            if (this.border.bottom) {\n              ch = '\\u2500'; // '─'\n            } else {\n              continue;\n            }\n          } else {\n            if (!this.border.bottom) {\n              ch = '\\u2502'; // '│'\n            }\n          }\n        } else {\n          ch = '\\u2500'; // '─'\n        }\n      } else if (this.border.type === 'bg') {\n        ch = this.border.ch;\n      }\n      if (!this.border.bottom && x !== xi && x !== xl - 1) {\n        ch = ' ';\n        if (dattr !== cell[0] || ch !== cell[1]) {\n          lines[y][x][0] = dattr;\n          lines[y][x][1] = ch;\n          lines[y].dirty = true;\n        }\n        continue;\n      }\n      if (battr !== cell[0] || ch !== cell[1]) {\n        lines[y][x][0] = battr;\n        lines[y][x][1] = ch;\n        lines[y].dirty = true;\n      }\n    }\n  }\n\n  if (this.shadow) {\n    // right\n    y = Math.max(yi + 1, 0);\n    for (; y < yl + 1; y++) {\n      if (!lines[y]) break;\n      x = xl;\n      for (; x < xl + 2; x++) {\n        if (!lines[y][x]) break;\n        // lines[y][x][0] = colors.blend(this.dattr, lines[y][x][0]);\n        lines[y][x][0] = colors.blend(lines[y][x][0]);\n        lines[y].dirty = true;\n      }\n    }\n    // bottom\n    y = yl;\n    for (; y < yl + 1; y++) {\n      if (!lines[y]) break;\n      for (x = Math.max(xi + 1, 0); x < xl; x++) {\n        if (!lines[y][x]) break;\n        // lines[y][x][0] = colors.blend(this.dattr, lines[y][x][0]);\n        lines[y][x][0] = colors.blend(lines[y][x][0]);\n        lines[y].dirty = true;\n      }\n    }\n  }\n\n  this.children.forEach(function(el) {\n    if (el.screen._ci !== -1) {\n      el.index = el.screen._ci++;\n    }\n    // if (el.screen._rendering) {\n    //   el._rendering = true;\n    // }\n    el.render();\n    // if (el.screen._rendering) {\n    //   el._rendering = false;\n    // }\n  });\n\n  this._emit('render', [coords]);\n\n  return coords;\n};\n\nElement.prototype._render = Element.prototype.render;\n\n/**\n * Content Methods\n */\n\nElement.prototype.insertLine = function(i, line) {\n  if (typeof line === 'string') line = line.split('\\n');\n\n  if (i !== i || i == null) {\n    i = this._clines.ftor.length;\n  }\n\n  i = Math.max(i, 0);\n\n  while (this._clines.fake.length < i) {\n    this._clines.fake.push('');\n    this._clines.ftor.push([this._clines.push('') - 1]);\n    this._clines.rtof(this._clines.fake.length - 1);\n  }\n\n  // NOTE: Could possibly compare the first and last ftor line numbers to see\n  // if they're the same, or if they fit in the visible region entirely.\n  var start = this._clines.length\n    , diff\n    , real;\n\n  if (i >= this._clines.ftor.length) {\n    real = this._clines.ftor[this._clines.ftor.length - 1];\n    real = real[real.length - 1] + 1;\n  } else {\n    real = this._clines.ftor[i][0];\n  }\n\n  for (var j = 0; j < line.length; j++) {\n    this._clines.fake.splice(i + j, 0, line[j]);\n  }\n\n  this.setContent(this._clines.fake.join('\\n'), true);\n\n  diff = this._clines.length - start;\n\n  if (diff > 0) {\n    var pos = this._getCoords();\n    if (!pos) return;\n\n    var height = pos.yl - pos.yi - this.iheight\n      , base = this.childBase || 0\n      , visible = real >= base && real - base < height;\n\n    if (pos && visible && this.screen.cleanSides(this)) {\n      this.screen.insertLine(diff,\n        pos.yi + this.itop + real - base,\n        pos.yi,\n        pos.yl - this.ibottom - 1);\n    }\n  }\n};\n\nElement.prototype.deleteLine = function(i, n) {\n  n = n || 1;\n\n  if (i !== i || i == null) {\n    i = this._clines.ftor.length - 1;\n  }\n\n  i = Math.max(i, 0);\n  i = Math.min(i, this._clines.ftor.length - 1);\n\n  // NOTE: Could possibly compare the first and last ftor line numbers to see\n  // if they're the same, or if they fit in the visible region entirely.\n  var start = this._clines.length\n    , diff\n    , real = this._clines.ftor[i][0];\n\n  while (n--) {\n    this._clines.fake.splice(i, 1);\n  }\n\n  this.setContent(this._clines.fake.join('\\n'), true);\n\n  diff = start - this._clines.length;\n\n  // XXX clearPos() without diff statement?\n  var height = 0;\n\n  if (diff > 0) {\n    var pos = this._getCoords();\n    if (!pos) return;\n\n    height = pos.yl - pos.yi - this.iheight;\n\n    var base = this.childBase || 0\n      , visible = real >= base && real - base < height;\n\n    if (pos && visible && this.screen.cleanSides(this)) {\n      this.screen.deleteLine(diff,\n        pos.yi + this.itop + real - base,\n        pos.yi,\n        pos.yl - this.ibottom - 1);\n    }\n  }\n\n  if (this._clines.length < height) {\n    this.clearPos();\n  }\n};\n\nElement.prototype.insertTop = function(line) {\n  var fake = this._clines.rtof[this.childBase || 0];\n  return this.insertLine(fake, line);\n};\n\nElement.prototype.insertBottom = function(line) {\n  var h = (this.childBase || 0) + this.height - this.iheight\n    , i = Math.min(h, this._clines.length)\n    , fake = this._clines.rtof[i - 1] + 1;\n\n  return this.insertLine(fake, line);\n};\n\nElement.prototype.deleteTop = function(n) {\n  var fake = this._clines.rtof[this.childBase || 0];\n  return this.deleteLine(fake, n);\n};\n\nElement.prototype.deleteBottom = function(n) {\n  var h = (this.childBase || 0) + this.height - 1 - this.iheight\n    , i = Math.min(h, this._clines.length - 1)\n    , fake = this._clines.rtof[i];\n\n  n = n || 1;\n\n  return this.deleteLine(fake - (n - 1), n);\n};\n\nElement.prototype.setLine = function(i, line) {\n  i = Math.max(i, 0);\n  while (this._clines.fake.length < i) {\n    this._clines.fake.push('');\n  }\n  this._clines.fake[i] = line;\n  return this.setContent(this._clines.fake.join('\\n'), true);\n};\n\nElement.prototype.setBaseLine = function(i, line) {\n  var fake = this._clines.rtof[this.childBase || 0];\n  return this.setLine(fake + i, line);\n};\n\nElement.prototype.getLine = function(i) {\n  i = Math.max(i, 0);\n  i = Math.min(i, this._clines.fake.length - 1);\n  return this._clines.fake[i];\n};\n\nElement.prototype.getBaseLine = function(i) {\n  var fake = this._clines.rtof[this.childBase || 0];\n  return this.getLine(fake + i);\n};\n\nElement.prototype.clearLine = function(i) {\n  i = Math.min(i, this._clines.fake.length - 1);\n  return this.setLine(i, '');\n};\n\nElement.prototype.clearBaseLine = function(i) {\n  var fake = this._clines.rtof[this.childBase || 0];\n  return this.clearLine(fake + i);\n};\n\nElement.prototype.unshiftLine = function(line) {\n  return this.insertLine(0, line);\n};\n\nElement.prototype.shiftLine = function(n) {\n  return this.deleteLine(0, n);\n};\n\nElement.prototype.pushLine = function(line) {\n  if (!this.content) return this.setLine(0, line);\n  return this.insertLine(this._clines.fake.length, line);\n};\n\nElement.prototype.popLine = function(n) {\n  return this.deleteLine(this._clines.fake.length - 1, n);\n};\n\nElement.prototype.getLines = function() {\n  return this._clines.fake.slice();\n};\n\nElement.prototype.getScreenLines = function() {\n  return this._clines.slice();\n};\n\nElement.prototype.strWidth = function(text) {\n  text = this.parseTags\n    ? helpers.stripTags(text)\n    : text;\n  return this.screen.fullUnicode\n    ? unicode.strWidth(text)\n    : helpers.dropUnicode(text).length;\n};\n\nElement.prototype.screenshot = function(xi, xl, yi, yl) {\n  xi = this.lpos.xi + this.ileft + (xi || 0);\n  if (xl != null) {\n    xl = this.lpos.xi + this.ileft + (xl || 0);\n  } else {\n    xl = this.lpos.xl - this.iright;\n  }\n  yi = this.lpos.yi + this.itop + (yi || 0);\n  if (yl != null) {\n    yl = this.lpos.yi + this.itop + (yl || 0);\n  } else {\n    yl = this.lpos.yl - this.ibottom;\n  }\n  return this.screen.screenshot(xi, xl, yi, yl);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Element;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/text.js":"/**\n * text.js - text element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Element = require('./element');\n\n/**\n * Text\n */\n\nfunction Text(options) {\n  if (!(this instanceof Node)) {\n    return new Text(options);\n  }\n  options = options || {};\n  options.shrink = true;\n  Element.call(this, options);\n}\n\nText.prototype.__proto__ = Element.prototype;\n\nText.prototype.type = 'text';\n\n/**\n * Expose\n */\n\nmodule.exports = Text;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/line.js":"/**\n * line.js - line element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Line\n */\n\nfunction Line(options) {\n  if (!(this instanceof Node)) {\n    return new Line(options);\n  }\n\n  options = options || {};\n\n  var orientation = options.orientation || 'vertical';\n  delete options.orientation;\n\n  if (orientation === 'vertical') {\n    options.width = 1;\n  } else {\n    options.height = 1;\n  }\n\n  Box.call(this, options);\n\n  this.ch = !options.type || options.type === 'line'\n    ? orientation === 'horizontal' ? '─' : '│'\n    : options.ch || ' ';\n\n  this.border = {\n    type: 'bg',\n    __proto__: this\n  };\n\n  this.style.border = this.style;\n}\n\nLine.prototype.__proto__ = Box.prototype;\n\nLine.prototype.type = 'line';\n\n/**\n * Expose\n */\n\nmodule.exports = Line;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/bigtext.js":"/**\n * bigtext.js - bigtext element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar fs = require('fs');\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * BigText\n */\n\nfunction BigText(options) {\n  if (!(this instanceof Node)) {\n    return new BigText(options);\n  }\n  options = options || {};\n  options.font = options.font\n    || __dirname + '/../../usr/fonts/ter-u14n.json';\n  options.fontBold = options.font\n    || __dirname + '/../../usr/fonts/ter-u14b.json';\n  this.fch = options.fch;\n  this.ratio = {};\n  this.font = this.loadFont(options.font);\n  this.fontBold = this.loadFont(options.font);\n  Box.call(this, options);\n  if (this.style.bold) {\n    this.font = this.fontBold;\n  }\n}\n\nBigText.prototype.__proto__ = Box.prototype;\n\nBigText.prototype.type = 'bigtext';\n\nBigText.prototype.loadFont = function(filename) {\n  var self = this\n    , data\n    , font;\n\n  data = JSON.parse(fs.readFileSync(filename, 'utf8'));\n\n  this.ratio.width = data.width;\n  this.ratio.height = data.height;\n\n  function convertLetter(ch, lines) {\n    var line, i;\n\n    while (lines.length > self.ratio.height) {\n      lines.shift();\n      lines.pop();\n    }\n\n    lines = lines.map(function(line) {\n      var chs = line.split('');\n      chs = chs.map(function(ch) {\n        return ch === ' ' ? 0 : 1;\n      });\n      while (chs.length < self.ratio.width) {\n        chs.push(0);\n      }\n      return chs;\n    });\n\n    while (lines.length < self.ratio.height) {\n      line = [];\n      for (i = 0; i < self.ratio.width; i++) {\n        line.push(0);\n      }\n      lines.push(line);\n    }\n\n    return lines;\n  }\n\n  font = Object.keys(data.glyphs).reduce(function(out, ch) {\n    var lines = data.glyphs[ch].map;\n    out[ch] = convertLetter(ch, lines);\n    return out;\n  }, {});\n\n  delete font[' '];\n\n  return font;\n};\n\nBigText.prototype.setContent = function(content) {\n  this.content = '';\n  this.text = content || '';\n};\n\nBigText.prototype.render = function() {\n  if (this.position.width == null || this._shrinkWidth) {\n    // if (this.width - this.iwidth < this.ratio.width * this.text.length + 1) {\n      this.position.width = this.ratio.width * this.text.length + 1;\n      this._shrinkWidth = true;\n    // }\n  }\n  if (this.position.height == null || this._shrinkHeight) {\n    // if (this.height - this.iheight < this.ratio.height + 0) {\n      this.position.height = this.ratio.height + 0;\n      this._shrinkHeight = true;\n    // }\n  }\n\n  var coords = this._render();\n  if (!coords) return;\n\n  var lines = this.screen.lines\n    , left = coords.xi + this.ileft\n    , top = coords.yi + this.itop\n    , right = coords.xl - this.iright\n    , bottom = coords.yl - this.ibottom;\n\n  var dattr = this.sattr(this.style)\n    , bg = dattr & 0x1ff\n    , fg = (dattr >> 9) & 0x1ff\n    , flags = (dattr >> 18) & 0x1ff\n    , attr = (flags << 18) | (bg << 9) | fg;\n\n  for (var x = left, i = 0; x < right; x += this.ratio.width, i++) {\n    var ch = this.text[i];\n    if (!ch) break;\n    var map = this.font[ch];\n    if (!map) continue;\n    for (var y = top; y < Math.min(bottom, top + this.ratio.height); y++) {\n      if (!lines[y]) continue;\n      var mline = map[y - top];\n      if (!mline) continue;\n      for (var mx = 0; mx < this.ratio.width; mx++) {\n        var mcell = mline[mx];\n        if (mcell == null) break;\n        if (this.fch && this.fch !== ' ') {\n          lines[y][x + mx][0] = dattr;\n          lines[y][x + mx][1] = mcell === 1 ? this.fch : this.ch;\n        } else {\n          lines[y][x + mx][0] = mcell === 1 ? attr : dattr;\n          lines[y][x + mx][1] = mcell === 1 ? ' ' : this.ch;\n        }\n      }\n      lines[y].dirty = true;\n    }\n  }\n\n  return coords;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = BigText;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/list.js":"/**\n * list.js - list element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar helpers = require('../helpers');\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * List\n */\n\nfunction List(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new List(options);\n  }\n\n  options = options || {};\n\n  options.ignoreKeys = true;\n  // Possibly put this here: this.items = [];\n  options.scrollable = true;\n  Box.call(this, options);\n\n  this.value = '';\n  this.items = [];\n  this.ritems = [];\n  this.selected = 0;\n  this._isList = true;\n\n  if (!this.style.selected) {\n    this.style.selected = {};\n    this.style.selected.bg = options.selectedBg;\n    this.style.selected.fg = options.selectedFg;\n    this.style.selected.bold = options.selectedBold;\n    this.style.selected.underline = options.selectedUnderline;\n    this.style.selected.blink = options.selectedBlink;\n    this.style.selected.inverse = options.selectedInverse;\n    this.style.selected.invisible = options.selectedInvisible;\n  }\n\n  if (!this.style.item) {\n    this.style.item = {};\n    this.style.item.bg = options.itemBg;\n    this.style.item.fg = options.itemFg;\n    this.style.item.bold = options.itemBold;\n    this.style.item.underline = options.itemUnderline;\n    this.style.item.blink = options.itemBlink;\n    this.style.item.inverse = options.itemInverse;\n    this.style.item.invisible = options.itemInvisible;\n  }\n\n  // Legacy: for apps written before the addition of item attributes.\n  ['bg', 'fg', 'bold', 'underline',\n   'blink', 'inverse', 'invisible'].forEach(function(name) {\n    if (self.style[name] != null && self.style.item[name] == null) {\n      self.style.item[name] = self.style[name];\n    }\n  });\n\n  if (this.options.itemHoverBg) {\n    this.options.itemHoverEffects = { bg: this.options.itemHoverBg };\n  }\n\n  if (this.options.itemHoverEffects) {\n    this.style.item.hover = this.options.itemHoverEffects;\n  }\n\n  if (this.options.itemFocusEffects) {\n    this.style.item.focus = this.options.itemFocusEffects;\n  }\n\n  this.interactive = options.interactive !== false;\n\n  this.mouse = options.mouse || false;\n\n  if (options.items) {\n    this.ritems = options.items;\n    options.items.forEach(this.add.bind(this));\n  }\n\n  this.select(0);\n\n  if (options.mouse) {\n    this.screen._listenMouse(this);\n    this.on('element wheeldown', function() {\n      self.select(self.selected + 2);\n      self.screen.render();\n    });\n    this.on('element wheelup', function() {\n      self.select(self.selected - 2);\n      self.screen.render();\n    });\n  }\n\n  if (options.keys) {\n    this.on('keypress', function(ch, key) {\n      if (key.name === 'up' || (options.vi && key.name === 'k')) {\n        self.up();\n        self.screen.render();\n        return;\n      }\n      if (key.name === 'down' || (options.vi && key.name === 'j')) {\n        self.down();\n        self.screen.render();\n        return;\n      }\n      if (key.name === 'enter'\n          || (options.vi && key.name === 'l' && !key.shift)) {\n        self.enterSelected();\n        return;\n      }\n      if (key.name === 'escape' || (options.vi && key.name === 'q')) {\n        self.cancelSelected();\n        return;\n      }\n      if (options.vi && key.name === 'u' && key.ctrl) {\n        self.move(-((self.height - self.iheight) / 2) | 0);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'd' && key.ctrl) {\n        self.move((self.height - self.iheight) / 2 | 0);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'b' && key.ctrl) {\n        self.move(-(self.height - self.iheight));\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'f' && key.ctrl) {\n        self.move(self.height - self.iheight);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'h' && key.shift) {\n        self.move(self.childBase - self.selected);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'm' && key.shift) {\n        // TODO: Maybe use Math.min(this.items.length,\n        // ... for calculating visible items elsewhere.\n        var visible = Math.min(\n          self.height - self.iheight,\n          self.items.length) / 2 | 0;\n        self.move(self.childBase + visible - self.selected);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'l' && key.shift) {\n        // XXX This goes one too far on lists with an odd number of items.\n        self.down(self.childBase\n          + Math.min(self.height - self.iheight, self.items.length)\n          - self.selected);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'g' && !key.shift) {\n        self.select(0);\n        self.screen.render();\n        return;\n      }\n      if (options.vi && key.name === 'g' && key.shift) {\n        self.select(self.items.length - 1);\n        self.screen.render();\n        return;\n      }\n\n      if (options.vi && (key.ch === '/' || key.ch === '?')) {\n        if (typeof self.options.search !== 'function') {\n          return;\n        }\n        return self.options.search(function(err, value) {\n          if (typeof err === 'string' || typeof err === 'function'\n              || typeof err === 'number' || (err && err.test)) {\n            value = err;\n            err = null;\n          }\n          if (err || !value) return self.screen.render();\n          self.select(self.fuzzyFind(value, key.ch === '?'));\n          self.screen.render();\n        });\n      }\n    });\n  }\n\n  this.on('resize', function() {\n    var visible = self.height - self.iheight;\n    // if (self.selected < visible - 1) {\n    if (visible >= self.selected + 1) {\n      self.childBase = 0;\n      self.childOffset = self.selected;\n    } else {\n      // Is this supposed to be: self.childBase = visible - self.selected + 1; ?\n      self.childBase = self.selected - visible + 1;\n      self.childOffset = visible - 1;\n    }\n  });\n\n  this.on('adopt', function(el) {\n    if (!~self.items.indexOf(el)) {\n      el.fixed = true;\n    }\n  });\n\n  // Ensure children are removed from the\n  // item list if they are items.\n  this.on('remove', function(el) {\n    self.removeItem(el);\n  });\n}\n\nList.prototype.__proto__ = Box.prototype;\n\nList.prototype.type = 'list';\n\nList.prototype.createItem = function(content) {\n  var self = this;\n\n  // Note: Could potentially use Button here.\n  var options = {\n    screen: this.screen,\n    content: content,\n    align: this.align || 'left',\n    top: 0,\n    left: 0,\n    right: (this.scrollbar ? 1 : 0),\n    tags: this.parseTags,\n    height: 1,\n    hoverEffects: this.mouse ? this.style.item.hover : null,\n    focusEffects: this.mouse ? this.style.item.focus : null,\n    autoFocus: false\n  };\n\n  if (!this.screen.autoPadding) {\n    options.top = 1;\n    options.left = this.ileft;\n    options.right = this.iright + (this.scrollbar ? 1 : 0);\n  }\n\n  // if (this.shrink) {\n  // XXX NOTE: Maybe just do this on all shrinkage once autoPadding is default?\n  if (this.shrink && this.options.normalShrink) {\n    delete options.right;\n    options.width = 'shrink';\n  }\n\n  ['bg', 'fg', 'bold', 'underline',\n   'blink', 'inverse', 'invisible'].forEach(function(name) {\n    options[name] = function() {\n      var attr = self.items[self.selected] === item && self.interactive\n        ? self.style.selected[name]\n        : self.style.item[name];\n      if (typeof attr === 'function') attr = attr(item);\n      return attr;\n    };\n  });\n\n  if (this.style.transparent) {\n    options.transparent = true;\n  }\n\n  var item = new Box(options);\n\n  if (this.mouse) {\n    item.on('click', function() {\n      self.focus();\n      if (self.items[self.selected] === item) {\n        self.emit('action', item, self.selected);\n        self.emit('select', item, self.selected);\n        return;\n      }\n      self.select(item);\n      self.screen.render();\n    });\n  }\n\n  this.emit('create item');\n\n  return item;\n};\n\nList.prototype.add =\nList.prototype.addItem =\nList.prototype.appendItem = function(content) {\n  content = typeof content === 'string' ? content : content.getContent();\n\n  var item = this.createItem(content);\n  item.position.top = this.items.length;\n  if (!this.screen.autoPadding) {\n    item.position.top = this.itop + this.items.length;\n  }\n\n  this.ritems.push(content);\n  this.items.push(item);\n  this.append(item);\n\n  if (this.items.length === 1) {\n    this.select(0);\n  }\n\n  this.emit('add item');\n\n  return item;\n};\n\nList.prototype.removeItem = function(child) {\n  var i = this.getItemIndex(child);\n  if (~i && this.items[i]) {\n    child = this.items.splice(i, 1)[0];\n    this.ritems.splice(i, 1);\n    this.remove(child);\n    for (var j = i; j < this.items.length; j++) {\n      this.items[j].position.top--;\n    }\n    if (i === this.selected) {\n      this.select(i - 1);\n    }\n  }\n  this.emit('remove item');\n  return child;\n};\n\nList.prototype.insertItem = function(child, content) {\n  content = typeof content === 'string' ? content : content.getContent();\n  var i = this.getItemIndex(child);\n  if (!~i) return;\n  if (i >= this.items.length) return this.appendItem(content);\n  var item = this.createItem(content);\n  for (var j = i; j < this.items.length; j++) {\n    this.items[j].position.top++;\n  }\n  item.position.top = i + (!this.screen.autoPadding ? 1 : 0);\n  this.ritems.splice(i, 0, content);\n  this.items.splice(i, 0, item);\n  this.append(item);\n  if (i === this.selected) {\n    this.select(i + 1);\n  }\n  this.emit('insert item');\n};\n\nList.prototype.getItem = function(child) {\n  return this.items[this.getItemIndex(child)];\n};\n\nList.prototype.setItem = function(child, content) {\n  content = typeof content === 'string' ? content : content.getContent();\n  var i = this.getItemIndex(child);\n  if (!~i) return;\n  this.items[i].setContent(content);\n  this.ritems[i] = content;\n};\n\nList.prototype.clearItems = function() {\n  return this.setItems([]);\n};\n\nList.prototype.setItems = function(items) {\n  var original = this.items.slice()\n    , selected = this.selected\n    , sel = this.ritems[this.selected]\n    , i = 0;\n\n  items = items.slice();\n\n  this.select(0);\n\n  for (; i < items.length; i++) {\n    if (this.items[i]) {\n      this.items[i].setContent(items[i]);\n    } else {\n      this.add(items[i]);\n    }\n  }\n\n  for (; i < original.length; i++) {\n    this.remove(original[i]);\n  }\n\n  this.ritems = items;\n\n  // Try to find our old item if it still exists.\n  sel = items.indexOf(sel);\n  if (~sel) {\n    this.select(sel);\n  } else if (items.length === original.length) {\n    this.select(selected);\n  } else {\n    this.select(Math.min(selected, items.length - 1));\n  }\n\n  this.emit('set items');\n};\n\nList.prototype.pushItem = function(content) {\n  this.appendItem(content);\n  return this.items.length;\n};\n\nList.prototype.popItem = function() {\n  return this.removeItem(this.items.length - 1);\n};\n\nList.prototype.unshiftItem = function(content) {\n  this.insertItem(0, content);\n  return this.items.length;\n};\n\nList.prototype.shiftItem = function() {\n  return this.removeItem(0);\n};\n\nList.prototype.spliceItem = function(child, n) {\n  var self = this;\n  var i = this.getItemIndex(child);\n  if (!~i) return;\n  var items = Array.prototype.slice.call(arguments, 2);\n  var removed = [];\n  while (n--) {\n    removed.push(this.removeItem(i));\n  }\n  items.forEach(function(item) {\n    self.insertItem(i++, item);\n  });\n  return removed;\n};\n\nList.prototype.find =\nList.prototype.fuzzyFind = function(search, back) {\n  var start = this.selected + (back ? -1 : 1)\n    , i;\n\n  if (typeof search === 'number') search += '';\n\n  if (search && search[0] === '/' && search[search.length - 1] === '/') {\n    try {\n      search = new RegExp(search.slice(1, -1));\n    } catch (e) {\n      ;\n    }\n  }\n\n  var test = typeof search === 'string'\n    ? function(item) { return !!~item.indexOf(search); }\n    : (search.test ? search.test.bind(search) : search);\n\n  if (typeof test !== 'function') {\n    if (this.screen.options.debug) {\n      throw new Error('fuzzyFind(): `test` is not a function.');\n    }\n    return this.selected;\n  }\n\n  if (!back) {\n    for (i = start; i < this.ritems.length; i++) {\n      if (test(helpers.cleanTags(this.ritems[i]))) return i;\n    }\n    for (i = 0; i < start; i++) {\n      if (test(helpers.cleanTags(this.ritems[i]))) return i;\n    }\n  } else {\n    for (i = start; i >= 0; i--) {\n      if (test(helpers.cleanTags(this.ritems[i]))) return i;\n    }\n    for (i = this.ritems.length - 1; i > start; i--) {\n      if (test(helpers.cleanTags(this.ritems[i]))) return i;\n    }\n  }\n\n  return this.selected;\n};\n\nList.prototype.getItemIndex = function(child) {\n  if (typeof child === 'number') {\n    return child;\n  } else if (typeof child === 'string') {\n    var i = this.ritems.indexOf(child);\n    if (~i) return i;\n    for (i = 0; i < this.ritems.length; i++) {\n      if (helpers.cleanTags(this.ritems[i]) === child) {\n        return i;\n      }\n    }\n    return -1;\n  } else {\n    return this.items.indexOf(child);\n  }\n};\n\nList.prototype.select = function(index) {\n  if (!this.interactive) {\n    return;\n  }\n\n  if (!this.items.length) {\n    this.selected = 0;\n    this.value = '';\n    this.scrollTo(0);\n    return;\n  }\n\n  if (typeof index === 'object') {\n    index = this.items.indexOf(index);\n  }\n\n  if (index < 0) {\n    index = 0;\n  } else if (index >= this.items.length) {\n    index = this.items.length - 1;\n  }\n\n  if (this.selected === index && this._listInitialized) return;\n  this._listInitialized = true;\n\n  this.selected = index;\n  this.value = helpers.cleanTags(this.ritems[this.selected]);\n  if (!this.parent) return;\n  this.scrollTo(this.selected);\n\n  // XXX Move `action` and `select` events here.\n  this.emit('select item', this.items[this.selected], this.selected);\n};\n\nList.prototype.move = function(offset) {\n  this.select(this.selected + offset);\n};\n\nList.prototype.up = function(offset) {\n  this.move(-(offset || 1));\n};\n\nList.prototype.down = function(offset) {\n  this.move(offset || 1);\n};\n\nList.prototype.pick = function(label, callback) {\n  if (!callback) {\n    callback = label;\n    label = null;\n  }\n\n  if (!this.interactive) {\n    return callback();\n  }\n\n  var self = this;\n  var focused = this.screen.focused;\n  if (focused && focused._done) focused._done('stop');\n  this.screen.saveFocus();\n\n  // XXX Keep above:\n  // var parent = this.parent;\n  // this.detach();\n  // parent.append(this);\n\n  this.focus();\n  this.show();\n  this.select(0);\n  if (label) this.setLabel(label);\n  this.screen.render();\n  this.once('action', function(el, selected) {\n    if (label) self.removeLabel();\n    self.screen.restoreFocus();\n    self.hide();\n    self.screen.render();\n    if (!el) return callback();\n    return callback(null, helpers.cleanTags(self.ritems[selected]));\n  });\n};\n\nList.prototype.enterSelected = function(i) {\n  if (i != null) this.select(i);\n  this.emit('action', this.items[this.selected], this.selected);\n  this.emit('select', this.items[this.selected], this.selected);\n};\n\nList.prototype.cancelSelected = function(i) {\n  if (i != null) this.select(i);\n  this.emit('action');\n  this.emit('cancel');\n};\n\n/**\n * Expose\n */\n\nmodule.exports = List;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/form.js":"/**\n * form.js - form element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Form\n */\n\nfunction Form(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Form(options);\n  }\n\n  options = options || {};\n\n  options.ignoreKeys = true;\n  Box.call(this, options);\n\n  if (options.keys) {\n    this.screen._listenKeys(this);\n    this.on('element keypress', function(el, ch, key) {\n      if ((key.name === 'tab' && !key.shift)\n          || (el.type === 'textbox' && options.autoNext && key.name === 'enter')\n          || key.name === 'down'\n          || (options.vi && key.name === 'j')) {\n        if (el.type === 'textbox' || el.type === 'textarea') {\n          if (key.name === 'j') return;\n          if (key.name === 'tab') {\n            // Workaround, since we can't stop the tab from being added.\n            el.emit('keypress', null, { name: 'backspace' });\n          }\n          el.emit('keypress', '\\x1b', { name: 'escape' });\n        }\n        self.focusNext();\n        return;\n      }\n\n      if ((key.name === 'tab' && key.shift)\n          || key.name === 'up'\n          || (options.vi && key.name === 'k')) {\n        if (el.type === 'textbox' || el.type === 'textarea') {\n          if (key.name === 'k') return;\n          el.emit('keypress', '\\x1b', { name: 'escape' });\n        }\n        self.focusPrevious();\n        return;\n      }\n\n      if (key.name === 'escape') {\n        self.focus();\n        return;\n      }\n    });\n  }\n}\n\nForm.prototype.__proto__ = Box.prototype;\n\nForm.prototype.type = 'form';\n\nForm.prototype._refresh = function() {\n  // XXX Possibly remove this if statement and refresh on every focus.\n  // Also potentially only include *visible* focusable elements.\n  // This would remove the need to check for _selected.visible in previous()\n  // and next().\n  if (!this._children) {\n    var out = [];\n\n    this.children.forEach(function fn(el) {\n      if (el.keyable) out.push(el);\n      el.children.forEach(fn);\n    });\n\n    this._children = out;\n  }\n};\n\nForm.prototype._visible = function() {\n  return !!this._children.filter(function(el) {\n    return el.visible;\n  }).length;\n};\n\nForm.prototype.next = function() {\n  this._refresh();\n\n  if (!this._visible()) return;\n\n  if (!this._selected) {\n    this._selected = this._children[0];\n    if (!this._selected.visible) return this.next();\n    if (this.screen.focused !== this._selected) return this._selected;\n  }\n\n  var i = this._children.indexOf(this._selected);\n  if (!~i || !this._children[i + 1]) {\n    this._selected = this._children[0];\n    if (!this._selected.visible) return this.next();\n    return this._selected;\n  }\n\n  this._selected = this._children[i + 1];\n  if (!this._selected.visible) return this.next();\n  return this._selected;\n};\n\nForm.prototype.previous = function() {\n  this._refresh();\n\n  if (!this._visible()) return;\n\n  if (!this._selected) {\n    this._selected = this._children[this._children.length - 1];\n    if (!this._selected.visible) return this.previous();\n    if (this.screen.focused !== this._selected) return this._selected;\n  }\n\n  var i = this._children.indexOf(this._selected);\n  if (!~i || !this._children[i - 1]) {\n    this._selected = this._children[this._children.length - 1];\n    if (!this._selected.visible) return this.previous();\n    return this._selected;\n  }\n\n  this._selected = this._children[i - 1];\n  if (!this._selected.visible) return this.previous();\n  return this._selected;\n};\n\nForm.prototype.focusNext = function() {\n  var next = this.next();\n  if (next) next.focus();\n};\n\nForm.prototype.focusPrevious = function() {\n  var previous = this.previous();\n  if (previous) previous.focus();\n};\n\nForm.prototype.resetSelected = function() {\n  this._selected = null;\n};\n\nForm.prototype.focusFirst = function() {\n  this.resetSelected();\n  this.focusNext();\n};\n\nForm.prototype.focusLast = function() {\n  this.resetSelected();\n  this.focusPrevious();\n};\n\nForm.prototype.submit = function() {\n  var out = {};\n\n  this.children.forEach(function fn(el) {\n    if (el.value != null) {\n      var name = el.name || el.type;\n      if (Array.isArray(out[name])) {\n        out[name].push(el.value);\n      } else if (out[name]) {\n        out[name] = [out[name], el.value];\n      } else {\n        out[name] = el.value;\n      }\n    }\n    el.children.forEach(fn);\n  });\n\n  this.emit('submit', out);\n\n  return this.submission = out;\n};\n\nForm.prototype.cancel = function() {\n  this.emit('cancel');\n};\n\nForm.prototype.reset = function() {\n  this.children.forEach(function fn(el) {\n    switch (el.type) {\n      case 'screen':\n        break;\n      case 'box':\n        break;\n      case 'text':\n        break;\n      case 'line':\n        break;\n      case 'scrollable-box':\n        break;\n      case 'list':\n        el.select(0);\n        return;\n      case 'form':\n        break;\n      case 'input':\n        break;\n      case 'textbox':\n        el.clearInput();\n        return;\n      case 'textarea':\n        el.clearInput();\n        return;\n      case 'button':\n        delete el.value;\n        break;\n      case 'progress-bar':\n        el.setProgress(0);\n        break;\n      case 'file-manager':\n        el.refresh(el.options.cwd);\n        return;\n      case 'checkbox':\n        el.uncheck();\n        return;\n      case 'radio-set':\n        break;\n      case 'radio-button':\n        el.uncheck();\n        return;\n      case 'prompt':\n        break;\n      case 'question':\n        break;\n      case 'message':\n        break;\n      case 'info':\n        break;\n      case 'loading':\n        break;\n      case 'list-bar':\n        //el.select(0);\n        break;\n      case 'dir-manager':\n        el.refresh(el.options.cwd);\n        return;\n      case 'terminal':\n        el.write('');\n        return;\n      case 'image':\n        //el.clearImage();\n        return;\n    }\n    el.children.forEach(fn);\n  });\n\n  this.emit('reset');\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Form;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/input.js":"/**\n * input.js - abstract input element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Input\n */\n\nfunction Input(options) {\n  if (!(this instanceof Node)) {\n    return new Input(options);\n  }\n  options = options || {};\n  Box.call(this, options);\n}\n\nInput.prototype.__proto__ = Box.prototype;\n\nInput.prototype.type = 'input';\n\n/**\n * Expose\n */\n\nmodule.exports = Input;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/textarea.js":"/**\n * textarea.js - textarea element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar unicode = require('../unicode');\n\nvar nextTick = global.setImmediate || process.nextTick.bind(process);\n\nvar Node = require('./node');\nvar Input = require('./input');\n\n/**\n * Textarea\n */\n\nfunction Textarea(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Textarea(options);\n  }\n\n  options = options || {};\n\n  options.scrollable = options.scrollable !== false;\n\n  Input.call(this, options);\n\n  this.screen._listenKeys(this);\n\n  this.value = options.value || '';\n\n  this.__updateCursor = this._updateCursor.bind(this);\n  this.on('resize', this.__updateCursor);\n  this.on('move', this.__updateCursor);\n\n  if (options.inputOnFocus) {\n    this.on('focus', this.readInput.bind(this, null));\n  }\n\n  if (!options.inputOnFocus && options.keys) {\n    this.on('keypress', function(ch, key) {\n      if (self._reading) return;\n      if (key.name === 'enter' || (options.vi && key.name === 'i')) {\n        return self.readInput();\n      }\n      if (key.name === 'e') {\n        return self.readEditor();\n      }\n    });\n  }\n\n  if (options.mouse) {\n    this.on('click', function(data) {\n      if (self._reading) return;\n      if (data.button !== 'right') return;\n      self.readEditor();\n    });\n  }\n}\n\nTextarea.prototype.__proto__ = Input.prototype;\n\nTextarea.prototype.type = 'textarea';\n\nTextarea.prototype._updateCursor = function(get) {\n  if (this.screen.focused !== this) {\n    return;\n  }\n\n  var lpos = get ? this.lpos : this._getCoords();\n  if (!lpos) return;\n\n  var last = this._clines[this._clines.length - 1]\n    , program = this.screen.program\n    , line\n    , cx\n    , cy;\n\n  // Stop a situation where the textarea begins scrolling\n  // and the last cline appears to always be empty from the\n  // _typeScroll `+ '\\n'` thing.\n  // Maybe not necessary anymore?\n  if (last === '' && this.value[this.value.length - 1] !== '\\n') {\n    last = this._clines[this._clines.length - 2] || '';\n  }\n\n  line = Math.min(\n    this._clines.length - 1 - (this.childBase || 0),\n    (lpos.yl - lpos.yi) - this.iheight - 1);\n\n  // When calling clearValue() on a full textarea with a border, the first\n  // argument in the above Math.min call ends up being -2. Make sure we stay\n  // positive.\n  line = Math.max(0, line);\n\n  cy = lpos.yi + this.itop + line;\n  cx = lpos.xi + this.ileft + this.strWidth(last);\n\n  // XXX Not sure, but this may still sometimes\n  // cause problems when leaving editor.\n  if (cy === program.y && cx === program.x) {\n    return;\n  }\n\n  if (cy === program.y) {\n    if (cx > program.x) {\n      program.cuf(cx - program.x);\n    } else if (cx < program.x) {\n      program.cub(program.x - cx);\n    }\n  } else if (cx === program.x) {\n    if (cy > program.y) {\n      program.cud(cy - program.y);\n    } else if (cy < program.y) {\n      program.cuu(program.y - cy);\n    }\n  } else {\n    program.cup(cy, cx);\n  }\n};\n\nTextarea.prototype.input =\nTextarea.prototype.setInput =\nTextarea.prototype.readInput = function(callback) {\n  var self = this\n    , focused = this.screen.focused === this;\n\n  if (this._reading) return;\n  this._reading = true;\n\n  this._callback = callback;\n\n  if (!focused) {\n    this.screen.saveFocus();\n    this.focus();\n  }\n\n  this.screen.grabKeys = true;\n\n  this._updateCursor();\n  this.screen.program.showCursor();\n  //this.screen.program.sgr('normal');\n\n  this._done = function fn(err, value) {\n    if (!self._reading) return;\n\n    if (fn.done) return;\n    fn.done = true;\n\n    self._reading = false;\n\n    delete self._callback;\n    delete self._done;\n\n    self.removeListener('keypress', self.__listener);\n    delete self.__listener;\n\n    self.removeListener('blur', self.__done);\n    delete self.__done;\n\n    self.screen.program.hideCursor();\n    self.screen.grabKeys = false;\n\n    if (!focused) {\n      self.screen.restoreFocus();\n    }\n\n    if (self.options.inputOnFocus) {\n      self.screen.rewindFocus();\n    }\n\n    // Ugly\n    if (err === 'stop') return;\n\n    if (err) {\n      self.emit('error', err);\n    } else if (value != null) {\n      self.emit('submit', value);\n    } else {\n      self.emit('cancel', value);\n    }\n    self.emit('action', value);\n\n    if (!callback) return;\n\n    return err\n      ? callback(err)\n      : callback(null, value);\n  };\n\n  // Put this in a nextTick so the current\n  // key event doesn't trigger any keys input.\n  nextTick(function() {\n    self.__listener = self._listener.bind(self);\n    self.on('keypress', self.__listener);\n  });\n\n  this.__done = this._done.bind(this, null, null);\n  this.on('blur', this.__done);\n};\n\nTextarea.prototype._listener = function(ch, key) {\n  var done = this._done\n    , value = this.value;\n\n  if (key.name === 'return') return;\n  if (key.name === 'enter') {\n    ch = '\\n';\n  }\n\n  // TODO: Handle directional keys.\n  if (key.name === 'left' || key.name === 'right'\n      || key.name === 'up' || key.name === 'down') {\n    ;\n  }\n\n  if (this.options.keys && key.ctrl && key.name === 'e') {\n    return this.readEditor();\n  }\n\n  // TODO: Optimize typing by writing directly\n  // to the screen and screen buffer here.\n  if (key.name === 'escape') {\n    done(null, null);\n  } else if (key.name === 'backspace') {\n    if (this.value.length) {\n      if (this.screen.fullUnicode) {\n        if (unicode.isSurrogate(this.value, this.value.length - 2)) {\n        // || unicode.isCombining(this.value, this.value.length - 1)) {\n          this.value = this.value.slice(0, -2);\n        } else {\n          this.value = this.value.slice(0, -1);\n        }\n      } else {\n        this.value = this.value.slice(0, -1);\n      }\n    }\n  } else if (ch) {\n    if (!/^[\\x00-\\x08\\x0b-\\x0c\\x0e-\\x1f\\x7f]$/.test(ch)) {\n      this.value += ch;\n    }\n  }\n\n  if (this.value !== value) {\n    this.screen.render();\n  }\n};\n\nTextarea.prototype._typeScroll = function() {\n  // XXX Workaround\n  var height = this.height - this.iheight;\n  if (this._clines.length - this.childBase > height) {\n    this.scroll(this._clines.length);\n  }\n};\n\nTextarea.prototype.getValue = function() {\n  return this.value;\n};\n\nTextarea.prototype.setValue = function(value) {\n  if (value == null) {\n    value = this.value;\n  }\n  if (this._value !== value) {\n    this.value = value;\n    this._value = value;\n    this.setContent(this.value);\n    this._typeScroll();\n    this._updateCursor();\n  }\n};\n\nTextarea.prototype.clearInput =\nTextarea.prototype.clearValue = function() {\n  return this.setValue('');\n};\n\nTextarea.prototype.submit = function() {\n  if (!this.__listener) return;\n  return this.__listener('\\x1b', { name: 'escape' });\n};\n\nTextarea.prototype.cancel = function() {\n  if (!this.__listener) return;\n  return this.__listener('\\x1b', { name: 'escape' });\n};\n\nTextarea.prototype.render = function() {\n  this.setValue();\n  return this._render();\n};\n\nTextarea.prototype.editor =\nTextarea.prototype.setEditor =\nTextarea.prototype.readEditor = function(callback) {\n  var self = this;\n\n  if (this._reading) {\n    var _cb = this._callback\n      , cb = callback;\n\n    this._done('stop');\n\n    callback = function(err, value) {\n      if (_cb) _cb(err, value);\n      if (cb) cb(err, value);\n    };\n  }\n\n  if (!callback) {\n    callback = function() {};\n  }\n\n  return this.screen.readEditor({ value: this.value }, function(err, value) {\n    if (err) {\n      if (err.message === 'Unsuccessful.') {\n        self.screen.render();\n        return self.readInput(callback);\n      }\n      self.screen.render();\n      self.readInput(callback);\n      return callback(err);\n    }\n    self.setValue(value);\n    self.screen.render();\n    return self.readInput(callback);\n  });\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Textarea;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/textbox.js":"/**\n * textbox.js - textbox element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Textarea = require('./textarea');\n\n/**\n * Textbox\n */\n\nfunction Textbox(options) {\n  if (!(this instanceof Node)) {\n    return new Textbox(options);\n  }\n\n  options = options || {};\n\n  options.scrollable = false;\n\n  Textarea.call(this, options);\n\n  this.secret = options.secret;\n  this.censor = options.censor;\n}\n\nTextbox.prototype.__proto__ = Textarea.prototype;\n\nTextbox.prototype.type = 'textbox';\n\nTextbox.prototype.__olistener = Textbox.prototype._listener;\nTextbox.prototype._listener = function(ch, key) {\n  if (key.name === 'enter') {\n    this._done(null, this.value);\n    return;\n  }\n  return this.__olistener(ch, key);\n};\n\nTextbox.prototype.setValue = function(value) {\n  var visible, val;\n  if (value == null) {\n    value = this.value;\n  }\n  if (this._value !== value) {\n    value = value.replace(/\\n/g, '');\n    this.value = value;\n    this._value = value;\n    if (this.secret) {\n      this.setContent('');\n    } else if (this.censor) {\n      this.setContent(Array(this.value.length + 1).join('*'));\n    } else {\n      visible = -(this.width - this.iwidth - 1);\n      val = this.value.replace(/\\t/g, this.screen.tabc);\n      this.setContent(val.slice(visible));\n    }\n    this._updateCursor();\n  }\n};\n\nTextbox.prototype.submit = function() {\n  if (!this.__listener) return;\n  return this.__listener('\\r', { name: 'enter' });\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Textbox;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/button.js":"/**\n * button.js - button element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Input = require('./input');\n\n/**\n * Button\n */\n\nfunction Button(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Button(options);\n  }\n\n  options = options || {};\n\n  if (options.autoFocus == null) {\n    options.autoFocus = false;\n  }\n\n  Input.call(this, options);\n\n  this.on('keypress', function(ch, key) {\n    if (key.name === 'enter' || key.name === 'space') {\n      return self.press();\n    }\n  });\n\n  if (this.options.mouse) {\n    this.on('click', function() {\n      return self.press();\n    });\n  }\n}\n\nButton.prototype.__proto__ = Input.prototype;\n\nButton.prototype.type = 'button';\n\nButton.prototype.press = function() {\n  this.focus();\n  this.value = true;\n  var result = this.emit('press');\n  delete this.value;\n  return result;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Button;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/progressbar.js":"/**\n * progressbar.js - progress bar element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Input = require('./input');\n\n/**\n * ProgressBar\n */\n\nfunction ProgressBar(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new ProgressBar(options);\n  }\n\n  options = options || {};\n\n  Input.call(this, options);\n\n  this.filled = options.filled || 0;\n  if (typeof this.filled === 'string') {\n    this.filled = +this.filled.slice(0, -1);\n  }\n  this.value = this.filled;\n\n  this.pch = options.pch || ' ';\n\n  // XXX Workaround that predates the usage of `el.ch`.\n  if (options.ch) {\n    this.pch = options.ch;\n    this.ch = ' ';\n  }\n  if (options.bch) {\n    this.ch = options.bch;\n  }\n\n  if (!this.style.bar) {\n    this.style.bar = {};\n    this.style.bar.fg = options.barFg;\n    this.style.bar.bg = options.barBg;\n  }\n\n  this.orientation = options.orientation || 'horizontal';\n\n  if (options.keys) {\n    this.on('keypress', function(ch, key) {\n      var back, forward;\n      if (self.orientation === 'horizontal') {\n        back = ['left', 'h'];\n        forward = ['right', 'l'];\n      } else if (self.orientation === 'vertical') {\n        back = ['down', 'j'];\n        forward = ['up', 'k'];\n      }\n      if (key.name === back[0] || (options.vi && key.name === back[1])) {\n        self.progress(-5);\n        self.screen.render();\n        return;\n      }\n      if (key.name === forward[0] || (options.vi && key.name === forward[1])) {\n        self.progress(5);\n        self.screen.render();\n        return;\n      }\n    });\n  }\n\n  if (options.mouse) {\n    this.on('click', function(data) {\n      var x, y, m, p;\n      if (!self.lpos) return;\n      if (self.orientation === 'horizontal') {\n        x = data.x - self.lpos.xi;\n        m = (self.lpos.xl - self.lpos.xi) - self.iwidth;\n        p = x / m * 100 | 0;\n      } else if (self.orientation === 'vertical') {\n        y = data.y - self.lpos.yi;\n        m = (self.lpos.yl - self.lpos.yi) - self.iheight;\n        p = y / m * 100 | 0;\n      }\n      self.setProgress(p);\n    });\n  }\n}\n\nProgressBar.prototype.__proto__ = Input.prototype;\n\nProgressBar.prototype.type = 'progress-bar';\n\nProgressBar.prototype.render = function() {\n  var ret = this._render();\n  if (!ret) return;\n\n  var xi = ret.xi\n    , xl = ret.xl\n    , yi = ret.yi\n    , yl = ret.yl\n    , dattr;\n\n  if (this.border) xi++, yi++, xl--, yl--;\n\n  if (this.orientation === 'horizontal') {\n    xl = xi + ((xl - xi) * (this.filled / 100)) | 0;\n  } else if (this.orientation === 'vertical') {\n    yi = yi + ((yl - yi) - (((yl - yi) * (this.filled / 100)) | 0));\n  }\n\n  dattr = this.sattr(this.style.bar);\n\n  this.screen.fillRegion(dattr, this.pch, xi, xl, yi, yl);\n\n  if (this.content) {\n    var line = this.screen.lines[yi];\n    for (var i = 0; i < this.content.length; i++) {\n      line[xi + i][1] = this.content[i];\n    }\n    line.dirty = true;\n  }\n\n  return ret;\n};\n\nProgressBar.prototype.progress = function(filled) {\n  this.filled += filled;\n  if (this.filled < 0) this.filled = 0;\n  else if (this.filled > 100) this.filled = 100;\n  if (this.filled === 100) {\n    this.emit('complete');\n  }\n  this.value = this.filled;\n};\n\nProgressBar.prototype.setProgress = function(filled) {\n  this.filled = 0;\n  this.progress(filled);\n};\n\nProgressBar.prototype.reset = function() {\n  this.emit('reset');\n  this.filled = 0;\n  this.value = this.filled;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = ProgressBar;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/filemanager.js":"/**\n * filemanager.js - file manager element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar path = require('path')\n  , fs = require('fs');\n\nvar helpers = require('../helpers');\n\nvar Node = require('./node');\nvar List = require('./list');\n\n/**\n * FileManager\n */\n\nfunction FileManager(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new FileManager(options);\n  }\n\n  options = options || {};\n  options.parseTags = true;\n  // options.label = ' {blue-fg}%path{/blue-fg} ';\n\n  List.call(this, options);\n\n  this.cwd = options.cwd || process.cwd();\n  this.file = this.cwd;\n  this.value = this.cwd;\n\n  if (options.label && ~options.label.indexOf('%path')) {\n    this._label.setContent(options.label.replace('%path', this.cwd));\n  }\n\n  this.on('select', function(item) {\n    var value = item.content.replace(/\\{[^{}]+\\}/g, '').replace(/@$/, '')\n      , file = path.resolve(self.cwd, value);\n\n    return fs.stat(file, function(err, stat) {\n      if (err) {\n        return self.emit('error', err, file);\n      }\n      self.file = file;\n      self.value = file;\n      if (stat.isDirectory()) {\n        self.emit('cd', file, self.cwd);\n        self.cwd = file;\n        if (options.label && ~options.label.indexOf('%path')) {\n          self._label.setContent(options.label.replace('%path', file));\n        }\n        self.refresh();\n      } else {\n        self.emit('file', file);\n      }\n    });\n  });\n}\n\nFileManager.prototype.__proto__ = List.prototype;\n\nFileManager.prototype.type = 'file-manager';\n\nFileManager.prototype.refresh = function(cwd, callback) {\n  if (!callback) {\n    callback = cwd;\n    cwd = null;\n  }\n\n  var self = this;\n\n  if (cwd) this.cwd = cwd;\n  else cwd = this.cwd;\n\n  return fs.readdir(cwd, function(err, list) {\n    if (err && err.code === 'ENOENT') {\n      self.cwd = cwd !== process.env.HOME\n        ? process.env.HOME\n        : '/';\n      return self.refresh(callback);\n    }\n\n    if (err) {\n      if (callback) return callback(err);\n      return self.emit('error', err, cwd);\n    }\n\n    var dirs = []\n      , files = [];\n\n    list.unshift('..');\n\n    list.forEach(function(name) {\n      var f = path.resolve(cwd, name)\n        , stat;\n\n      try {\n        stat = fs.lstatSync(f);\n      } catch (e) {\n        ;\n      }\n\n      if ((stat && stat.isDirectory()) || name === '..') {\n        dirs.push({\n          name: name,\n          text: '{light-blue-fg}' + name + '{/light-blue-fg}/',\n          dir: true\n        });\n      } else if (stat && stat.isSymbolicLink()) {\n        files.push({\n          name: name,\n          text: '{light-cyan-fg}' + name + '{/light-cyan-fg}@',\n          dir: false\n        });\n      } else {\n        files.push({\n          name: name,\n          text: name,\n          dir: false\n        });\n      }\n    });\n\n    dirs = helpers.asort(dirs);\n    files = helpers.asort(files);\n\n    list = dirs.concat(files).map(function(data) {\n      return data.text;\n    });\n\n    self.setItems(list);\n    self.select(0);\n    self.screen.render();\n\n    self.emit('refresh');\n\n    if (callback) callback();\n  });\n};\n\nFileManager.prototype.pick = function(cwd, callback) {\n  if (!callback) {\n    callback = cwd;\n    cwd = null;\n  }\n\n  var self = this\n    , focused = this.screen.focused === this\n    , hidden = this.hidden\n    , onfile\n    , oncancel;\n\n  function resume() {\n    self.removeListener('file', onfile);\n    self.removeListener('cancel', oncancel);\n    if (hidden) {\n      self.hide();\n    }\n    if (!focused) {\n      self.screen.restoreFocus();\n    }\n    self.screen.render();\n  }\n\n  this.on('file', onfile = function(file) {\n    resume();\n    return callback(null, file);\n  });\n\n  this.on('cancel', oncancel = function() {\n    resume();\n    return callback();\n  });\n\n  this.refresh(cwd, function(err) {\n    if (err) return callback(err);\n\n    if (hidden) {\n      self.show();\n    }\n\n    if (!focused) {\n      self.screen.saveFocus();\n      self.focus();\n    }\n\n    self.screen.render();\n  });\n};\n\nFileManager.prototype.reset = function(cwd, callback) {\n  if (!callback) {\n    callback = cwd;\n    cwd = null;\n  }\n  this.cwd = cwd || this.options.cwd;\n  this.refresh(callback);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = FileManager;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/checkbox.js":"/**\n * checkbox.js - checkbox element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Input = require('./input');\n\n/**\n * Checkbox\n */\n\nfunction Checkbox(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Checkbox(options);\n  }\n\n  options = options || {};\n\n  Input.call(this, options);\n\n  this.text = options.content || options.text || '';\n  this.checked = this.value = options.checked || false;\n\n  this.on('keypress', function(ch, key) {\n    if (key.name === 'enter' || key.name === 'space') {\n      self.toggle();\n      self.screen.render();\n    }\n  });\n\n  if (options.mouse) {\n    this.on('click', function() {\n      self.toggle();\n      self.screen.render();\n    });\n  }\n\n  this.on('focus', function() {\n    var lpos = self.lpos;\n    if (!lpos) return;\n    self.screen.program.lsaveCursor('checkbox');\n    self.screen.program.cup(lpos.yi, lpos.xi + 1);\n    self.screen.program.showCursor();\n  });\n\n  this.on('blur', function() {\n    self.screen.program.lrestoreCursor('checkbox', true);\n  });\n}\n\nCheckbox.prototype.__proto__ = Input.prototype;\n\nCheckbox.prototype.type = 'checkbox';\n\nCheckbox.prototype.render = function() {\n  this.clearPos(true);\n  this.setContent('[' + (this.checked ? 'x' : ' ') + '] ' + this.text, true);\n  return this._render();\n};\n\nCheckbox.prototype.check = function() {\n  if (this.checked) return;\n  this.checked = this.value = true;\n  this.emit('check');\n};\n\nCheckbox.prototype.uncheck = function() {\n  if (!this.checked) return;\n  this.checked = this.value = false;\n  this.emit('uncheck');\n};\n\nCheckbox.prototype.toggle = function() {\n  return this.checked\n    ? this.uncheck()\n    : this.check();\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Checkbox;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/radioset.js":"/**\n * radioset.js - radio set element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * RadioSet\n */\n\nfunction RadioSet(options) {\n  if (!(this instanceof Node)) {\n    return new RadioSet(options);\n  }\n  options = options || {};\n  // Possibly inherit parent's style.\n  // options.style = this.parent.style;\n  Box.call(this, options);\n}\n\nRadioSet.prototype.__proto__ = Box.prototype;\n\nRadioSet.prototype.type = 'radio-set';\n\n/**\n * Expose\n */\n\nmodule.exports = RadioSet;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/radiobutton.js":"/**\n * radiobutton.js - radio button element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Checkbox = require('./checkbox');\n\n/**\n * RadioButton\n */\n\nfunction RadioButton(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new RadioButton(options);\n  }\n\n  options = options || {};\n\n  Checkbox.call(this, options);\n\n  this.on('check', function() {\n    var el = self;\n    while (el = el.parent) {\n      if (el.type === 'radio-set'\n          || el.type === 'form') break;\n    }\n    el = el || self.parent;\n    el.forDescendants(function(el) {\n      if (el.type !== 'radio-button' || el === self) {\n        return;\n      }\n      el.uncheck();\n    });\n  });\n}\n\nRadioButton.prototype.__proto__ = Checkbox.prototype;\n\nRadioButton.prototype.type = 'radio-button';\n\nRadioButton.prototype.render = function() {\n  this.clearPos(true);\n  this.setContent('(' + (this.checked ? '*' : ' ') + ') ' + this.text, true);\n  return this._render();\n};\n\nRadioButton.prototype.toggle = RadioButton.prototype.check;\n\n/**\n * Expose\n */\n\nmodule.exports = RadioButton;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/prompt.js":"/**\n * prompt.js - prompt element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\nvar Button = require('./button');\nvar Textbox = require('./textbox');\n\n/**\n * Prompt\n */\n\nfunction Prompt(options) {\n  if (!(this instanceof Node)) {\n    return new Prompt(options);\n  }\n\n  options = options || {};\n\n  options.hidden = true;\n\n  Box.call(this, options);\n\n  this._.input = new Textbox({\n    parent: this,\n    top: 3,\n    height: 1,\n    left: 2,\n    right: 2,\n    bg: 'black'\n  });\n\n  this._.okay = new Button({\n    parent: this,\n    top: 5,\n    height: 1,\n    left: 2,\n    width: 6,\n    content: 'Okay',\n    align: 'center',\n    bg: 'black',\n    hoverBg: 'blue',\n    autoFocus: false,\n    mouse: true\n  });\n\n  this._.cancel = new Button({\n    parent: this,\n    top: 5,\n    height: 1,\n    shrink: true,\n    left: 10,\n    width: 8,\n    content: 'Cancel',\n    align: 'center',\n    bg: 'black',\n    hoverBg: 'blue',\n    autoFocus: false,\n    mouse: true\n  });\n}\n\nPrompt.prototype.__proto__ = Box.prototype;\n\nPrompt.prototype.type = 'prompt';\n\nPrompt.prototype.input =\nPrompt.prototype.setInput =\nPrompt.prototype.readInput = function(text, value, callback) {\n  var self = this;\n  var okay, cancel;\n\n  if (!callback) {\n    callback = value;\n    value = '';\n  }\n\n  // Keep above:\n  // var parent = this.parent;\n  // this.detach();\n  // parent.append(this);\n\n  this.show();\n  this.setContent(' ' + text);\n\n  this._.input.value = value;\n\n  this.screen.saveFocus();\n\n  this._.okay.on('press', okay = function() {\n    self._.input.submit();\n  });\n\n  this._.cancel.on('press', cancel = function() {\n    self._.input.cancel();\n  });\n\n  this._.input.readInput(function(err, data) {\n    self.hide();\n    self.screen.restoreFocus();\n    self._.okay.removeListener('press', okay);\n    self._.cancel.removeListener('press', cancel);\n    return callback(err, data);\n  });\n\n  this.screen.render();\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Prompt;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/question.js":"/**\n * question.js - question element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\nvar Button = require('./button');\n\n/**\n * Question\n */\n\nfunction Question(options) {\n  if (!(this instanceof Node)) {\n    return new Question(options);\n  }\n\n  options = options || {};\n  options.hidden = true;\n\n  Box.call(this, options);\n\n  this._.okay = new Button({\n    screen: this.screen,\n    parent: this,\n    top: 2,\n    height: 1,\n    left: 2,\n    width: 6,\n    content: 'Okay',\n    align: 'center',\n    bg: 'black',\n    hoverBg: 'blue',\n    autoFocus: false,\n    mouse: true\n  });\n\n  this._.cancel = new Button({\n    screen: this.screen,\n    parent: this,\n    top: 2,\n    height: 1,\n    shrink: true,\n    left: 10,\n    width: 8,\n    content: 'Cancel',\n    align: 'center',\n    bg: 'black',\n    hoverBg: 'blue',\n    autoFocus: false,\n    mouse: true\n  });\n}\n\nQuestion.prototype.__proto__ = Box.prototype;\n\nQuestion.prototype.type = 'question';\n\nQuestion.prototype.ask = function(text, callback) {\n  var self = this;\n  var press, okay, cancel;\n\n  // Keep above:\n  // var parent = this.parent;\n  // this.detach();\n  // parent.append(this);\n\n  this.show();\n  this.setContent(' ' + text);\n\n  this.onScreenEvent('keypress', press = function(ch, key) {\n    if (key.name === 'mouse') return;\n    if (key.name !== 'enter'\n        && key.name !== 'escape'\n        && key.name !== 'q'\n        && key.name !== 'y'\n        && key.name !== 'n') {\n      return;\n    }\n    done(null, key.name === 'enter' || key.name === 'y');\n  });\n\n  this._.okay.on('press', okay = function() {\n    done(null, true);\n  });\n\n  this._.cancel.on('press', cancel = function() {\n    done(null, false);\n  });\n\n  this.screen.saveFocus();\n  this.focus();\n\n  function done(err, data) {\n    self.hide();\n    self.screen.restoreFocus();\n    self.removeScreenEvent('keypress', press);\n    self._.okay.removeListener('press', okay);\n    self._.cancel.removeListener('press', cancel);\n    return callback(err, data);\n  }\n\n  this.screen.render();\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Question;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/message.js":"/**\n * message.js - message element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Message / Error\n */\n\nfunction Message(options) {\n  if (!(this instanceof Node)) {\n    return new Message(options);\n  }\n\n  options = options || {};\n  options.tags = true;\n\n  Box.call(this, options);\n}\n\nMessage.prototype.__proto__ = Box.prototype;\n\nMessage.prototype.type = 'message';\n\nMessage.prototype.log =\nMessage.prototype.display = function(text, time, callback) {\n  var self = this;\n\n  if (typeof time === 'function') {\n    callback = time;\n    time = null;\n  }\n\n  if (time == null) time = 3;\n\n  // Keep above:\n  // var parent = this.parent;\n  // this.detach();\n  // parent.append(this);\n\n  if (this.scrollable) {\n    this.screen.saveFocus();\n    this.focus();\n    this.scrollTo(0);\n  }\n\n  this.show();\n  this.setContent(text);\n  this.screen.render();\n\n  if (time === Infinity || time === -1 || time === 0) {\n    var end = function() {\n      if (end.done) return;\n      end.done = true;\n      if (self.scrollable) {\n        try {\n          self.screen.restoreFocus();\n        } catch (e) {\n          ;\n        }\n      }\n      self.hide();\n      self.screen.render();\n      if (callback) callback();\n    };\n\n    setTimeout(function() {\n      self.onScreenEvent('keypress', function fn(ch, key) {\n        if (key.name === 'mouse') return;\n        if (self.scrollable) {\n          if ((key.name === 'up' || (self.options.vi && key.name === 'k'))\n            || (key.name === 'down' || (self.options.vi && key.name === 'j'))\n            || (self.options.vi && key.name === 'u' && key.ctrl)\n            || (self.options.vi && key.name === 'd' && key.ctrl)\n            || (self.options.vi && key.name === 'b' && key.ctrl)\n            || (self.options.vi && key.name === 'f' && key.ctrl)\n            || (self.options.vi && key.name === 'g' && !key.shift)\n            || (self.options.vi && key.name === 'g' && key.shift)) {\n            return;\n          }\n        }\n        if (self.options.ignoreKeys && ~self.options.ignoreKeys.indexOf(key.name)) {\n          return;\n        }\n        self.removeScreenEvent('keypress', fn);\n        end();\n      });\n      // XXX May be affected by new element.options.mouse option.\n      if (!self.options.mouse) return;\n      self.onScreenEvent('mouse', function fn(data) {\n        if (data.action === 'mousemove') return;\n        self.removeScreenEvent('mouse', fn);\n        end();\n      });\n    }, 10);\n\n    return;\n  }\n\n  setTimeout(function() {\n    self.hide();\n    self.screen.render();\n    if (callback) callback();\n  }, time * 1000);\n};\n\nMessage.prototype.error = function(text, time, callback) {\n  return this.display('{red-fg}Error: ' + text + '{/red-fg}', time, callback);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Message;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/loading.js":"/**\n * loading.js - loading element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\nvar Text = require('./text');\n\n/**\n * Loading\n */\n\nfunction Loading(options) {\n  if (!(this instanceof Node)) {\n    return new Loading(options);\n  }\n\n  options = options || {};\n\n  Box.call(this, options);\n\n  this._.icon = new Text({\n    parent: this,\n    align: 'center',\n    top: 2,\n    left: 1,\n    right: 1,\n    height: 1,\n    content: '|'\n  });\n}\n\nLoading.prototype.__proto__ = Box.prototype;\n\nLoading.prototype.type = 'loading';\n\nLoading.prototype.load = function(text) {\n  var self = this;\n\n  // XXX Keep above:\n  // var parent = this.parent;\n  // this.detach();\n  // parent.append(this);\n\n  this.show();\n  this.setContent(text);\n\n  if (this._.timer) {\n    this.stop();\n  }\n\n  this.screen.lockKeys = true;\n\n  this._.timer = setInterval(function() {\n    if (self._.icon.content === '|') {\n      self._.icon.setContent('/');\n    } else if (self._.icon.content === '/') {\n      self._.icon.setContent('-');\n    } else if (self._.icon.content === '-') {\n      self._.icon.setContent('\\\\');\n    } else if (self._.icon.content === '\\\\') {\n      self._.icon.setContent('|');\n    }\n    self.screen.render();\n  }, 200);\n};\n\nLoading.prototype.stop = function() {\n  this.screen.lockKeys = false;\n  this.hide();\n  if (this._.timer) {\n    clearInterval(this._.timer);\n    delete this._.timer;\n  }\n  this.screen.render();\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Loading;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/listbar.js":"/**\n * listbar.js - listbar element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar helpers = require('../helpers');\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Listbar / HorizontalList\n */\n\nfunction Listbar(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Listbar(options);\n  }\n\n  options = options || {};\n\n  this.items = [];\n  this.ritems = [];\n  this.commands = [];\n\n  this.leftBase = 0;\n  this.leftOffset = 0;\n\n  this.mouse = options.mouse || false;\n\n  Box.call(this, options);\n\n  if (!this.style.selected) {\n    this.style.selected = {};\n  }\n\n  if (!this.style.item) {\n    this.style.item = {};\n  }\n\n  if (options.commands || options.items) {\n    this.setItems(options.commands || options.items);\n  }\n\n  if (options.keys) {\n    this.on('keypress', function(ch, key) {\n      if (key.name === 'left'\n          || (options.vi && key.name === 'h')\n          || (key.shift && key.name === 'tab')) {\n        self.moveLeft();\n        self.screen.render();\n        // Stop propagation if we're in a form.\n        if (key.name === 'tab') return false;\n        return;\n      }\n      if (key.name === 'right'\n          || (options.vi && key.name === 'l')\n          || key.name === 'tab') {\n        self.moveRight();\n        self.screen.render();\n        // Stop propagation if we're in a form.\n        if (key.name === 'tab') return false;\n        return;\n      }\n      if (key.name === 'enter'\n          || (options.vi && key.name === 'k' && !key.shift)) {\n        self.emit('action', self.items[self.selected], self.selected);\n        self.emit('select', self.items[self.selected], self.selected);\n        var item = self.items[self.selected];\n        if (item._.cmd.callback) {\n          item._.cmd.callback();\n        }\n        self.screen.render();\n        return;\n      }\n      if (key.name === 'escape' || (options.vi && key.name === 'q')) {\n        self.emit('action');\n        self.emit('cancel');\n        return;\n      }\n    });\n  }\n\n  if (options.autoCommandKeys) {\n    this.onScreenEvent('keypress', function(ch) {\n      if (/^[0-9]$/.test(ch)) {\n        var i = +ch - 1;\n        if (!~i) i = 9;\n        return self.selectTab(i);\n      }\n    });\n  }\n\n  this.on('focus', function() {\n    self.select(self.selected);\n  });\n}\n\nListbar.prototype.__proto__ = Box.prototype;\n\nListbar.prototype.type = 'listbar';\n\nListbar.prototype.__defineGetter__('selected', function() {\n  return this.leftBase + this.leftOffset;\n});\n\nListbar.prototype.setItems = function(commands) {\n  var self = this;\n\n  if (!Array.isArray(commands)) {\n    commands = Object.keys(commands).reduce(function(obj, key, i) {\n      var cmd = commands[key]\n        , cb;\n\n      if (typeof cmd === 'function') {\n        cb = cmd;\n        cmd = { callback: cb };\n      }\n\n      if (cmd.text == null) cmd.text = key;\n      if (cmd.prefix == null) cmd.prefix = ++i + '';\n\n      if (cmd.text == null && cmd.callback) {\n        cmd.text = cmd.callback.name;\n      }\n\n      obj.push(cmd);\n\n      return obj;\n    }, []);\n  }\n\n  this.items.forEach(function(el) {\n    el.detach();\n  });\n\n  this.items = [];\n  this.ritems = [];\n  this.commands = [];\n\n  commands.forEach(function(cmd) {\n    self.add(cmd);\n  });\n\n  this.emit('set items');\n};\n\nListbar.prototype.add =\nListbar.prototype.addItem =\nListbar.prototype.appendItem = function(item, callback) {\n  var self = this\n    , prev = this.items[this.items.length - 1]\n    , drawn\n    , cmd\n    , title\n    , len;\n\n  if (!this.parent) {\n    drawn = 0;\n  } else {\n    drawn = prev ? prev.aleft + prev.width : 0;\n    if (!this.screen.autoPadding) {\n      drawn += this.ileft;\n    }\n  }\n\n  if (typeof item === 'object') {\n    cmd = item;\n    if (cmd.prefix == null) cmd.prefix = (this.items.length + 1) + '';\n  }\n\n  if (typeof item === 'string') {\n    cmd = {\n      prefix: (this.items.length + 1) + '',\n      text: item,\n      callback: callback\n    };\n  }\n\n  if (typeof item === 'function') {\n    cmd = {\n      prefix: (this.items.length + 1) + '',\n      text: item.name,\n      callback: item\n    };\n  }\n\n  if (cmd.keys && cmd.keys[0]) {\n    cmd.prefix = cmd.keys[0];\n  }\n\n  var t = helpers.generateTags(this.style.prefix || { fg: 'lightblack' });\n\n  title = (cmd.prefix != null ? t.open + cmd.prefix + t.close + ':' : '') + cmd.text;\n\n  len = ((cmd.prefix != null ? cmd.prefix + ':' : '') + cmd.text).length;\n\n  var options = {\n    screen: this.screen,\n    top: 0,\n    left: drawn + 1,\n    height: 1,\n    content: title,\n    width: len + 2,\n    align: 'center',\n    autoFocus: false,\n    tags: true,\n    mouse: true,\n    style: helpers.merge({}, this.style.item),\n    noOverflow: true\n  };\n\n  if (!this.screen.autoPadding) {\n    options.top += this.itop;\n    options.left += this.ileft;\n  }\n\n  ['bg', 'fg', 'bold', 'underline',\n   'blink', 'inverse', 'invisible'].forEach(function(name) {\n    options.style[name] = function() {\n      var attr = self.items[self.selected] === el\n        ? self.style.selected[name]\n        : self.style.item[name];\n      if (typeof attr === 'function') attr = attr(el);\n      return attr;\n    };\n  });\n\n  var el = new Box(options);\n\n  this._[cmd.text] = el;\n  cmd.element = el;\n  el._.cmd = cmd;\n\n  this.ritems.push(cmd.text);\n  this.items.push(el);\n  this.commands.push(cmd);\n  this.append(el);\n\n  if (cmd.callback) {\n    if (cmd.keys) {\n      this.screen.key(cmd.keys, function() {\n        self.emit('action', el, self.selected);\n        self.emit('select', el, self.selected);\n        if (el._.cmd.callback) {\n          el._.cmd.callback();\n        }\n        self.select(el);\n        self.screen.render();\n      });\n    }\n  }\n\n  if (this.items.length === 1) {\n    this.select(0);\n  }\n\n  // XXX May be affected by new element.options.mouse option.\n  if (this.mouse) {\n    el.on('click', function() {\n      self.emit('action', el, self.selected);\n      self.emit('select', el, self.selected);\n      if (el._.cmd.callback) {\n        el._.cmd.callback();\n      }\n      self.select(el);\n      self.screen.render();\n    });\n  }\n\n  this.emit('add item');\n};\n\nListbar.prototype.render = function() {\n  var self = this\n    , drawn = 0;\n\n  if (!this.screen.autoPadding) {\n    drawn += this.ileft;\n  }\n\n  this.items.forEach(function(el, i) {\n    if (i < self.leftBase) {\n      el.hide();\n    } else {\n      el.rleft = drawn + 1;\n      drawn += el.width + 2;\n      el.show();\n    }\n  });\n\n  return this._render();\n};\n\nListbar.prototype.select = function(offset) {\n  if (typeof offset !== 'number') {\n    offset = this.items.indexOf(offset);\n  }\n\n  if (offset < 0) {\n    offset = 0;\n  } else if (offset >= this.items.length) {\n    offset = this.items.length - 1;\n  }\n\n  if (!this.parent) {\n    this.emit('select item', this.items[offset], offset);\n    return;\n  }\n\n  var lpos = this._getCoords();\n  if (!lpos) return;\n\n  var self = this\n    , width = (lpos.xl - lpos.xi) - this.iwidth\n    , drawn = 0\n    , visible = 0\n    , el;\n\n  el = this.items[offset];\n  if (!el) return;\n\n  this.items.forEach(function(el, i) {\n    if (i < self.leftBase) return;\n\n    var lpos = el._getCoords();\n    if (!lpos) return;\n\n    if (lpos.xl - lpos.xi <= 0) return;\n\n    drawn += (lpos.xl - lpos.xi) + 2;\n\n    if (drawn <= width) visible++;\n  });\n\n  var diff = offset - (this.leftBase + this.leftOffset);\n  if (offset > this.leftBase + this.leftOffset) {\n    if (offset > this.leftBase + visible - 1) {\n      this.leftOffset = 0;\n      this.leftBase = offset;\n    } else {\n      this.leftOffset += diff;\n    }\n  } else if (offset < this.leftBase + this.leftOffset) {\n    diff = -diff;\n    if (offset < this.leftBase) {\n      this.leftOffset = 0;\n      this.leftBase = offset;\n    } else {\n      this.leftOffset -= diff;\n    }\n  }\n\n  // XXX Move `action` and `select` events here.\n  this.emit('select item', el, offset);\n};\n\nListbar.prototype.removeItem = function(child) {\n  var i = typeof child !== 'number'\n    ? this.items.indexOf(child)\n    : child;\n\n  if (~i && this.items[i]) {\n    child = this.items.splice(i, 1)[0];\n    this.ritems.splice(i, 1);\n    this.commands.splice(i, 1);\n    this.remove(child);\n    if (i === this.selected) {\n      this.select(i - 1);\n    }\n  }\n\n  this.emit('remove item');\n};\n\nListbar.prototype.move = function(offset) {\n  this.select(this.selected + offset);\n};\n\nListbar.prototype.moveLeft = function(offset) {\n  this.move(-(offset || 1));\n};\n\nListbar.prototype.moveRight = function(offset) {\n  this.move(offset || 1);\n};\n\nListbar.prototype.selectTab = function(index) {\n  var item = this.items[index];\n  if (item) {\n    if (item._.cmd.callback) {\n      item._.cmd.callback();\n    }\n    this.select(index);\n    this.screen.render();\n  }\n  this.emit('select tab', item, index);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Listbar;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/table.js":"/**\n * table.js - table element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Table\n */\n\nfunction Table(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Table(options);\n  }\n\n  options = options || {};\n  options.shrink = true;\n  options.style = options.style || {};\n  options.style.border = options.style.border || {};\n  options.style.header = options.style.header || {};\n  options.style.cell = options.style.cell || {};\n  options.align = options.align || 'center';\n\n  // Regular tables do not get custom height (this would\n  // require extra padding). Maybe add in the future.\n  delete options.height;\n\n  Box.call(this, options);\n\n  this.pad = options.pad != null\n    ? options.pad\n    : 2;\n\n  this.setData(options.rows || options.data);\n\n  this.on('attach', function() {\n    self.setContent('');\n    self.setData(self.rows);\n  });\n\n  this.on('resize', function() {\n    self.setContent('');\n    self.setData(self.rows);\n    self.screen.render();\n  });\n}\n\nTable.prototype.__proto__ = Box.prototype;\n\nTable.prototype.type = 'table';\n\nTable.prototype._calculateMaxes = function() {\n  var self = this;\n  var maxes = [];\n\n  if (this.detached) return;\n\n  this.rows = this.rows || [];\n\n  this.rows.forEach(function(row) {\n    row.forEach(function(cell, i) {\n      var clen = self.strWidth(cell);\n      if (!maxes[i] || maxes[i] < clen) {\n        maxes[i] = clen;\n      }\n    });\n  });\n\n  var total = maxes.reduce(function(total, max) {\n    return total + max;\n  }, 0);\n  total += maxes.length + 1;\n\n  // XXX There might be an issue with resizing where on the first resize event\n  // width appears to be less than total if it's a percentage or left/right\n  // combination.\n  if (this.width < total) {\n    delete this.position.width;\n  }\n\n  if (this.position.width != null) {\n    var missing = this.width - total;\n    var w = missing / maxes.length | 0;\n    var wr = missing % maxes.length;\n    maxes = maxes.map(function(max, i) {\n      if (i === maxes.length - 1) {\n        return max + w + wr;\n      }\n      return max + w;\n    });\n  } else {\n    maxes = maxes.map(function(max) {\n      return max + self.pad;\n    });\n  }\n\n  return this._maxes = maxes;\n};\n\nTable.prototype.setRows =\nTable.prototype.setData = function(rows) {\n  var self = this\n    , text = ''\n    , align = this.align;\n\n  this.rows = rows || [];\n\n  this._calculateMaxes();\n\n  if (!this._maxes) return;\n\n  this.rows.forEach(function(row, i) {\n    var isFooter = i === self.rows.length - 1;\n    row.forEach(function(cell, i) {\n      var width = self._maxes[i];\n      var clen = self.strWidth(cell);\n\n      if (i !== 0) {\n        text += ' ';\n      }\n\n      while (clen < width) {\n        if (align === 'center') {\n          cell = ' ' + cell + ' ';\n          clen += 2;\n        } else if (align === 'left') {\n          cell = cell + ' ';\n          clen += 1;\n        } else if (align === 'right') {\n          cell = ' ' + cell;\n          clen += 1;\n        }\n      }\n\n      if (clen > width) {\n        if (align === 'center') {\n          cell = cell.substring(1);\n          clen--;\n        } else if (align === 'left') {\n          cell = cell.slice(0, -1);\n          clen--;\n        } else if (align === 'right') {\n          cell = cell.substring(1);\n          clen--;\n        }\n      }\n\n      text += cell;\n    });\n    if (!isFooter) {\n      text += '\\n\\n';\n    }\n  });\n\n  delete this.align;\n  this.setContent(text);\n  this.align = align;\n};\n\nTable.prototype.render = function() {\n  var self = this;\n\n  var coords = this._render();\n  if (!coords) return;\n\n  this._calculateMaxes();\n\n  if (!this._maxes) return coords;\n\n  var lines = this.screen.lines\n    , xi = coords.xi\n    , yi = coords.yi\n    , rx\n    , ry\n    , i;\n\n  var dattr = this.sattr(this.style)\n    , hattr = this.sattr(this.style.header)\n    , cattr = this.sattr(this.style.cell)\n    , battr = this.sattr(this.style.border);\n\n  var width = coords.xl - coords.xi - this.iright\n    , height = coords.yl - coords.yi - this.ibottom;\n\n  // Apply attributes to header cells and cells.\n  for (var y = this.itop; y < height; y++) {\n    if (!lines[yi + y]) break;\n    for (var x = this.ileft; x < width; x++) {\n      if (!lines[yi + y][xi + x]) break;\n      // Check to see if it's not the default attr. Allows for tags:\n      if (lines[yi + y][xi + x][0] !== dattr) continue;\n      if (y === this.itop) {\n        lines[yi + y][xi + x][0] = hattr;\n      } else {\n        lines[yi + y][xi + x][0] = cattr;\n      }\n      lines[yi + y].dirty = true;\n    }\n  }\n\n  if (!this.border || this.options.noCellBorders) return coords;\n\n  // Draw border with correct angles.\n  ry = 0;\n  for (i = 0; i < self.rows.length + 1; i++) {\n    if (!lines[yi + ry]) break;\n    rx = 0;\n    self._maxes.forEach(function(max, i) {\n      rx += max;\n      if (i === 0) {\n        if (!lines[yi + ry][xi + 0]) return;\n        // left side\n        if (ry === 0) {\n          // top\n          lines[yi + ry][xi + 0][0] = battr;\n          // lines[yi + ry][xi + 0][1] = '\\u250c'; // '┌'\n        } else if (ry / 2 === self.rows.length) {\n          // bottom\n          lines[yi + ry][xi + 0][0] = battr;\n          // lines[yi + ry][xi + 0][1] = '\\u2514'; // '└'\n        } else {\n          // middle\n          lines[yi + ry][xi + 0][0] = battr;\n          lines[yi + ry][xi + 0][1] = '\\u251c'; // '├'\n          // XXX If we alter iwidth and ileft for no borders - nothing should be written here\n          if (!self.border.left) {\n            lines[yi + ry][xi + 0][1] = '\\u2500'; // '─'\n          }\n        }\n        lines[yi + ry].dirty = true;\n      } else if (i === self._maxes.length - 1) {\n        if (!lines[yi + ry][xi + rx + 1]) return;\n        // right side\n        if (ry === 0) {\n          // top\n          rx++;\n          lines[yi + ry][xi + rx][0] = battr;\n          // lines[yi + ry][xi + rx][1] = '\\u2510'; // '┐'\n        } else if (ry / 2 === self.rows.length) {\n          // bottom\n          rx++;\n          lines[yi + ry][xi + rx][0] = battr;\n          // lines[yi + ry][xi + rx][1] = '\\u2518'; // '┘'\n        } else {\n          // middle\n          rx++;\n          lines[yi + ry][xi + rx][0] = battr;\n          lines[yi + ry][xi + rx][1] = '\\u2524'; // '┤'\n          // XXX If we alter iwidth and iright for no borders - nothing should be written here\n          if (!self.border.right) {\n            lines[yi + ry][xi + rx][1] = '\\u2500'; // '─'\n          }\n        }\n        lines[yi + ry].dirty = true;\n        return;\n      }\n      if (!lines[yi + ry][xi + rx + 1]) return;\n      // center\n      if (ry === 0) {\n        // top\n        rx++;\n        lines[yi + ry][xi + rx][0] = battr;\n        lines[yi + ry][xi + rx][1] = '\\u252c'; // '┬'\n        // XXX If we alter iheight and itop for no borders - nothing should be written here\n        if (!self.border.top) {\n          lines[yi + ry][xi + rx][1] = '\\u2502'; // '│'\n        }\n      } else if (ry / 2 === self.rows.length) {\n        // bottom\n        rx++;\n        lines[yi + ry][xi + rx][0] = battr;\n        lines[yi + ry][xi + rx][1] = '\\u2534'; // '┴'\n        // XXX If we alter iheight and ibottom for no borders - nothing should be written here\n        if (!self.border.bottom) {\n          lines[yi + ry][xi + rx][1] = '\\u2502'; // '│'\n        }\n      } else {\n        // middle\n        if (self.options.fillCellBorders) {\n          var lbg = (ry <= 2 ? hattr : cattr) & 0x1ff;\n          rx++;\n          lines[yi + ry][xi + rx][0] = (battr & ~0x1ff) | lbg;\n        } else {\n          rx++;\n          lines[yi + ry][xi + rx][0] = battr;\n        }\n        lines[yi + ry][xi + rx][1] = '\\u253c'; // '┼'\n        // rx++;\n      }\n      lines[yi + ry].dirty = true;\n    });\n    ry += 2;\n  }\n\n  // Draw internal borders.\n  for (ry = 1; ry < self.rows.length * 2; ry++) {\n    if (!lines[yi + ry]) break;\n    rx = 0;\n    self._maxes.slice(0, -1).forEach(function(max) {\n      rx += max;\n      if (!lines[yi + ry][xi + rx + 1]) return;\n      if (ry % 2 !== 0) {\n        if (self.options.fillCellBorders) {\n          var lbg = (ry <= 2 ? hattr : cattr) & 0x1ff;\n          rx++;\n          lines[yi + ry][xi + rx][0] = (battr & ~0x1ff) | lbg;\n        } else {\n          rx++;\n          lines[yi + ry][xi + rx][0] = battr;\n        }\n        lines[yi + ry][xi + rx][1] = '\\u2502'; // '│'\n        lines[yi + ry].dirty = true;\n      } else {\n        rx++;\n      }\n    });\n    rx = 1;\n    self._maxes.forEach(function(max) {\n      while (max--) {\n        if (ry % 2 === 0) {\n          if (!lines[yi + ry]) break;\n          if (!lines[yi + ry][xi + rx + 1]) break;\n          if (self.options.fillCellBorders) {\n            var lbg = (ry <= 2 ? hattr : cattr) & 0x1ff;\n            lines[yi + ry][xi + rx][0] = (battr & ~0x1ff) | lbg;\n          } else {\n            lines[yi + ry][xi + rx][0] = battr;\n          }\n          lines[yi + ry][xi + rx][1] = '\\u2500'; // '─'\n          lines[yi + ry].dirty = true;\n        }\n        rx++;\n      }\n      rx++;\n    });\n  }\n\n  return coords;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Table;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/listtable.js":"/**\n * listtable.js - list table element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\nvar List = require('./list');\nvar Table = require('./table');\n\n/**\n * ListTable\n */\n\nfunction ListTable(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new ListTable(options);\n  }\n\n  options = options || {};\n  options.shrink = true;\n  options.normalShrink = true;\n  options.style = options.style || {};\n  options.style.border = options.style.border || {};\n  options.style.header = options.style.header || {};\n  options.style.cell = options.style.cell || {};\n  this.__align = options.align || 'center';\n  delete options.align;\n\n  options.style.selected = options.style.cell.selected;\n  options.style.item = options.style.cell;\n\n  List.call(this, options);\n\n  this._header = new Box({\n    parent: this,\n    left: this.screen.autoPadding ? 0 : this.ileft,\n    top: 0,\n    width: 'shrink',\n    height: 1,\n    style: options.style.header,\n    tags: options.parseTags || options.tags\n  });\n\n  this.on('scroll', function() {\n    self._header.setFront();\n    self._header.rtop = self.childBase;\n    if (!self.screen.autoPadding) {\n      self._header.rtop = self.childBase + (self.border ? 1 : 0);\n    }\n  });\n\n  this.pad = options.pad != null\n    ? options.pad\n    : 2;\n\n  this.setData(options.rows || options.data);\n\n  this.on('attach', function() {\n    self.setData(self.rows);\n  });\n\n  this.on('resize', function() {\n    var selected = self.selected;\n    self.setData(self.rows);\n    self.select(selected);\n    self.screen.render();\n  });\n}\n\nListTable.prototype.__proto__ = List.prototype;\n\nListTable.prototype.type = 'list-table';\n\nListTable.prototype._calculateMaxes = Table.prototype._calculateMaxes;\n\nListTable.prototype.setRows =\nListTable.prototype.setData = function(rows) {\n  var self = this\n    , align = this.__align;\n\n  if (this.visible && this.lpos) {\n    this.clearPos();\n  }\n\n  this.clearItems();\n\n  this.rows = rows || [];\n\n  this._calculateMaxes();\n\n  if (!this._maxes) return;\n\n  this.addItem('');\n\n  this.rows.forEach(function(row, i) {\n    var isHeader = i === 0;\n    var text = '';\n    row.forEach(function(cell, i) {\n      var width = self._maxes[i];\n      var clen = self.strWidth(cell);\n\n      if (i !== 0) {\n        text += ' ';\n      }\n\n      while (clen < width) {\n        if (align === 'center') {\n          cell = ' ' + cell + ' ';\n          clen += 2;\n        } else if (align === 'left') {\n          cell = cell + ' ';\n          clen += 1;\n        } else if (align === 'right') {\n          cell = ' ' + cell;\n          clen += 1;\n        }\n      }\n\n      if (clen > width) {\n        if (align === 'center') {\n          cell = cell.substring(1);\n          clen--;\n        } else if (align === 'left') {\n          cell = cell.slice(0, -1);\n          clen--;\n        } else if (align === 'right') {\n          cell = cell.substring(1);\n          clen--;\n        }\n      }\n\n      text += cell;\n    });\n    if (isHeader) {\n      self._header.setContent(text);\n    } else {\n      self.addItem(text);\n    }\n  });\n\n  this._header.setFront();\n\n  this.select(0);\n};\n\nListTable.prototype._select = ListTable.prototype.select;\nListTable.prototype.select = function(i) {\n  if (i === 0) {\n    i = 1;\n  }\n  if (i <= this.childBase) {\n    this.setScroll(this.childBase - 1);\n  }\n  return this._select(i);\n};\n\nListTable.prototype.render = function() {\n  var self = this;\n\n  var coords = this._render();\n  if (!coords) return;\n\n  this._calculateMaxes();\n\n  if (!this._maxes) return coords;\n\n  var lines = this.screen.lines\n    , xi = coords.xi\n    , yi = coords.yi\n    , rx\n    , ry\n    , i;\n\n  var battr = this.sattr(this.style.border);\n\n  var height = coords.yl - coords.yi - this.ibottom;\n\n  if (!this.border || this.options.noCellBorders) return coords;\n\n  // Draw border with correct angles.\n  ry = 0;\n  for (i = 0; i < height + 1; i++) {\n    if (!lines[yi + ry]) break;\n    rx = 0;\n    self._maxes.slice(0, -1).forEach(function(max) {\n      rx += max;\n      if (!lines[yi + ry][xi + rx + 1]) return;\n      // center\n      if (ry === 0) {\n        // top\n        rx++;\n        lines[yi + ry][xi + rx][0] = battr;\n        lines[yi + ry][xi + rx][1] = '\\u252c'; // '┬'\n        // XXX If we alter iheight and itop for no borders - nothing should be written here\n        if (!self.border.top) {\n          lines[yi + ry][xi + rx][1] = '\\u2502'; // '│'\n        }\n        lines[yi + ry].dirty = true;\n      } else if (ry === height) {\n        // bottom\n        rx++;\n        lines[yi + ry][xi + rx][0] = battr;\n        lines[yi + ry][xi + rx][1] = '\\u2534'; // '┴'\n        // XXX If we alter iheight and ibottom for no borders - nothing should be written here\n        if (!self.border.bottom) {\n          lines[yi + ry][xi + rx][1] = '\\u2502'; // '│'\n        }\n        lines[yi + ry].dirty = true;\n      } else {\n        // middle\n        rx++;\n      }\n    });\n    ry += 1;\n  }\n\n  // Draw internal borders.\n  for (ry = 1; ry < height; ry++) {\n    if (!lines[yi + ry]) break;\n    rx = 0;\n    self._maxes.slice(0, -1).forEach(function(max) {\n      rx += max;\n      if (!lines[yi + ry][xi + rx + 1]) return;\n      if (self.options.fillCellBorders !== false) {\n        var lbg = lines[yi + ry][xi + rx][0] & 0x1ff;\n        rx++;\n        lines[yi + ry][xi + rx][0] = (battr & ~0x1ff) | lbg;\n      } else {\n        rx++;\n        lines[yi + ry][xi + rx][0] = battr;\n      }\n      lines[yi + ry][xi + rx][1] = '\\u2502'; // '│'\n      lines[yi + ry].dirty = true;\n    });\n  }\n\n  return coords;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = ListTable;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/terminal.js":"/**\n * terminal.js - term.js terminal element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar nextTick = global.setImmediate || process.nextTick.bind(process);\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Terminal\n */\n\nfunction Terminal(options) {\n  if (!(this instanceof Node)) {\n    return new Terminal(options);\n  }\n\n  options = options || {};\n  options.scrollable = false;\n\n  Box.call(this, options);\n\n  // XXX Workaround for all motion\n  if (this.screen.program.tmux && this.screen.program.tmuxVersion >= 2) {\n    this.screen.program.enableMouse();\n  }\n\n  this.handler = options.handler;\n  this.shell = options.shell || process.env.SHELL || 'sh';\n  this.args = options.args || [];\n\n  this.cursor = this.options.cursor;\n  this.cursorBlink = this.options.cursorBlink;\n  this.screenKeys = this.options.screenKeys;\n\n  this.style = this.style || {};\n  this.style.bg = this.style.bg || 'default';\n  this.style.fg = this.style.fg || 'default';\n\n  this.termName = options.terminal\n    || options.term\n    || process.env.TERM\n    || 'xterm';\n\n  this.bootstrap();\n}\n\nTerminal.prototype.__proto__ = Box.prototype;\n\nTerminal.prototype.type = 'terminal';\n\nTerminal.prototype.bootstrap = function() {\n  var self = this;\n\n  var element = {\n    // window\n    get document() { return element; },\n    navigator: { userAgent: 'node.js' },\n\n    // document\n    get defaultView() { return element; },\n    get documentElement() { return element; },\n    createElement: function() { return element; },\n\n    // element\n    get ownerDocument() { return element; },\n    addEventListener: function() {},\n    removeEventListener: function() {},\n    getElementsByTagName: function() { return [element]; },\n    getElementById: function() { return element; },\n    parentNode: null,\n    offsetParent: null,\n    appendChild: function() {},\n    removeChild: function() {},\n    setAttribute: function() {},\n    getAttribute: function() {},\n    style: {},\n    focus: function() {},\n    blur: function() {},\n    console: console\n  };\n\n  element.parentNode = element;\n  element.offsetParent = element;\n\n  this.term = require('term.js')({\n    termName: this.termName,\n    cols: this.width - this.iwidth,\n    rows: this.height - this.iheight,\n    context: element,\n    document: element,\n    body: element,\n    parent: element,\n    cursorBlink: this.cursorBlink,\n    screenKeys: this.screenKeys\n  });\n\n  this.term.refresh = function() {\n    self.screen.render();\n  };\n\n  this.term.keyDown = function() {};\n  this.term.keyPress = function() {};\n\n  this.term.open(element);\n\n  // Emits key sequences in html-land.\n  // Technically not necessary here.\n  // In reality if we wanted to be neat, we would overwrite the keyDown and\n  // keyPress methods with our own node.js-keys->terminal-keys methods, but\n  // since all the keys are already coming in as escape sequences, we can just\n  // send the input directly to the handler/socket (see below).\n  // this.term.on('data', function(data) {\n  //   self.handler(data);\n  // });\n\n  // Incoming keys and mouse inputs.\n  // NOTE: Cannot pass mouse events - coordinates will be off!\n  this.screen.program.input.on('data', this._onData = function(data) {\n    if (self.screen.focused === self && !self._isMouse(data)) {\n      self.handler(data);\n    }\n  });\n\n  this.onScreenEvent('mouse', function(data) {\n    if (self.screen.focused !== self) return;\n\n    if (data.x < self.aleft + self.ileft) return;\n    if (data.y < self.atop + self.itop) return;\n    if (data.x > self.aleft - self.ileft + self.width) return;\n    if (data.y > self.atop - self.itop + self.height) return;\n\n    if (self.term.x10Mouse\n        || self.term.vt200Mouse\n        || self.term.normalMouse\n        || self.term.mouseEvents\n        || self.term.utfMouse\n        || self.term.sgrMouse\n        || self.term.urxvtMouse) {\n      ;\n    } else {\n      return;\n    }\n\n    var b = data.raw[0]\n      , x = data.x - self.aleft\n      , y = data.y - self.atop\n      , s;\n\n    if (self.term.urxvtMouse) {\n      if (self.screen.program.sgrMouse) {\n        b += 32;\n      }\n      s = '\\x1b[' + b + ';' + (x + 32) + ';' + (y + 32) + 'M';\n    } else if (self.term.sgrMouse) {\n      if (!self.screen.program.sgrMouse) {\n        b -= 32;\n      }\n      s = '\\x1b[<' + b + ';' + x + ';' + y\n        + (data.action === 'mousedown' ? 'M' : 'm');\n    } else {\n      if (self.screen.program.sgrMouse) {\n        b += 32;\n      }\n      s = '\\x1b[M'\n        + String.fromCharCode(b)\n        + String.fromCharCode(x + 32)\n        + String.fromCharCode(y + 32);\n    }\n\n    self.handler(s);\n  });\n\n  this.on('focus', function() {\n    self.term.focus();\n  });\n\n  this.on('blur', function() {\n    self.term.blur();\n  });\n\n  this.term.on('title', function(title) {\n    self.title = title;\n    self.emit('title', title);\n  });\n\n  this.term.on('passthrough', function(data) {\n    self.screen.program.flush();\n    self.screen.program._owrite(data);\n  });\n\n  this.on('resize', function() {\n    nextTick(function() {\n      self.term.resize(self.width - self.iwidth, self.height - self.iheight);\n    });\n  });\n\n  this.once('render', function() {\n    self.term.resize(self.width - self.iwidth, self.height - self.iheight);\n  });\n\n  this.on('destroy', function() {\n    self.kill();\n    self.screen.program.input.removeListener('data', self._onData);\n  });\n\n  if (this.handler) {\n    return;\n  }\n\n  this.pty = require('pty.js').fork(this.shell, this.args, {\n    name: this.termName,\n    cols: this.width - this.iwidth,\n    rows: this.height - this.iheight,\n    cwd: process.env.HOME,\n    env: this.options.env || process.env\n  });\n\n  this.on('resize', function() {\n    nextTick(function() {\n      try {\n        self.pty.resize(self.width - self.iwidth, self.height - self.iheight);\n      } catch (e) {\n        ;\n      }\n    });\n  });\n\n  this.handler = function(data) {\n    self.pty.write(data);\n    self.screen.render();\n  };\n\n  this.pty.on('data', function(data) {\n    self.write(data);\n    self.screen.render();\n  });\n\n  this.pty.on('exit', function(code) {\n    self.emit('exit', code || null);\n  });\n\n  this.onScreenEvent('keypress', function() {\n    self.screen.render();\n  });\n\n  this.screen._listenKeys(this);\n};\n\nTerminal.prototype.write = function(data) {\n  return this.term.write(data);\n};\n\nTerminal.prototype.render = function() {\n  var ret = this._render();\n  if (!ret) return;\n\n  this.dattr = this.sattr(this.style);\n\n  var xi = ret.xi + this.ileft\n    , xl = ret.xl - this.iright\n    , yi = ret.yi + this.itop\n    , yl = ret.yl - this.ibottom\n    , cursor;\n\n  var scrollback = this.term.lines.length - (yl - yi);\n\n  for (var y = Math.max(yi, 0); y < yl; y++) {\n    var line = this.screen.lines[y];\n    if (!line || !this.term.lines[scrollback + y - yi]) break;\n\n    if (y === yi + this.term.y\n        && this.term.cursorState\n        && this.screen.focused === this\n        && (this.term.ydisp === this.term.ybase || this.term.selectMode)\n        && !this.term.cursorHidden) {\n      cursor = xi + this.term.x;\n    } else {\n      cursor = -1;\n    }\n\n    for (var x = Math.max(xi, 0); x < xl; x++) {\n      if (!line[x] || !this.term.lines[scrollback + y - yi][x - xi]) break;\n\n      line[x][0] = this.term.lines[scrollback + y - yi][x - xi][0];\n\n      if (x === cursor) {\n        if (this.cursor === 'line') {\n          line[x][0] = this.dattr;\n          line[x][1] = '\\u2502';\n          continue;\n        } else if (this.cursor === 'underline') {\n          line[x][0] = this.dattr | (2 << 18);\n        } else if (this.cursor === 'block' || !this.cursor) {\n          line[x][0] = this.dattr | (8 << 18);\n        }\n      }\n\n      line[x][1] = this.term.lines[scrollback + y - yi][x - xi][1];\n\n      // default foreground = 257\n      if (((line[x][0] >> 9) & 0x1ff) === 257) {\n        line[x][0] &= ~(0x1ff << 9);\n        line[x][0] |= ((this.dattr >> 9) & 0x1ff) << 9;\n      }\n\n      // default background = 256\n      if ((line[x][0] & 0x1ff) === 256) {\n        line[x][0] &= ~0x1ff;\n        line[x][0] |= this.dattr & 0x1ff;\n      }\n    }\n\n    line.dirty = true;\n  }\n\n  return ret;\n};\n\nTerminal.prototype._isMouse = function(buf) {\n  var s = buf;\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === undefined) {\n      s[0] -= 128;\n      s = '\\x1b' + s.toString('utf-8');\n    } else {\n      s = s.toString('utf-8');\n    }\n  }\n  return (buf[0] === 0x1b && buf[1] === 0x5b && buf[2] === 0x4d)\n    || /^\\x1b\\[M([\\x00\\u0020-\\uffff]{3})/.test(s)\n    || /^\\x1b\\[(\\d+;\\d+;\\d+)M/.test(s)\n    || /^\\x1b\\[<(\\d+;\\d+;\\d+)([mM])/.test(s)\n    || /^\\x1b\\[<(\\d+;\\d+;\\d+;\\d+)&w/.test(s)\n    || /^\\x1b\\[24([0135])~\\[(\\d+),(\\d+)\\]\\r/.test(s)\n    || /^\\x1b\\[(O|I)/.test(s);\n};\n\nTerminal.prototype.setScroll =\nTerminal.prototype.scrollTo = function(offset) {\n  this.term.ydisp = offset;\n  return this.emit('scroll');\n};\n\nTerminal.prototype.getScroll = function() {\n  return this.term.ydisp;\n};\n\nTerminal.prototype.scroll = function(offset) {\n  this.term.scrollDisp(offset);\n  return this.emit('scroll');\n};\n\nTerminal.prototype.resetScroll = function() {\n  this.term.ydisp = 0;\n  this.term.ybase = 0;\n  return this.emit('scroll');\n};\n\nTerminal.prototype.getScrollHeight = function() {\n  return this.term.rows - 1;\n};\n\nTerminal.prototype.getScrollPerc = function() {\n  return (this.term.ydisp / this.term.ybase) * 100;\n};\n\nTerminal.prototype.setScrollPerc = function(i) {\n  return this.setScroll((i / 100) * this.term.ybase | 0);\n};\n\nTerminal.prototype.screenshot = function(xi, xl, yi, yl) {\n  xi = 0 + (xi || 0);\n  if (xl != null) {\n    xl = 0 + (xl || 0);\n  } else {\n    xl = this.term.lines[0].length;\n  }\n  yi = 0 + (yi || 0);\n  if (yl != null) {\n    yl = 0 + (yl || 0);\n  } else {\n    yl = this.term.lines.length;\n  }\n  return this.screen.screenshot(xi, xl, yi, yl, this.term);\n};\n\nTerminal.prototype.kill = function() {\n  if (this.pty) {\n    this.pty.destroy();\n    this.pty.kill();\n  }\n  this.term.refresh = function() {};\n  this.term.write('\\x1b[H\\x1b[J');\n  if (this.term._blink) {\n    clearInterval(this.term._blink);\n  }\n  this.term.destroy();\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Terminal;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/image.js":"/**\n * image.js - image element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * Image\n */\n\nfunction Image(options) {\n  if (!(this instanceof Node)) {\n    return new Image(options);\n  }\n\n  options = options || {};\n  options.type = options.itype || options.type || 'ansi';\n\n  Box.call(this, options);\n\n  if (options.type === 'ansi' && this.type !== 'ansiimage') {\n    var ANSIImage = require('./ansiimage');\n    Object.getOwnPropertyNames(ANSIImage.prototype).forEach(function(key) {\n      if (key === 'type') return;\n      Object.defineProperty(this, key,\n        Object.getOwnPropertyDescriptor(ANSIImage.prototype, key));\n    }, this);\n    ANSIImage.call(this, options);\n    return this;\n  }\n\n  if (options.type === 'overlay' && this.type !== 'overlayimage') {\n    var OverlayImage = require('./overlayimage');\n    Object.getOwnPropertyNames(OverlayImage.prototype).forEach(function(key) {\n      if (key === 'type') return;\n      Object.defineProperty(this, key,\n        Object.getOwnPropertyDescriptor(OverlayImage.prototype, key));\n    }, this);\n    OverlayImage.call(this, options);\n    return this;\n  }\n\n  throw new Error('`type` must either be `ansi` or `overlay`.');\n}\n\nImage.prototype.__proto__ = Box.prototype;\n\nImage.prototype.type = 'image';\n\n/**\n * Expose\n */\n\nmodule.exports = Image;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/ansiimage.js":"/**\n * ansiimage.js - render PNGS/GIFS as ANSI\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar cp = require('child_process');\n\nvar colors = require('../colors');\n\nvar Node = require('./node');\nvar Box = require('./box');\n\nvar tng = require('../../vendor/tng');\n\n/**\n * ANSIImage\n */\n\nfunction ANSIImage(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new ANSIImage(options);\n  }\n\n  options = options || {};\n  options.shrink = true;\n\n  Box.call(this, options);\n\n  this.scale = this.options.scale || 1.0;\n  this.options.animate = this.options.animate !== false;\n  this._noFill = true;\n\n  if (this.options.file) {\n    this.setImage(this.options.file);\n  }\n\n  this.screen.on('prerender', function() {\n    var lpos = self.lpos;\n    if (!lpos) return;\n    // prevent image from blending with itself if there are alpha channels\n    self.screen.clearRegion(lpos.xi, lpos.xl, lpos.yi, lpos.yl);\n  });\n\n  this.on('destroy', function() {\n    self.stop();\n  });\n}\n\nANSIImage.prototype.__proto__ = Box.prototype;\n\nANSIImage.prototype.type = 'ansiimage';\n\nANSIImage.curl = function(url) {\n  try {\n    return cp.execFileSync('curl',\n      ['-s', '-A', '', url],\n      { stdio: ['ignore', 'pipe', 'ignore'] });\n  } catch (e) {\n    ;\n  }\n  try {\n    return cp.execFileSync('wget',\n      ['-U', '', '-O', '-', url],\n      { stdio: ['ignore', 'pipe', 'ignore'] });\n  } catch (e) {\n    ;\n  }\n  throw new Error('curl or wget failed.');\n};\n\nANSIImage.prototype.setImage = function(file) {\n  this.file = typeof file === 'string' ? file : null;\n\n  if (/^https?:/.test(file)) {\n    file = ANSIImage.curl(file);\n  }\n\n  var width = this.position.width;\n  var height = this.position.height;\n\n  if (width != null) {\n    width = this.width;\n  }\n\n  if (height != null) {\n    height = this.height;\n  }\n\n  try {\n    this.setContent('');\n\n    this.img = tng(file, {\n      colors: colors,\n      width: width,\n      height: height,\n      scale: this.scale,\n      ascii: this.options.ascii,\n      speed: this.options.speed,\n      filename: this.file\n    });\n\n    if (width == null || height == null) {\n      this.width = this.img.cellmap[0].length;\n      this.height = this.img.cellmap.length;\n    }\n\n    if (this.img.frames && this.options.animate) {\n      this.play();\n    } else {\n      this.cellmap = this.img.cellmap;\n    }\n  } catch (e) {\n    this.setContent('Image Error: ' + e.message);\n    this.img = null;\n    this.cellmap = null;\n  }\n};\n\nANSIImage.prototype.play = function() {\n  var self = this;\n  if (!this.img) return;\n  return this.img.play(function(bmp, cellmap) {\n    self.cellmap = cellmap;\n    self.screen.render();\n  });\n};\n\nANSIImage.prototype.pause = function() {\n  if (!this.img) return;\n  return this.img.pause();\n};\n\nANSIImage.prototype.stop = function() {\n  if (!this.img) return;\n  return this.img.stop();\n};\n\nANSIImage.prototype.clearImage = function() {\n  this.stop();\n  this.setContent('');\n  this.img = null;\n  this.cellmap = null;\n};\n\nANSIImage.prototype.render = function() {\n  var coords = this._render();\n  if (!coords) return;\n\n  if (this.img && this.cellmap) {\n    this.img.renderElement(this.cellmap, this);\n  }\n\n  return coords;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = ANSIImage;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/vendor/tng.js":"/**\n * tng.js - png reader\n * Copyright (c) 2015, Christopher Jeffrey (MIT License).\n * https://github.com/chjj/tng\n */\n\nvar fs = require('fs')\n  , util = require('util')\n  , path = require('path')\n  , zlib = require('zlib')\n  , assert = require('assert')\n  , cp = require('child_process')\n  , exec = cp.execFileSync;\n\n/**\n * PNG\n */\n\nfunction PNG(file, options) {\n  var buf\n    , chunks\n    , idat\n    , pixels;\n\n  if (!(this instanceof PNG)) {\n    return new PNG(file, options);\n  }\n\n  if (!file) throw new Error('no file');\n\n  this.options = options || {};\n  this.colors = options.colors || require('blessed/lib/colors');\n  this.optimization = this.options.optimization || 'mem';\n  this.speed = this.options.speed || 1;\n\n  if (Buffer.isBuffer(file)) {\n    this.file = this.options.filename || null;\n    buf = file;\n  } else {\n    this.options.filename = file;\n    this.file = path.resolve(process.cwd(), file);\n    buf = fs.readFileSync(this.file);\n  }\n\n  this.format = buf.readUInt32BE(0) === 0x89504e47 ? 'png'\n    : buf.slice(0, 3).toString('ascii') === 'GIF' ? 'gif'\n    : buf.readUInt16BE(0) === 0xffd8 ? 'jpg'\n    : path.extname(this.file).slice(1).toLowerCase() || 'png';\n\n  if (this.format !== 'png') {\n    try {\n      return this.toPNG(buf);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  chunks = this.parseRaw(buf);\n  idat = this.parseChunks(chunks);\n  pixels = this.parseLines(idat);\n\n  this.bmp = this.createBitmap(pixels);\n  this.cellmap = this.createCellmap(this.bmp);\n  this.frames = this.compileFrames(this.frames);\n}\n\nPNG.prototype.parseRaw = function(buf) {\n  var chunks = []\n    , index = 0\n    , i = 0\n    , buf\n    , len\n    , type\n    , name\n    , data\n    , crc\n    , check\n    , critical\n    , public_\n    , conforming\n    , copysafe\n    , pos;\n\n  this._debug(this.file);\n\n  if (buf.readUInt32BE(0) !== 0x89504e47\n      || buf.readUInt32BE(4) !== 0x0d0a1a0a) {\n    throw new Error('bad header');\n  }\n\n  i += 8;\n\n  while (i < buf.length) {\n    try {\n      len = buf.readUInt32BE(i);\n      i += 4;\n      pos = i;\n      type = buf.slice(i, i + 4);\n      name = type.toString('ascii');\n      i += 4;\n      data = buf.slice(i, i + len);\n      i += len;\n      check = this.crc32(buf.slice(pos, i));\n      crc = buf.readInt32BE(i);\n      i += 4;\n      critical = !!(~type[0] & 32);\n      public_ = !!(~type[1] & 32);\n      conforming = !!(~type[2] & 32);\n      copysafe = !!(~type[3] & 32);\n      if (crc !== check) {\n        throw new Error(name + ': bad crc');\n      }\n    } catch (e) {\n      if (this.options.debug) throw e;\n      break;\n    }\n    chunks.push({\n      index: index++,\n      id: name.toLowerCase(),\n      len: len,\n      pos: pos,\n      end: i,\n      type: type,\n      name: name,\n      data: data,\n      crc: crc,\n      check: check,\n      raw: buf.slice(pos, i),\n      flags: {\n        critical: critical,\n        public_: public_,\n        conforming: conforming,\n        copysafe: copysafe\n      }\n    });\n  }\n\n  return chunks;\n};\n\nPNG.prototype.parseChunks = function(chunks) {\n  var i\n    , chunk\n    , name\n    , data\n    , p\n    , idat\n    , info;\n\n  for (i = 0; i < chunks.length; i++) {\n    chunk = chunks[i];\n    name = chunk.id;\n    data = chunk.data;\n    info = {};\n    switch (name) {\n      case 'ihdr': {\n        this.width = info.width = data.readUInt32BE(0);\n        this.height = info.height = data.readUInt32BE(4);\n        this.bitDepth = info.bitDepth = data.readUInt8(8);\n        this.colorType = info.colorType = data.readUInt8(9);\n        this.compression = info.compression = data.readUInt8(10);\n        this.filter = info.filter = data.readUInt8(11);\n        this.interlace = info.interlace = data.readUInt8(12);\n        switch (this.bitDepth) {\n          case 1: case 2: case 4: case 8: case 16: case 24: case 32: break;\n          default: throw new Error('bad bit depth: ' + this.bitDepth);\n        }\n        switch (this.colorType) {\n          case 0: case 2: case 3: case 4: case 6: break;\n          default: throw new Error('bad color: ' + this.colorType);\n        }\n        switch (this.compression) {\n          case 0: break;\n          default: throw new Error('bad compression: ' + this.compression);\n        }\n        switch (this.filter) {\n          case 0: case 1: case 2: case 3: case 4: break;\n          default: throw new Error('bad filter: ' + this.filter);\n        }\n        switch (this.interlace) {\n          case 0: case 1: break;\n          default: throw new Error('bad interlace: ' + this.interlace);\n        }\n        break;\n      }\n      case 'plte': {\n        this.palette = info.palette = [];\n        for (p = 0; p < data.length; p += 3) {\n          this.palette.push({\n            r: data[p + 0],\n            g: data[p + 1],\n            b: data[p + 2],\n            a: 255\n          });\n        }\n        break;\n      }\n      case 'idat': {\n        this.size = this.size || 0;\n        this.size += data.length;\n        this.idat = this.idat || [];\n        this.idat.push(data);\n        info.size = data.length;\n        break;\n      }\n      case 'iend': {\n        this.end = true;\n        break;\n      }\n      case 'trns': {\n        this.alpha = info.alpha = Array.prototype.slice.call(data);\n        if (this.palette) {\n          for (p = 0; p < data.length; p++) {\n            if (!this.palette[p]) break;\n            this.palette[p].a = data[p];\n          }\n        }\n        break;\n      }\n      // https://wiki.mozilla.org/APNG_Specification\n      case 'actl': {\n        this.actl = info = {};\n        this.frames = [];\n        this.actl.numFrames = data.readUInt32BE(0);\n        this.actl.numPlays = data.readUInt32BE(4);\n        break;\n      }\n      case 'fctl': {\n        // IDAT is the first frame depending on the order:\n        // IDAT is a frame: acTL->fcTL->IDAT->[fcTL]->fdAT\n        // IDAT is not a frame: acTL->IDAT->[fcTL]->fdAT\n        if (!this.idat) {\n          this.idat = [];\n          this.frames.push({\n            idat: true,\n            fctl: info,\n            fdat: this.idat\n          });\n        } else {\n          this.frames.push({\n            fctl: info,\n            fdat: []\n          });\n        }\n        info.sequenceNumber = data.readUInt32BE(0);\n        info.width = data.readUInt32BE(4);\n        info.height = data.readUInt32BE(8);\n        info.xOffset = data.readUInt32BE(12);\n        info.yOffset = data.readUInt32BE(16);\n        info.delayNum = data.readUInt16BE(20);\n        info.delayDen = data.readUInt16BE(22);\n        info.disposeOp = data.readUInt8(24);\n        info.blendOp = data.readUInt8(25);\n        break;\n      }\n      case 'fdat': {\n        info.sequenceNumber = data.readUInt32BE(0);\n        info.data = data.slice(4);\n        this.frames[this.frames.length - 1].fdat.push(info.data);\n        break;\n      }\n    }\n    chunk.info = info;\n  }\n\n  this._debug(chunks);\n\n  if (this.frames) {\n    this.frames = this.frames.map(function(frame, i) {\n      frame.fdat = this.decompress(frame.fdat);\n      if (!frame.fdat.length) throw new Error('no data');\n      return frame;\n    }, this);\n  }\n\n  idat = this.decompress(this.idat);\n  if (!idat.length) throw new Error('no data');\n\n  return idat;\n};\n\nPNG.prototype.parseLines = function(data) {\n  var pixels = []\n    , x\n    , p\n    , prior\n    , line\n    , filter\n    , samples\n    , pendingSamples\n    , ch\n    , shiftStart\n    , i\n    , toShift\n    , sample;\n\n  this.sampleDepth =\n    this.colorType === 0 ? 1\n    : this.colorType === 2 ? 3\n    : this.colorType === 3 ? 1\n    : this.colorType === 4 ? 2\n    : this.colorType === 6 ? 4\n    : 1;\n  this.bitsPerPixel = this.bitDepth * this.sampleDepth;\n  this.bytesPerPixel = Math.ceil(this.bitsPerPixel / 8);\n  this.wastedBits = ((this.width * this.bitsPerPixel) / 8) - ((this.width * this.bitsPerPixel / 8) | 0);\n  this.byteWidth = Math.ceil(this.width * (this.bitsPerPixel / 8));\n\n  this.shiftStart = ((this.bitDepth + (8 / this.bitDepth - this.bitDepth)) - 1) | 0;\n  this.shiftMult = this.bitDepth >= 8 ? 0 : this.bitDepth;\n  this.mask = this.bitDepth === 32 ? 0xffffffff : (1 << this.bitDepth) - 1;\n\n  if (this.interlace === 1) {\n    samples = this.sampleInterlacedLines(data);\n    for (i = 0; i < samples.length; i += this.sampleDepth) {\n      pixels.push(samples.slice(i, i + this.sampleDepth));\n    }\n    return pixels;\n  }\n\n  for (p = 0; p < data.length; p += this.byteWidth) {\n    prior = line || [];\n    filter = data[p++];\n    line = data.slice(p, p + this.byteWidth);\n    line = this.unfilterLine(filter, line, prior);\n    samples = this.sampleLine(line);\n    for (i = 0; i < samples.length; i += this.sampleDepth) {\n      pixels.push(samples.slice(i, i + this.sampleDepth));\n    }\n  }\n\n  return pixels;\n};\n\nPNG.prototype.unfilterLine = function(filter, line, prior) {\n  for (var x = 0; x < line.length; x++) {\n    if (filter === 0) {\n      break;\n    } else if (filter === 1) {\n      line[x] = this.filters.sub(x, line, prior, this.bytesPerPixel);\n    } else if (filter === 2) {\n      line[x] = this.filters.up(x, line, prior, this.bytesPerPixel);\n    } else if (filter === 3) {\n      line[x] = this.filters.average(x, line, prior, this.bytesPerPixel);\n    } else if (filter === 4) {\n      line[x] = this.filters.paeth(x, line, prior, this.bytesPerPixel);\n    }\n  }\n  return line;\n};\n\nPNG.prototype.sampleLine = function(line, width) {\n  var samples = []\n    , x = 0\n    , pendingSamples\n    , ch\n    , i\n    , sample\n    , shiftStart\n    , toShift;\n\n  while (x < line.length) {\n    pendingSamples = this.sampleDepth;\n    while (pendingSamples--) {\n      ch = line[x];\n      if (this.bitDepth === 16) {\n        ch = (ch << 8) | line[++x];\n      } else if (this.bitDepth === 24) {\n        ch = (ch << 16) | (line[++x] << 8) | line[++x];\n      } else if (this.bitDepth === 32) {\n        ch = (ch << 24) | (line[++x] << 16) | (line[++x] << 8) | line[++x];\n      } else if (this.bitDepth > 32) {\n        throw new Error('bitDepth ' + this.bitDepth + ' unsupported.');\n      }\n      shiftStart = this.shiftStart;\n      toShift = shiftStart - (x === line.length - 1 ? this.wastedBits : 0);\n      for (i = 0; i <= toShift; i++) {\n        sample = (ch >> (this.shiftMult * shiftStart)) & this.mask;\n        if (this.colorType !== 3) {\n          if (this.bitDepth < 8) { // <= 8 would work too, doesn't matter\n            // sample = sample * (0xff / this.mask) | 0; // would work too\n            sample *= 0xff / this.mask;\n            sample |= 0;\n          } else if (this.bitDepth > 8) {\n            sample = (sample / this.mask) * 255 | 0;\n          }\n        }\n        samples.push(sample);\n        shiftStart--;\n      }\n      x++;\n    }\n  }\n\n  // Needed for deinterlacing?\n  if (width != null) {\n    samples = samples.slice(0, width * this.sampleDepth);\n  }\n\n  return samples;\n};\n\n// http://www.w3.org/TR/PNG-Filters.html\nPNG.prototype.filters = {\n  sub: function Sub(x, line, prior, bpp) {\n    if (x < bpp) return line[x];\n    return (line[x] + line[x - bpp]) % 256;\n  },\n  up: function Up(x, line, prior, bpp) {\n    return (line[x] + (prior[x] || 0)) % 256;\n  },\n  average: function Average(x, line, prior, bpp) {\n    if (x < bpp) return Math.floor((prior[x] || 0) / 2);\n    // if (x < bpp) return (prior[x] || 0) >> 1;\n    return (line[x]\n      + Math.floor((line[x - bpp] + prior[x]) / 2)\n      // + ((line[x - bpp] + prior[x]) >> 1)\n    ) % 256;\n  },\n  paeth: function Paeth(x, line, prior, bpp) {\n    if (x < bpp) return prior[x] || 0;\n    return (line[x] + this._predictor(\n      line[x - bpp], prior[x] || 0, prior[x - bpp] || 0\n    )) % 256;\n  },\n  _predictor: function PaethPredictor(a, b, c) {\n    // a = left, b = above, c = upper left\n    var p = a + b - c\n      , pa = Math.abs(p - a)\n      , pb = Math.abs(p - b)\n      , pc = Math.abs(p - c);\n    if (pa <= pb && pa <= pc) return a;\n    if (pb <= pc) return b;\n    return c;\n  }\n};\n\n/**\n * Adam7 deinterlacing ported to javascript from PyPNG:\n * pypng - Pure Python library for PNG image encoding/decoding\n * Copyright (c) 2009-2015, David Jones (MIT License).\n * https://github.com/drj11/pypng\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation files\n * (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the Software,\n * and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nPNG.prototype.sampleInterlacedLines = function(raw) {\n  var psize\n    , vpr\n    , samples\n    , source_offset\n    , i\n    , pass\n    , xstart\n    , ystart\n    , xstep\n    , ystep\n    , recon\n    , ppr\n    , row_size\n    , y\n    , filter_type\n    , scanline\n    , flat\n    , offset\n    , k\n    , end_offset\n    , skip\n    , j\n    , k\n    , f;\n\n  var adam7 = [\n    [0, 0, 8, 8],\n    [4, 0, 8, 8],\n    [0, 4, 4, 8],\n    [2, 0, 4, 4],\n    [0, 2, 2, 4],\n    [1, 0, 2, 2],\n    [0, 1, 1, 2]\n  ];\n\n  // Fractional bytes per pixel\n  psize = (this.bitDepth / 8) * this.sampleDepth;\n\n  // Values per row (of the target image)\n  vpr = this.width * this.sampleDepth;\n\n  // Make a result array, and make it big enough. Interleaving\n  // writes to the output array randomly (well, not quite), so the\n  // entire output array must be in memory.\n  samples = new Buffer(vpr * this.height);\n  samples.fill(0);\n\n  source_offset = 0;\n\n  for (i = 0; i < adam7.length; i++) {\n    pass = adam7[i];\n    xstart = pass[0];\n    ystart = pass[1];\n    xstep = pass[2];\n    ystep = pass[3];\n    if (xstart >= this.width) continue;\n    // The previous (reconstructed) scanline. Empty array at the\n    // beginning of a pass to indicate that there is no previous\n    // line.\n    recon = [];\n    // Pixels per row (reduced pass image)\n    ppr = Math.ceil((this.width - xstart) / xstep);\n    // Row size in bytes for this pass.\n    row_size = Math.ceil(psize * ppr);\n    for (y = ystart; y < this.height; y += ystep) {\n      filter_type = raw[source_offset];\n      source_offset += 1;\n      scanline = raw.slice(source_offset, source_offset + row_size);\n      source_offset += row_size;\n      recon = this.unfilterLine(filter_type, scanline, recon);\n      // Convert so that there is one element per pixel value\n      flat = this.sampleLine(recon, ppr);\n      if (xstep === 1) {\n        assert.equal(xstart, 0);\n        offset = y * vpr;\n        for (k = offset, f = 0; k < offset + vpr; k++, f++) {\n          samples[k] = flat[f];\n        }\n      } else {\n        offset = y * vpr + xstart * this.sampleDepth;\n        end_offset = (y + 1) * vpr;\n        skip = this.sampleDepth * xstep;\n        for (j = 0; j < this.sampleDepth; j++) {\n          for (k = offset + j, f = j; k < end_offset; k += skip, f += this.sampleDepth) {\n            samples[k] = flat[f];\n          }\n        }\n      }\n    }\n  }\n\n  return samples;\n};\n\nPNG.prototype.createBitmap = function(pixels) {\n  var bmp = []\n    , i;\n\n  if (this.colorType === 0) {\n    pixels = pixels.map(function(sample) {\n      return { r: sample[0], g: sample[0], b: sample[0], a: 255 };\n    });\n  } else if (this.colorType === 2) {\n    pixels = pixels.map(function(sample) {\n      return { r: sample[0], g: sample[1], b: sample[2], a: 255 };\n    });\n  } else if (this.colorType === 3) {\n    pixels = pixels.map(function(sample) {\n      if (!this.palette[sample[0]]) throw new Error('bad palette index');\n      return this.palette[sample[0]];\n    }, this);\n  } else if (this.colorType === 4) {\n    pixels = pixels.map(function(sample) {\n      return { r: sample[0], g: sample[0], b: sample[0], a: sample[1] };\n    });\n  } else if (this.colorType === 6) {\n    pixels = pixels.map(function(sample) {\n      return { r: sample[0], g: sample[1], b: sample[2], a: sample[3] };\n    });\n  }\n\n  for (i = 0; i < pixels.length; i += this.width) {\n    bmp.push(pixels.slice(i, i + this.width));\n  }\n\n  return bmp;\n};\n\nPNG.prototype.createCellmap = function(bmp, options) {\n  var bmp = bmp || this.bmp\n    , options = options || this.options\n    , cellmap = []\n    , scale = options.scale || 0.20\n    , height = bmp.length\n    , width = bmp[0].length\n    , cmwidth = options.width\n    , cmheight = options.height\n    , line\n    , x\n    , y\n    , xx\n    , yy\n    , scale\n    , xs\n    , ys;\n\n  if (cmwidth) {\n    scale = cmwidth / width;\n  } else if (cmheight) {\n    scale = cmheight / height;\n  }\n\n  if (!cmheight) {\n    cmheight = Math.round(height * scale);\n  }\n\n  if (!cmwidth) {\n    cmwidth = Math.round(width * scale);\n  }\n\n  ys = height / cmheight;\n  xs = width / cmwidth;\n\n  for (y = 0; y < bmp.length; y += ys) {\n    line = [];\n    yy = Math.round(y);\n    if (!bmp[yy]) break;\n    for (x = 0; x < bmp[yy].length; x += xs) {\n      xx = Math.round(x);\n      if (!bmp[yy][xx]) break;\n      line.push(bmp[yy][xx]);\n    }\n    cellmap.push(line);\n  }\n\n  return cellmap;\n};\n\nPNG.prototype.renderANSI = function(bmp) {\n  var self = this\n    , out = '';\n\n  bmp.forEach(function(line, y) {\n    line.forEach(function(pixel, x) {\n      var outch = self.getOutch(x, y, line, pixel);\n      out += self.pixelToSGR(pixel, outch);\n    });\n    out += '\\n';\n  });\n\n  return out;\n};\n\nPNG.prototype.renderContent = function(bmp, el) {\n  var self = this\n    , out = '';\n\n  bmp.forEach(function(line, y) {\n    line.forEach(function(pixel, x) {\n      var outch = self.getOutch(x, y, line, pixel);\n      out += self.pixelToTags(pixel, outch);\n    });\n    out += '\\n';\n  });\n\n  el.setContent(out);\n\n  return out;\n};\n\nPNG.prototype.renderScreen = function(bmp, screen, xi, xl, yi, yl) {\n  var self = this\n    , lines = screen.lines\n    , cellLines\n    , y\n    , yy\n    , x\n    , xx\n    , alpha\n    , attr\n    , ch;\n\n  cellLines = bmp.reduce(function(cellLines, line, y) {\n    var cellLine = [];\n    line.forEach(function(pixel, x) {\n      var outch = self.getOutch(x, y, line, pixel)\n        , cell = self.pixelToCell(pixel, outch);\n      cellLine.push(cell);\n    });\n    cellLines.push(cellLine);\n    return cellLines;\n  }, []);\n\n  for (y = yi; y < yl; y++) {\n    yy = y - yi;\n    for (x = xi; x < xl; x++) {\n      xx = x - xi;\n      if (lines[y] && lines[y][x] && cellLines[yy] && cellLines[yy][xx]) {\n        alpha = cellLines[yy][xx].pop();\n        // completely transparent\n        if (alpha === 0.0) {\n          continue;\n        }\n        // translucency / blending\n        if (alpha < 1.0) {\n          attr = cellLines[yy][xx][0];\n          ch = cellLines[yy][xx][1];\n          lines[y][x][0] = this.colors.blend(lines[y][x][0], attr, alpha);\n          if (ch !== ' ') lines[y][x][1] = ch;\n          lines[y].dirty = true;\n          continue;\n        }\n        // completely opaque\n        lines[y][x] = cellLines[yy][xx];\n        lines[y].dirty = true;\n      }\n    }\n  }\n};\n\nPNG.prototype.renderElement = function(bmp, el) {\n  var xi = el.aleft + el.ileft\n    , xl = el.aleft + el.width - el.iright\n    , yi = el.atop + el.itop\n    , yl = el.atop + el.height - el.ibottom;\n\n  return this.renderScreen(bmp, el.screen, xi, xl, yi, yl);\n};\n\nPNG.prototype.pixelToSGR = function(pixel, ch) {\n  var bga = 1.0\n    , fga = 0.5\n    , a = pixel.a / 255\n    , bg\n    , fg;\n\n  bg = this.colors.match(\n    pixel.r * a * bga | 0,\n    pixel.g * a * bga | 0,\n    pixel.b * a * bga | 0);\n\n  if (ch && this.options.ascii) {\n    fg = this.colors.match(\n      pixel.r * a * fga | 0,\n      pixel.g * a * fga | 0,\n      pixel.b * a * fga | 0);\n    if (a === 0) {\n      return '\\x1b[38;5;' + fg + 'm' + ch + '\\x1b[m';\n    }\n    return '\\x1b[38;5;' + fg + 'm\\x1b[48;5;' + bg + 'm' + ch + '\\x1b[m';\n  }\n\n  if (a === 0) return ' ';\n\n  return '\\x1b[48;5;' + bg + 'm \\x1b[m';\n};\n\nPNG.prototype.pixelToTags = function(pixel, ch) {\n  var bga = 1.0\n    , fga = 0.5\n    , a = pixel.a / 255\n    , bg\n    , fg;\n\n  bg = this.colors.RGBtoHex(\n    pixel.r * a * bga | 0,\n    pixel.g * a * bga | 0,\n    pixel.b * a * bga | 0);\n\n  if (ch && this.options.ascii) {\n    fg = this.colors.RGBtoHex(\n      pixel.r * a * fga | 0,\n      pixel.g * a * fga | 0,\n      pixel.b * a * fga | 0);\n    if (a === 0) {\n      return '{' + fg + '-fg}' + ch + '{/}';\n    }\n    return '{' + fg + '-fg}{' + bg + '-bg}' + ch + '{/}';\n  }\n\n  if (a === 0) return ' ';\n\n  return '{' + bg + '-bg} {/' + bg + '-bg}';\n};\n\nPNG.prototype.pixelToCell = function(pixel, ch) {\n  var bga = 1.0\n    , fga = 0.5\n    , a = pixel.a / 255\n    , bg\n    , fg;\n\n  bg = this.colors.match(\n    pixel.r * bga | 0,\n    pixel.g * bga | 0,\n    pixel.b * bga | 0);\n\n  if (ch && this.options.ascii) {\n    fg = this.colors.match(\n      pixel.r * fga | 0,\n      pixel.g * fga | 0,\n      pixel.b * fga | 0);\n  } else {\n    fg = 0x1ff;\n    ch = null;\n  }\n\n  // if (a === 0) bg = 0x1ff;\n\n  return [(0 << 18) | (fg << 9) | (bg << 0), ch || ' ', a];\n};\n\n// Taken from libcaca:\nPNG.prototype.getOutch = (function() {\n  var dchars = '????8@8@#8@8##8#MKXWwz$&%x><\\\\/xo;+=|^-:i\\'.`,  `.        ';\n\n  var luminance = function(pixel) {\n    var a = pixel.a / 255\n      , r = pixel.r * a\n      , g = pixel.g * a\n      , b = pixel.b * a\n      , l = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\n    return l / 255;\n  };\n\n  return function(x, y, line, pixel) {\n    var lumi = luminance(pixel)\n      , outch = dchars[lumi * (dchars.length - 1) | 0];\n\n    return outch;\n  };\n})();\n\nPNG.prototype.compileFrames = function(frames) {\n  return this.optimization === 'mem'\n    ? this.compileFrames_lomem(frames)\n    : this.compileFrames_locpu(frames);\n};\n\nPNG.prototype.compileFrames_lomem = function(frames) {\n  if (!this.actl) return;\n  return frames.map(function(frame, i) {\n    this.width = frame.fctl.width;\n    this.height = frame.fctl.height;\n\n    var pixels = frame._pixels || this.parseLines(frame.fdat)\n      , bmp = frame._bmp || this.createBitmap(pixels)\n      , fc = frame.fctl;\n\n    return {\n      actl: this.actl,\n      fctl: frame.fctl,\n      delay: (fc.delayNum / (fc.delayDen || 100)) * 1000 | 0,\n      bmp: bmp\n    };\n  }, this);\n};\n\nPNG.prototype.compileFrames_locpu = function(frames) {\n  if (!this.actl) return;\n\n  this._curBmp = null;\n  this._lastBmp = null;\n\n  return frames.map(function(frame, i) {\n    this.width = frame.fctl.width;\n    this.height = frame.fctl.height;\n\n    var pixels = frame._pixels || this.parseLines(frame.fdat)\n      , bmp = frame._bmp || this.createBitmap(pixels)\n      , renderBmp = this.renderFrame(bmp, frame, i)\n      , cellmap = this.createCellmap(renderBmp)\n      , fc = frame.fctl;\n\n    return {\n      actl: this.actl,\n      fctl: frame.fctl,\n      delay: (fc.delayNum / (fc.delayDen || 100)) * 1000 | 0,\n      bmp: renderBmp,\n      cellmap: cellmap\n    };\n  }, this);\n};\n\nPNG.prototype.renderFrame = function(bmp, frame, i) {\n  var first = this.frames[0]\n    , last = this.frames[i - 1]\n    , fc = frame.fctl\n    , xo = fc.xOffset\n    , yo = fc.yOffset\n    , lxo\n    , lyo\n    , x\n    , y\n    , line\n    , p;\n\n  if (!this._curBmp) {\n    this._curBmp = [];\n    for (y = 0; y < first.fctl.height; y++) {\n      line = [];\n      for (x = 0; x < first.fctl.width; x++) {\n        p = bmp[y][x];\n        line.push({ r: p.r, g: p.g, b: p.b, a: p.a });\n      }\n      this._curBmp.push(line);\n    }\n  }\n\n  if (last && last.fctl.disposeOp !== 0) {\n    lxo = last.fctl.xOffset;\n    lyo = last.fctl.yOffset;\n    for (y = 0; y < last.fctl.height; y++) {\n      for (x = 0; x < last.fctl.width; x++) {\n        if (last.fctl.disposeOp === 0) {\n          // none / keep\n        } else if (last.fctl.disposeOp === 1) {\n          // background / clear\n          this._curBmp[lyo + y][lxo + x] = { r: 0, g: 0, b: 0, a: 0 };\n        } else if (last.fctl.disposeOp === 2) {\n          // previous / restore\n          p = this._lastBmp[y][x];\n          this._curBmp[lyo + y][lxo + x] = { r: p.r, g: p.g, b: p.b, a: p.a };\n        }\n      }\n    }\n  }\n\n  if (frame.fctl.disposeOp === 2) {\n    this._lastBmp = [];\n    for (y = 0; y < frame.fctl.height; y++) {\n      line = [];\n      for (x = 0; x < frame.fctl.width; x++) {\n        p = this._curBmp[yo + y][xo + x];\n        line.push({ r: p.r, g: p.g, b: p.b, a: p.a });\n      }\n      this._lastBmp.push(line);\n    }\n  } else {\n    this._lastBmp = null;\n  }\n\n  for (y = 0; y < frame.fctl.height; y++) {\n    for (x = 0; x < frame.fctl.width; x++) {\n      p = bmp[y][x];\n      if (fc.blendOp === 0) {\n        // source\n        this._curBmp[yo + y][xo + x] = { r: p.r, g: p.g, b: p.b, a: p.a };\n      } else if (fc.blendOp === 1) {\n        // over\n        if (p.a !== 0) {\n          this._curBmp[yo + y][xo + x] = { r: p.r, g: p.g, b: p.b, a: p.a };\n        }\n      }\n    }\n  }\n\n  return this._curBmp;\n};\n\nPNG.prototype._animate = function(callback) {\n  if (!this.frames) {\n    return callback(this.bmp, this.cellmap);\n  }\n\n  var self = this\n    , numPlays = this.actl.numPlays || Infinity\n    , running = 0\n    , i = -1;\n\n  this._curBmp = null;\n  this._lastBmp = null;\n\n  var next_lomem = function() {\n    if (!running) return;\n\n    var frame = self.frames[++i];\n    if (!frame) {\n      if (!--numPlays) return callback();\n      i = -1;\n      // XXX may be able to optimize by only setting the self._curBmp once???\n      self._curBmp = null;\n      self._lastBmp = null;\n      return setImmediate(next);\n    }\n\n    var bmp = frame.bmp\n      , renderBmp = self.renderFrame(bmp, frame, i)\n      , cellmap = self.createCellmap(renderBmp);\n\n    callback(renderBmp, cellmap);\n    return setTimeout(next, frame.delay / self.speed | 0);\n  };\n\n  var next_locpu = function() {\n    if (!running) return;\n    var frame = self.frames[++i];\n    if (!frame) {\n      if (!--numPlays) return callback();\n      i = -1;\n      return setImmediate(next);\n    }\n    callback(frame.bmp, frame.cellmap);\n    return setTimeout(next, frame.delay / self.speed | 0);\n  };\n\n  var next = this.optimization === 'mem'\n    ? next_lomem\n    : next_locpu;\n\n  this._control = function(state) {\n    if (state === -1) {\n      i = -1;\n      self._curBmp = null;\n      self._lastBmp = null;\n      running = 0;\n      callback(self.frames[0].bmp,\n        self.frames[0].cellmap || self.createCellmap(self.frames[0].bmp));\n      return;\n    }\n    if (state === running) return;\n    running = state;\n    return next();\n  };\n\n  this._control(1);\n};\n\nPNG.prototype.play = function(callback) {\n  if (!this._control || callback) {\n    this.stop();\n    return this._animate(callback);\n  }\n  this._control(1);\n};\n\nPNG.prototype.pause = function() {\n  if (!this._control) return;\n  this._control(0);\n};\n\nPNG.prototype.stop = function() {\n  if (!this._control) return;\n  this._control(-1);\n};\n\nPNG.prototype.toPNG = function(input) {\n  var options = this.options\n    , file = this.file\n    , format = this.format\n    , buf\n    , img\n    , gif\n    , i\n    , control\n    , disposeOp;\n\n  if (format !== 'gif') {\n    buf = exec('convert', [format + ':-', 'png:-'],\n      { stdio: ['pipe', 'pipe', 'ignore'], input: input });\n    img = PNG(buf, options);\n    img.file = file;\n    return img;\n  }\n\n  gif = GIF(input, options);\n\n  this.width = gif.width;\n  this.height = gif.height;\n  this.frames = [];\n\n  for (i = 0; i < gif.images.length; i++) {\n    img = gif.images[i];\n    // Convert from gif disposal to png disposal. See:\n    // http://www.w3.org/Graphics/GIF/spec-gif89a.txt\n    control = img.control || gif;\n    disposeOp = Math.max(0, (control.disposeMethod || 0) - 1);\n    if (disposeOp > 2) disposeOp = 0;\n    this.frames.push({\n      fctl: {\n        sequenceNumber: i,\n        width: img.width,\n        height: img.height,\n        xOffset: img.left,\n        yOffset: img.top,\n        delayNum: control.delay,\n        delayDen: 100,\n        disposeOp: disposeOp,\n        blendOp: 1\n      },\n      fdat: [],\n      _pixels: [],\n      _bmp: img.bmp\n    });\n  }\n\n  this.bmp = this.frames[0]._bmp;\n  this.cellmap = this.createCellmap(this.bmp);\n\n  if (this.frames.length > 1) {\n    this.actl = { numFrames: gif.images.length, numPlays: gif.numPlays || 0 };\n    this.frames = this.compileFrames(this.frames);\n  } else {\n    this.frames = undefined;\n  }\n\n  return this;\n};\n\n// Convert a gif to an apng using imagemagick. Unfortunately imagemagick\n// doesn't support apngs, so we coalesce the gif frames into one image and then\n// slice them into frames.\nPNG.prototype.gifMagick = function(input) {\n  var options = this.options\n    , file = this.file\n    , format = this.format\n    , buf\n    , fmt\n    , img\n    , frames\n    , frame\n    , width\n    , height\n    , iwidth\n    , twidth\n    , i\n    , lines\n    , line\n    , x\n    , y;\n\n  buf = exec('convert',\n    [format + ':-', '-coalesce', '+append', 'png:-'],\n    { stdio: ['pipe', 'pipe', 'ignore'], input: input });\n\n  fmt = '{\"W\":%W,\"H\":%H,\"w\":%w,\"h\":%h,\"d\":%T,\"x\":\"%X\",\"y\":\"%Y\"},'\n  frames = exec('identify', ['-format', fmt, format + ':-'],\n    { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'], input: input });\n  frames = JSON.parse('[' + frames.trim().slice(0, -1) + ']');\n\n  img = PNG(buf, options);\n  img.file = file;\n  Object.keys(img).forEach(function(key) {\n    this[key] = img[key];\n  }, this);\n\n  width = frames[0].W;\n  height = frames[0].H;\n  iwidth = 0;\n  twidth = 0;\n\n  this.width = width;\n  this.height = height;\n\n  this.frames = [];\n\n  for (i = 0; i < frames.length; i++) {\n    frame = frames[i];\n    frame.x = +frame.x;\n    frame.y = +frame.y;\n\n    iwidth = twidth;\n    twidth += width;\n\n    lines = [];\n    for (y = frame.y; y < height; y++) {\n      line = [];\n      for (x = iwidth + frame.x; x < twidth; x++) {\n        line.push(img.bmp[y][x]);\n      }\n      lines.push(line);\n    }\n\n    this.frames.push({\n      fctl: {\n        sequenceNumber: i,\n        width: frame.w,\n        height: frame.h,\n        xOffset: frame.x,\n        yOffset: frame.y,\n        delayNum: frame.d,\n        delayDen: 100,\n        disposeOp: 0,\n        blendOp: 0\n      },\n      fdat: [],\n      _pixels: [],\n      _bmp: lines\n    });\n  }\n\n  this.bmp = this.frames[0]._bmp;\n  this.cellmap = this.createCellmap(this.bmp);\n\n  if (this.frames.length > 1) {\n    this.actl = { numFrames: frames.length, numPlays: 0 };\n    this.frames = this.compileFrames(this.frames);\n  } else {\n    this.frames = undefined;\n  }\n\n  return this;\n};\n\nPNG.prototype.decompress = function(buffers) {\n  return zlib.inflateSync(new Buffer(buffers.reduce(function(out, data) {\n    return out.concat(Array.prototype.slice.call(data));\n  }, [])));\n};\n\n/**\n * node-crc\n * https://github.com/alexgorbatchev/node-crc\n * https://github.com/alexgorbatchev/node-crc/blob/master/LICENSE\n *\n * The MIT License (MIT)\n *\n * Copyright 2014 Alex Gorbatchev\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nPNG.prototype.crc32 = (function() {\n  var crcTable = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d\n  ];\n\n  return function crc32(buf) {\n    //var crc = previous === 0 ? 0 : ~~previous ^ -1;\n    var crc = -1;\n    for (var i = 0, len = buf.length; i < len; i++) {\n      crc = crcTable[(crc ^ buf[i]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n  };\n})();\n\nPNG.prototype._debug = function() {\n  if (!this.options.log) return;\n  return this.options.log.apply(null, arguments);\n};\n\n/**\n * GIF\n */\n\nfunction GIF(file, options) {\n  var self = this;\n\n  if (!(this instanceof GIF)) {\n    return new GIF(file, options);\n  }\n\n  var info = {}\n    , p = 0\n    , buf\n    , i\n    , total\n    , sig\n    , desc\n    , img\n    , ext\n    , label\n    , size;\n\n  if (!file) throw new Error('no file');\n\n  options = options || {};\n\n  this.options = options;\n\n  // XXX If the gif is not optimized enough\n  // it may OOM the process with too many frames.\n  // TODO: Implement in PNG reader.\n  this.pixelLimit = this.options.pixelLimit || 7622550;\n  this.totalPixels = 0;\n\n  if (Buffer.isBuffer(file)) {\n    buf = file;\n    file = null;\n  } else {\n    file = path.resolve(process.cwd(), file);\n    buf = fs.readFileSync(file);\n  }\n\n  sig = buf.slice(0, 6).toString('ascii');\n  if (sig !== 'GIF87a' && sig !== 'GIF89a') {\n    throw new Error('bad header: ' + sig);\n  }\n\n  this.width = buf.readUInt16LE(6);\n  this.height = buf.readUInt16LE(8);\n\n  this.flags = buf.readUInt8(10);\n  this.gct = !!(this.flags & 0x80);\n  this.gctsize = (this.flags & 0x07) + 1;\n\n  this.bgIndex = buf.readUInt8(11);\n  this.aspect = buf.readUInt8(12);\n  p += 13;\n\n  if (this.gct) {\n    this.colors = [];\n    total = 1 << this.gctsize;\n    for (i = 0; i < total; i++, p += 3) {\n      this.colors.push([buf[p], buf[p + 1], buf[p + 2], 255]);\n    }\n  }\n\n  this.images = [];\n  this.extensions = [];\n\n  try {\n    while (p < buf.length) {\n      desc = buf.readUInt8(p);\n      p += 1;\n      if (desc === 0x2c) {\n        img = {};\n\n        img.left = buf.readUInt16LE(p);\n        p += 2;\n        img.top = buf.readUInt16LE(p);\n        p += 2;\n\n        img.width = buf.readUInt16LE(p);\n        p += 2;\n        img.height = buf.readUInt16LE(p);\n        p += 2;\n\n        img.flags = buf.readUInt8(p);\n        p += 1;\n\n        img.lct = !!(img.flags & 0x80);\n        img.ilace = !!(img.flags & 0x40);\n        img.lctsize = (img.flags & 0x07) + 1;\n\n        if (img.lct) {\n          img.lcolors = [];\n          total = 1 << img.lctsize;\n          for (i = 0; i < total; i++, p += 3) {\n            img.lcolors.push([buf[p], buf[p + 1], buf[p + 2], 255]);\n          }\n        }\n\n        img.codeSize = buf.readUInt8(p);\n        p += 1;\n\n        img.size = buf.readUInt8(p);\n        p += 1;\n\n        img.lzw = [buf.slice(p, p + img.size)];\n        p += img.size;\n\n        while (buf[p] !== 0x00) {\n          // Some gifs screw up their size.\n          // XXX Same for all subblocks?\n          if (buf[p] === 0x3b && p === buf.length - 1) {\n            p--;\n            break;\n          }\n          size = buf.readUInt8(p);\n          p += 1;\n          img.lzw.push(buf.slice(p, p + size));\n          p += size;\n        }\n\n        assert.equal(buf.readUInt8(p), 0x00);\n        p += 1;\n\n        if (ext && ext.label === 0xf9) {\n          img.control = ext;\n        }\n\n        this.totalPixels += img.width * img.height;\n\n        this.images.push(img);\n\n        if (this.totalPixels >= this.pixelLimit) {\n          break;\n        }\n      } else if (desc === 0x21) {\n        // Extensions:\n        // http://www.w3.org/Graphics/GIF/spec-gif89a.txt\n        ext = {};\n        label = buf.readUInt8(p);\n        p += 1;\n        ext.label = label;\n        if (label === 0xf9) {\n          size = buf.readUInt8(p);\n          assert.equal(size, 0x04);\n          p += 1;\n          ext.fields = buf.readUInt8(p);\n          ext.disposeMethod = (ext.fields >> 2) & 0x07;\n          ext.useTransparent = !!(ext.fields & 0x01);\n          p += 1;\n          ext.delay = buf.readUInt16LE(p);\n          p += 2;\n          ext.transparentColor = buf.readUInt8(p);\n          p += 1;\n          while (buf[p] !== 0x00) {\n            size = buf.readUInt8(p);\n            p += 1;\n            p += size;\n          }\n          assert.equal(buf.readUInt8(p), 0x00);\n          p += 1;\n          this.delay = ext.delay;\n          this.transparentColor = ext.transparentColor;\n          this.disposeMethod = ext.disposeMethod;\n          this.useTransparent = ext.useTransparent;\n        } else if (label === 0xff) {\n          // https://wiki.whatwg.org/wiki/GIF#Specifications\n          size = buf.readUInt8(p);\n          p += 1;\n          ext.id = buf.slice(p, p + 8).toString('ascii');\n          p += 8;\n          ext.auth = buf.slice(p, p + 3).toString('ascii');\n          p += 3;\n          ext.data = [];\n          while (buf[p] !== 0x00) {\n            size = buf.readUInt8(p);\n            p += 1;\n            ext.data.push(buf.slice(p, p + size));\n            p += size;\n          }\n          ext.data = new Buffer(ext.data.reduce(function(out, data) {\n            return out.concat(Array.prototype.slice.call(data));\n          }, []));\n          // AnimExts looping extension (identical to netscape)\n          if (ext.id === 'ANIMEXTS' && ext.auth === '1.0') {\n            ext.id = 'NETSCAPE';\n            ext.auth = '2.0';\n            ext.animexts = true;\n          }\n          // Netscape extensions\n          if (ext.id === 'NETSCAPE' && ext.auth === '2.0') {\n            if (ext.data.readUInt8(0) === 0x01) {\n              // Netscape looping extension\n              // http://graphcomp.com/info/specs/ani_gif.html\n              ext.numPlays = ext.data.readUInt16LE(1);\n              this.numPlays = ext.numPlays;\n            } else if (ext.data.readUInt8(0) === 0x02) {\n              // Netscape buffering extension\n              this.minBuffer = ext.data;\n            }\n          }\n          // Adobe XMP extension\n          if (ext.id === 'XMP Data' && ext.auth === 'XMP') {\n            ext.xmp = ext.data.toString('utf8');\n            this.xmp = ext.xmp;\n          }\n          // ICC extension\n          if (ext.id === 'ICCRGBG1' && ext.auth === '012') {\n            // NOTE: Says size is 4 bytes, not 1? Maybe just buffer size?\n            this.icc = ext.data;\n          }\n          // fractint extension\n          if (ext.id === 'fractint' && /^00[1-7]$/.test(ext.auth)) {\n            // NOTE: Says size is 4 bytes, not 1? Maybe just buffer size?\n            // Size: '!\\377\\013' == [0x00, 0x15, 0xff, 0x0b]\n            this.fractint = ext.data;\n          }\n          assert.equal(buf.readUInt8(p), 0x00);\n          p += 1;\n        } else {\n          ext.data = [];\n          while (buf[p] !== 0x00) {\n            size = buf.readUInt8(p);\n            p += 1;\n            ext.data.push(buf.slice(p, p + size));\n            p += size;\n          }\n          assert.equal(buf.readUInt8(p), 0x00);\n          p += 1;\n        }\n        this.extensions.push(ext);\n      } else if (desc === 0x3b) {\n        break;\n      } else if (p === buf.length - 1) {\n        // } else if (desc === 0x00 && p === buf.length - 1) {\n        break;\n      } else {\n        throw new Error('unknown block');\n      }\n    }\n  } catch (e) {\n    if (options.debug) {\n      throw e;\n    }\n  }\n\n  this.images = this.images.map(function(img, imageIndex) {\n    var control = img.control || this;\n\n    img.lzw = new Buffer(img.lzw.reduce(function(out, data) {\n      return out.concat(Array.prototype.slice.call(data));\n    }, []));\n\n    try {\n      img.data = this.decompress(img.lzw, img.codeSize);\n    } catch (e) {\n      if (options.debug) throw e;\n      return;\n    }\n\n    var interlacing = [\n      [ 0, 8 ],\n      [ 4, 8 ],\n      [ 2, 4 ],\n      [ 1, 2 ],\n      [ 0, 0 ]\n    ];\n\n    var table = img.lcolors || this.colors\n      , row = 0\n      , col = 0\n      , ilp = 0\n      , p = 0\n      , b\n      , idx\n      , i\n      , y\n      , x\n      , line\n      , pixel;\n\n    img.samples = [];\n    // Rewritten version of:\n    // https://github.com/lbv/ka-cs-programs/blob/master/lib/gif-reader.js\n    for (;;) {\n      b = img.data[p++];\n      if (b == null) break;\n      idx = (row * img.width + col) * 4;\n      if (!table[b]) {\n        if (options.debug) throw new Error('bad samples');\n        table[b] = [0, 0, 0, 0];\n      }\n      img.samples[idx] = table[b][0];\n      img.samples[idx + 1] = table[b][1];\n      img.samples[idx + 2] = table[b][2];\n      img.samples[idx + 3] = table[b][3];\n      if (control.useTransparent && b === control.transparentColor) {\n        img.samples[idx + 3] = 0;\n      }\n      if (++col >= img.width) {\n        col = 0;\n        if (img.ilace) {\n          row += interlacing[ilp][1];\n          if (row >= img.height) {\n            row = interlacing[++ilp][0];\n          }\n        } else {\n          row++;\n        }\n      }\n    }\n\n    img.pixels = [];\n    for (i = 0; i < img.samples.length; i += 4) {\n      img.pixels.push(img.samples.slice(i, i + 4));\n    }\n\n    img.bmp = [];\n    for (y = 0, p = 0; y < img.height; y++) {\n      line = [];\n      for (x = 0; x < img.width; x++) {\n        pixel = img.pixels[p++];\n        if (!pixel) {\n          if (options.debug) throw new Error('no pixel');\n          line.push({ r: 0, g: 0, b: 0, a: 0 });\n          continue;\n        }\n        line.push({ r: pixel[0], g: pixel[1], b: pixel[2], a: pixel[3] });\n      }\n      img.bmp.push(line);\n    }\n\n    return img;\n  }, this).filter(Boolean);\n\n  if (!this.images.length) {\n    throw new Error('no image data or bad decompress');\n  }\n}\n\n// Rewritten version of:\n// https://github.com/lbv/ka-cs-programs/blob/master/lib/gif-reader.js\nGIF.prototype.decompress = function(input, codeSize) {\n  var bitDepth = codeSize + 1\n    , CC = 1 << codeSize\n    , EOI = CC + 1\n    , stack = []\n    , table = []\n    , ntable = 0\n    , oldCode = null\n    , buffer = 0\n    , nbuffer = 0\n    , p = 0\n    , buf = []\n    , bits\n    , read\n    , ans\n    , n\n    , code\n    , i\n    , K\n    , b\n    , maxElem;\n\n  for (;;) {\n    if (stack.length === 0) {\n      bits = bitDepth;\n      read = 0;\n      ans = 0;\n      while (read < bits) {\n        if (nbuffer === 0) {\n          if (p >= input.length) return buf;\n          buffer = input[p++];\n          nbuffer = 8;\n        }\n        n = Math.min(bits - read, nbuffer);\n        ans |= (buffer & ((1 << n) - 1)) << read;\n        read += n;\n        nbuffer -= n;\n        buffer >>= n;\n      }\n      code = ans;\n\n      if (code === EOI) {\n        break;\n      }\n\n      if (code === CC) {\n        table = [];\n        for (i = 0; i < CC; ++i) {\n          table[i] = [i, -1, i];\n        }\n        bitDepth = codeSize + 1;\n        maxElem = 1 << bitDepth;\n        ntable = CC + 2;\n        oldCode = null;\n        continue;\n      }\n\n      if (oldCode === null) {\n        oldCode = code;\n        buf.push(table[code][0]);\n        continue;\n      }\n\n      if (code < ntable) {\n        for (i = code; i >= 0; i = table[i][1]) {\n          stack.push(table[i][0]);\n        }\n        table[ntable++] = [\n          table[code][2],\n          oldCode,\n          table[oldCode][2]\n        ];\n      } else {\n        K = table[oldCode][2];\n        table[ntable++] = [K, oldCode, K];\n        for (i = code; i >= 0; i = table[i][1]) {\n          stack.push(table[i][0]);\n        }\n      }\n\n      oldCode = code;\n      if (ntable === maxElem) {\n        maxElem = 1 << (++bitDepth);\n        if (bitDepth > 12) bitDepth = 12;\n      }\n    }\n    b = stack.pop();\n    if (b == null) break;\n    buf.push(b);\n  }\n\n  return buf;\n};\n\n/**\n * Expose\n */\n\nexports = PNG;\nexports.png = PNG;\nexports.gif = GIF;\n\nmodule.exports = exports;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/overlayimage.js":"/**\n * overlayimage.js - w3m image element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar fs = require('fs')\n  , cp = require('child_process');\n\nvar helpers = require('../helpers');\n\nvar Node = require('./node');\nvar Box = require('./box');\n\n/**\n * OverlayImage\n * Good example of w3mimgdisplay commands:\n * https://github.com/hut/ranger/blob/master/ranger/ext/img_display.py\n */\n\nfunction OverlayImage(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new OverlayImage(options);\n  }\n\n  options = options || {};\n\n  Box.call(this, options);\n\n  if (options.w3m) {\n    OverlayImage.w3mdisplay = options.w3m;\n  }\n\n  if (OverlayImage.hasW3MDisplay == null) {\n    if (fs.existsSync(OverlayImage.w3mdisplay)) {\n      OverlayImage.hasW3MDisplay = true;\n    } else if (options.search !== false) {\n      var file = helpers.findFile('/usr', 'w3mimgdisplay')\n              || helpers.findFile('/lib', 'w3mimgdisplay')\n              || helpers.findFile('/bin', 'w3mimgdisplay');\n      if (file) {\n        OverlayImage.hasW3MDisplay = true;\n        OverlayImage.w3mdisplay = file;\n      } else {\n        OverlayImage.hasW3MDisplay = false;\n      }\n    }\n  }\n\n  this.on('hide', function() {\n    self._lastFile = self.file;\n    self.clearImage();\n  });\n\n  this.on('show', function() {\n    if (!self._lastFile) return;\n    self.setImage(self._lastFile);\n  });\n\n  this.on('detach', function() {\n    self._lastFile = self.file;\n    self.clearImage();\n  });\n\n  this.on('attach', function() {\n    if (!self._lastFile) return;\n    self.setImage(self._lastFile);\n  });\n\n  this.onScreenEvent('resize', function() {\n    self._needsRatio = true;\n  });\n\n  // Get images to overlap properly. Maybe not worth it:\n  // this.onScreenEvent('render', function() {\n  //   self.screen.program.flush();\n  //   if (!self._noImage) return;\n  //   function display(el, next) {\n  //     if (el.type === 'w3mimage' && el.file) {\n  //       el.setImage(el.file, next);\n  //     } else {\n  //       next();\n  //     }\n  //   }\n  //   function done(el) {\n  //     el.children.forEach(recurse);\n  //   }\n  //   function recurse(el) {\n  //     display(el, function() {\n  //       var pending = el.children.length;\n  //       el.children.forEach(function(el) {\n  //         display(el, function() {\n  //           if (!--pending) done(el);\n  //         });\n  //       });\n  //     });\n  //   }\n  //   recurse(self.screen);\n  // });\n\n  this.onScreenEvent('render', function() {\n    self.screen.program.flush();\n    if (!self._noImage) {\n      self.setImage(self.file);\n    }\n  });\n\n  if (this.options.file || this.options.img) {\n    this.setImage(this.options.file || this.options.img);\n  }\n}\n\nOverlayImage.prototype.__proto__ = Box.prototype;\n\nOverlayImage.prototype.type = 'overlayimage';\n\nOverlayImage.w3mdisplay = '/usr/lib/w3m/w3mimgdisplay';\n\nOverlayImage.prototype.spawn = function(file, args, opt, callback) {\n  var spawn = require('child_process').spawn\n    , ps;\n\n  opt = opt || {};\n  ps = spawn(file, args, opt);\n\n  ps.on('error', function(err) {\n    if (!callback) return;\n    return callback(err);\n  });\n\n  ps.on('exit', function(code) {\n    if (!callback) return;\n    if (code !== 0) return callback(new Error('Exit Code: ' + code));\n    return callback(null, code === 0);\n  });\n\n  return ps;\n};\n\nOverlayImage.prototype.setImage = function(img, callback) {\n  var self = this;\n\n  if (this._settingImage) {\n    this._queue = this._queue || [];\n    this._queue.push([img, callback]);\n    return;\n  }\n  this._settingImage = true;\n\n  var reset = function() {\n    self._settingImage = false;\n    self._queue = self._queue || [];\n    var item = self._queue.shift();\n    if (item) {\n      self.setImage(item[0], item[1]);\n    }\n  };\n\n  if (OverlayImage.hasW3MDisplay === false) {\n    reset();\n    if (!callback) return;\n    return callback(new Error('W3M Image Display not available.'));\n  }\n\n  if (!img) {\n    reset();\n    if (!callback) return;\n    return callback(new Error('No image.'));\n  }\n\n  this.file = img;\n\n  return this.getPixelRatio(function(err, ratio) {\n    if (err) {\n      reset();\n      if (!callback) return;\n      return callback(err);\n    }\n\n    return self.renderImage(img, ratio, function(err, success) {\n      if (err) {\n        reset();\n        if (!callback) return;\n        return callback(err);\n      }\n\n      if (self.shrink || self.options.autofit) {\n        delete self.shrink;\n        delete self.options.shrink;\n        self.options.autofit = true;\n        return self.imageSize(function(err, size) {\n          if (err) {\n            reset();\n            if (!callback) return;\n            return callback(err);\n          }\n\n          if (self._lastSize\n              && ratio.tw === self._lastSize.tw\n              && ratio.th === self._lastSize.th\n              && size.width === self._lastSize.width\n              && size.height === self._lastSize.height\n              && self.aleft === self._lastSize.aleft\n              && self.atop === self._lastSize.atop) {\n            reset();\n            if (!callback) return;\n            return callback(null, success);\n          }\n\n          self._lastSize = {\n            tw: ratio.tw,\n            th: ratio.th,\n            width: size.width,\n            height: size.height,\n            aleft: self.aleft,\n            atop: self.atop\n          };\n\n          self.position.width = size.width / ratio.tw | 0;\n          self.position.height = size.height / ratio.th | 0;\n\n          self._noImage = true;\n          self.screen.render();\n          self._noImage = false;\n\n          reset();\n          return self.renderImage(img, ratio, callback);\n        });\n      }\n\n      reset();\n      if (!callback) return;\n      return callback(null, success);\n    });\n  });\n};\n\nOverlayImage.prototype.renderImage = function(img, ratio, callback) {\n  var self = this;\n\n  if (cp.execSync) {\n    callback = callback || function(err, result) { return result; };\n    try {\n      return callback(null, this.renderImageSync(img, ratio));\n    } catch (e) {\n      return callback(e);\n    }\n  }\n\n  if (OverlayImage.hasW3MDisplay === false) {\n    if (!callback) return;\n    return callback(new Error('W3M Image Display not available.'));\n  }\n\n  if (!ratio) {\n    if (!callback) return;\n    return callback(new Error('No ratio.'));\n  }\n\n  // clearImage unsets these:\n  var _file = self.file;\n  var _lastSize = self._lastSize;\n  return self.clearImage(function(err) {\n    if (err) return callback(err);\n\n    self.file = _file;\n    self._lastSize = _lastSize;\n\n    var opt = {\n      stdio: 'pipe',\n      env: process.env,\n      cwd: process.env.HOME\n    };\n\n    var ps = self.spawn(OverlayImage.w3mdisplay, [], opt, function(err, success) {\n      if (!callback) return;\n      return err\n        ? callback(err)\n        : callback(null, success);\n    });\n\n    var width = self.width * ratio.tw | 0\n      , height = self.height * ratio.th | 0\n      , aleft = self.aleft * ratio.tw | 0\n      , atop = self.atop * ratio.th | 0;\n\n    var input = '0;1;'\n      + aleft + ';'\n      + atop + ';'\n      + width + ';'\n      + height + ';;;;;'\n      + img\n      + '\\n4;\\n3;\\n';\n\n    self._props = {\n      aleft: aleft,\n      atop: atop,\n      width: width,\n      height: height\n    };\n\n    ps.stdin.write(input);\n    ps.stdin.end();\n  });\n};\n\nOverlayImage.prototype.clearImage = function(callback) {\n  if (cp.execSync) {\n    callback = callback || function(err, result) { return result; };\n    try {\n      return callback(null, this.clearImageSync());\n    } catch (e) {\n      return callback(e);\n    }\n  }\n\n  if (OverlayImage.hasW3MDisplay === false) {\n    if (!callback) return;\n    return callback(new Error('W3M Image Display not available.'));\n  }\n\n  if (!this._props) {\n    if (!callback) return;\n    return callback(null);\n  }\n\n  var opt = {\n    stdio: 'pipe',\n    env: process.env,\n    cwd: process.env.HOME\n  };\n\n  var ps = this.spawn(OverlayImage.w3mdisplay, [], opt, function(err, success) {\n    if (!callback) return;\n    return err\n      ? callback(err)\n      : callback(null, success);\n  });\n\n  var width = this._props.width + 2\n    , height = this._props.height + 2\n    , aleft = this._props.aleft\n    , atop = this._props.atop;\n\n  if (this._drag) {\n    aleft -= 10;\n    atop -= 10;\n    width += 10;\n    height += 10;\n  }\n\n  var input = '6;'\n   + aleft + ';'\n   + atop + ';'\n   + width + ';'\n   + height\n   + '\\n4;\\n3;\\n';\n\n  delete this.file;\n  delete this._props;\n  delete this._lastSize;\n\n  ps.stdin.write(input);\n  ps.stdin.end();\n};\n\nOverlayImage.prototype.imageSize = function(callback) {\n  var img = this.file;\n\n  if (cp.execSync) {\n    callback = callback || function(err, result) { return result; };\n    try {\n      return callback(null, this.imageSizeSync());\n    } catch (e) {\n      return callback(e);\n    }\n  }\n\n  if (OverlayImage.hasW3MDisplay === false) {\n    if (!callback) return;\n    return callback(new Error('W3M Image Display not available.'));\n  }\n\n  if (!img) {\n    if (!callback) return;\n    return callback(new Error('No image.'));\n  }\n\n  var opt = {\n    stdio: 'pipe',\n    env: process.env,\n    cwd: process.env.HOME\n  };\n\n  var ps = this.spawn(OverlayImage.w3mdisplay, [], opt);\n\n  var buf = '';\n\n  ps.stdout.setEncoding('utf8');\n\n  ps.stdout.on('data', function(data) {\n    buf += data;\n  });\n\n  ps.on('error', function(err) {\n    if (!callback) return;\n    return callback(err);\n  });\n\n  ps.on('exit', function() {\n    if (!callback) return;\n    var size = buf.trim().split(/\\s+/);\n    return callback(null, {\n      raw: buf.trim(),\n      width: +size[0],\n      height: +size[1]\n    });\n  });\n\n  var input = '5;' + img + '\\n';\n\n  ps.stdin.write(input);\n  ps.stdin.end();\n};\n\nOverlayImage.prototype.termSize = function(callback) {\n  var self = this;\n\n  if (cp.execSync) {\n    callback = callback || function(err, result) { return result; };\n    try {\n      return callback(null, this.termSizeSync());\n    } catch (e) {\n      return callback(e);\n    }\n  }\n\n  if (OverlayImage.hasW3MDisplay === false) {\n    if (!callback) return;\n    return callback(new Error('W3M Image Display not available.'));\n  }\n\n  var opt = {\n    stdio: 'pipe',\n    env: process.env,\n    cwd: process.env.HOME\n  };\n\n  var ps = this.spawn(OverlayImage.w3mdisplay, ['-test'], opt);\n\n  var buf = '';\n\n  ps.stdout.setEncoding('utf8');\n\n  ps.stdout.on('data', function(data) {\n    buf += data;\n  });\n\n  ps.on('error', function(err) {\n    if (!callback) return;\n    return callback(err);\n  });\n\n  ps.on('exit', function() {\n    if (!callback) return;\n\n    if (!buf.trim()) {\n      // Bug: w3mimgdisplay will sometimes\n      // output nothing. Try again:\n      return self.termSize(callback);\n    }\n\n    var size = buf.trim().split(/\\s+/);\n\n    return callback(null, {\n      raw: buf.trim(),\n      width: +size[0],\n      height: +size[1]\n    });\n  });\n\n  ps.stdin.end();\n};\n\nOverlayImage.prototype.getPixelRatio = function(callback) {\n  var self = this;\n\n  if (cp.execSync) {\n    callback = callback || function(err, result) { return result; };\n    try {\n      return callback(null, this.getPixelRatioSync());\n    } catch (e) {\n      return callback(e);\n    }\n  }\n\n  // XXX We could cache this, but sometimes it's better\n  // to recalculate to be pixel perfect.\n  if (this._ratio && !this._needsRatio) {\n    return callback(null, this._ratio);\n  }\n\n  return this.termSize(function(err, dimensions) {\n    if (err) return callback(err);\n\n    self._ratio = {\n      tw: dimensions.width / self.screen.width,\n      th: dimensions.height / self.screen.height\n    };\n\n    self._needsRatio = false;\n\n    return callback(null, self._ratio);\n  });\n};\n\nOverlayImage.prototype.renderImageSync = function(img, ratio) {\n  if (OverlayImage.hasW3MDisplay === false) {\n    throw new Error('W3M Image Display not available.');\n  }\n\n  if (!ratio) {\n    throw new Error('No ratio.');\n  }\n\n  // clearImage unsets these:\n  var _file = this.file;\n  var _lastSize = this._lastSize;\n\n  this.clearImageSync();\n\n  this.file = _file;\n  this._lastSize = _lastSize;\n\n  var width = this.width * ratio.tw | 0\n    , height = this.height * ratio.th | 0\n    , aleft = this.aleft * ratio.tw | 0\n    , atop = this.atop * ratio.th | 0;\n\n  var input = '0;1;'\n    + aleft + ';'\n    + atop + ';'\n    + width + ';'\n    + height + ';;;;;'\n    + img\n    + '\\n4;\\n3;\\n';\n\n  this._props = {\n    aleft: aleft,\n    atop: atop,\n    width: width,\n    height: height\n  };\n\n  try {\n    cp.execFileSync(OverlayImage.w3mdisplay, [], {\n      env: process.env,\n      encoding: 'utf8',\n      input: input,\n      timeout: 1000\n    });\n  } catch (e) {\n    ;\n  }\n\n  return true;\n};\n\nOverlayImage.prototype.clearImageSync = function() {\n  if (OverlayImage.hasW3MDisplay === false) {\n    throw new Error('W3M Image Display not available.');\n  }\n\n  if (!this._props) {\n    return false;\n  }\n\n  var width = this._props.width + 2\n    , height = this._props.height + 2\n    , aleft = this._props.aleft\n    , atop = this._props.atop;\n\n  if (this._drag) {\n    aleft -= 10;\n    atop -= 10;\n    width += 10;\n    height += 10;\n  }\n\n  var input = '6;'\n   + aleft + ';'\n   + atop + ';'\n   + width + ';'\n   + height\n   + '\\n4;\\n3;\\n';\n\n  delete this.file;\n  delete this._props;\n  delete this._lastSize;\n\n  try {\n    cp.execFileSync(OverlayImage.w3mdisplay, [], {\n      env: process.env,\n      encoding: 'utf8',\n      input: input,\n      timeout: 1000\n    });\n  } catch (e) {\n    ;\n  }\n\n  return true;\n};\n\nOverlayImage.prototype.imageSizeSync = function() {\n  var img = this.file;\n\n  if (OverlayImage.hasW3MDisplay === false) {\n    throw new Error('W3M Image Display not available.');\n  }\n\n  if (!img) {\n    throw new Error('No image.');\n  }\n\n  var buf = '';\n  var input = '5;' + img + '\\n';\n\n  try {\n    buf = cp.execFileSync(OverlayImage.w3mdisplay, [], {\n      env: process.env,\n      encoding: 'utf8',\n      input: input,\n      timeout: 1000\n    });\n  } catch (e) {\n    ;\n  }\n\n  var size = buf.trim().split(/\\s+/);\n\n  return {\n    raw: buf.trim(),\n    width: +size[0],\n    height: +size[1]\n  };\n};\n\nOverlayImage.prototype.termSizeSync = function(_, recurse) {\n  if (OverlayImage.hasW3MDisplay === false) {\n    throw new Error('W3M Image Display not available.');\n  }\n\n  var buf = '';\n\n  try {\n    buf = cp.execFileSync(OverlayImage.w3mdisplay, ['-test'], {\n      env: process.env,\n      encoding: 'utf8',\n      timeout: 1000\n    });\n  } catch (e) {\n    ;\n  }\n\n  if (!buf.trim()) {\n    // Bug: w3mimgdisplay will sometimes\n    // output nothing. Try again:\n    recurse = recurse || 0;\n    if (++recurse === 5) {\n      throw new Error('Term size not determined.');\n    }\n    return this.termSizeSync(_, recurse);\n  }\n\n  var size = buf.trim().split(/\\s+/);\n\n  return {\n    raw: buf.trim(),\n    width: +size[0],\n    height: +size[1]\n  };\n};\n\nOverlayImage.prototype.getPixelRatioSync = function() {\n  // XXX We could cache this, but sometimes it's better\n  // to recalculate to be pixel perfect.\n  if (this._ratio && !this._needsRatio) {\n    return this._ratio;\n  }\n  this._needsRatio = false;\n\n  var dimensions = this.termSizeSync();\n\n  this._ratio = {\n    tw: dimensions.width / this.screen.width,\n    th: dimensions.height / this.screen.height\n  };\n\n  return this._ratio;\n};\n\nOverlayImage.prototype.displayImage = function(callback) {\n  return this.screen.displayImage(this.file, callback);\n};\n\n/**\n * Expose\n */\n\nmodule.exports = OverlayImage;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/video.js":"/**\n * video.js - video element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar cp = require('child_process');\n\nvar Node = require('./node');\nvar Box = require('./box');\nvar Terminal = require('./terminal');\n\n/**\n * Video\n */\n\nfunction Video(options) {\n  var self = this\n    , shell\n    , args;\n\n  if (!(this instanceof Node)) {\n    return new Video(options);\n  }\n\n  options = options || {};\n\n  Box.call(this, options);\n\n  if (this.exists('mplayer')) {\n    shell = 'mplayer';\n    args = ['-vo', 'caca', '-quiet', options.file];\n  } else if (this.exists('mpv')) {\n    shell = 'mpv';\n    args = ['--vo', 'caca', '--really-quiet', options.file];\n  } else {\n    this.parseTags = true;\n    this.setContent('{red-fg}{bold}Error:{/bold}'\n      + ' mplayer or mpv not installed.{/red-fg}');\n    return this;\n  }\n\n  var opts = {\n    parent: this,\n    left: 0,\n    top: 0,\n    width: this.width - this.iwidth,\n    height: this.height - this.iheight,\n    shell: shell,\n    args: args.slice()\n  };\n\n  this.now = Date.now() / 1000 | 0;\n  this.start = opts.start || 0;\n  if (this.start) {\n    if (shell === 'mplayer') {\n      opts.args.unshift('-ss', this.start + '');\n    } else if (shell === 'mpv') {\n      opts.args.unshift('--start', this.start + '');\n    }\n  }\n\n  var DISPLAY = process.env.DISPLAY;\n  delete process.env.DISPLAY;\n  this.tty = new Terminal(opts);\n  process.env.DISPLAY = DISPLAY;\n\n  this.on('click', function() {\n    self.tty.pty.write('p');\n  });\n\n  // mplayer/mpv cannot resize itself in the terminal, so we have\n  // to restart it at the correct start time.\n  this.on('resize', function() {\n    self.tty.destroy();\n\n    var opts = {\n      parent: self,\n      left: 0,\n      top: 0,\n      width: self.width - self.iwidth,\n      height: self.height - self.iheight,\n      shell: shell,\n      args: args.slice()\n    };\n\n    var watched = (Date.now() / 1000 | 0) - self.now;\n    self.now = Date.now() / 1000 | 0;\n    self.start += watched;\n    if (shell === 'mplayer') {\n      opts.args.unshift('-ss', self.start + '');\n    } else if (shell === 'mpv') {\n      opts.args.unshift('--start', self.start + '');\n    }\n\n    var DISPLAY = process.env.DISPLAY;\n    delete process.env.DISPLAY;\n    self.tty = new Terminal(opts);\n    process.env.DISPLAY = DISPLAY;\n    self.screen.render();\n  });\n}\n\nVideo.prototype.__proto__ = Box.prototype;\n\nVideo.prototype.type = 'video';\n\nVideo.prototype.exists = function(program) {\n  try {\n    return !!+cp.execSync('type '\n      + program + ' > /dev/null 2> /dev/null'\n      + ' && echo 1', { encoding: 'utf8' }).trim();\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Video;\n","/home/travis/build/npmtest/node-npmtest-blessed/blessed/lib/widgets/layout.js":"/**\n * layout.js - layout element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Element = require('./element');\n\n/**\n * Layout\n */\n\nfunction Layout(options) {\n  if (!(this instanceof Node)) {\n    return new Layout(options);\n  }\n\n  options = options || {};\n\n  if ((options.width == null\n      && (options.left == null && options.right == null))\n      || (options.height == null\n      && (options.top == null && options.bottom == null))) {\n    throw new Error('`Layout` must have a width and height!');\n  }\n\n  options.layout = options.layout || 'inline';\n\n  Element.call(this, options);\n\n  if (options.renderer) {\n    this.renderer = options.renderer;\n  }\n}\n\nLayout.prototype.__proto__ = Element.prototype;\n\nLayout.prototype.type = 'layout';\n\nLayout.prototype.isRendered = function(el) {\n  if (!el.lpos) return false;\n  return (el.lpos.xl - el.lpos.xi) > 0\n      && (el.lpos.yl - el.lpos.yi) > 0;\n};\n\nLayout.prototype.getLast = function(i) {\n  while (this.children[--i]) {\n    var el = this.children[i];\n    if (this.isRendered(el)) return el;\n  }\n};\n\nLayout.prototype.getLastCoords = function(i) {\n  var last = this.getLast(i);\n  if (last) return last.lpos;\n};\n\nLayout.prototype._renderCoords = function() {\n  var coords = this._getCoords(true);\n  var children = this.children;\n  this.children = [];\n  this._render();\n  this.children = children;\n  return coords;\n};\n\nLayout.prototype.renderer = function(coords) {\n  var self = this;\n\n  // The coordinates of the layout element\n  var width = coords.xl - coords.xi\n    , height = coords.yl - coords.yi\n    , xi = coords.xi\n    , yi = coords.yi;\n\n  // The current row offset in cells (which row are we on?)\n  var rowOffset = 0;\n\n  // The index of the first child in the row\n  var rowIndex = 0;\n  var lastRowIndex = 0;\n\n  // Figure out the highest width child\n  if (this.options.layout === 'grid') {\n    var highWidth = this.children.reduce(function(out, el) {\n      out = Math.max(out, el.width);\n      return out;\n    }, 0);\n  }\n\n  return function iterator(el, i) {\n    // Make our children shrinkable. If they don't have a height, for\n    // example, calculate it for them.\n    el.shrink = true;\n\n    // Find the previous rendered child's coordinates\n    var last = self.getLast(i);\n\n    // If there is no previously rendered element, we are on the first child.\n    if (!last) {\n      el.position.left = 0;\n      el.position.top = 0;\n    } else {\n      // Otherwise, figure out where to place this child. We'll start by\n      // setting it's `left`/`x` coordinate to right after the previous\n      // rendered element. This child will end up directly to the right of it.\n      el.position.left = last.lpos.xl - xi;\n\n      // Make sure the position matches the highest width element\n      if (self.options.layout === 'grid') {\n        // Compensate with width:\n        // el.position.width = el.width + (highWidth - el.width);\n        // Compensate with position:\n        el.position.left += highWidth - (last.lpos.xl - last.lpos.xi);\n      }\n\n      // If our child does not overlap the right side of the Layout, set it's\n      // `top`/`y` to the current `rowOffset` (the coordinate for the current\n      // row).\n      if (el.position.left + el.width <= width) {\n        el.position.top = rowOffset;\n      } else {\n        // Otherwise we need to start a new row and calculate a new\n        // `rowOffset` and `rowIndex` (the index of the child on the current\n        // row).\n        rowOffset += self.children.slice(rowIndex, i).reduce(function(out, el) {\n          if (!self.isRendered(el)) return out;\n          out = Math.max(out, el.lpos.yl - el.lpos.yi);\n          return out;\n        }, 0);\n        lastRowIndex = rowIndex;\n        rowIndex = i;\n        el.position.left = 0;\n        el.position.top = rowOffset;\n      }\n    }\n\n    // Make sure the elements on lower rows graviatate up as much as possible\n    if (self.options.layout === 'inline') {\n      var above = null;\n      var abovea = Infinity;\n      for (var j = lastRowIndex; j < rowIndex; j++) {\n        var l = self.children[j];\n        if (!self.isRendered(l)) continue;\n        var abs = Math.abs(el.position.left - (l.lpos.xi - xi));\n        // if (abs < abovea && (l.lpos.xl - l.lpos.xi) <= el.width) {\n        if (abs < abovea) {\n          above = l;\n          abovea = abs;\n        }\n      }\n      if (above) {\n        el.position.top = above.lpos.yl - yi;\n      }\n    }\n\n    // If our child overflows the Layout, do not render it!\n    // Disable this feature for now.\n    if (el.position.top + el.height > height) {\n      // Returning false tells blessed to ignore this child.\n      // return false;\n    }\n  };\n};\n\nLayout.prototype.render = function() {\n  this._emit('prerender');\n\n  var coords = this._renderCoords();\n  if (!coords) {\n    delete this.lpos;\n    return;\n  }\n\n  if (coords.xl - coords.xi <= 0) {\n    coords.xl = Math.max(coords.xl, coords.xi);\n    return;\n  }\n\n  if (coords.yl - coords.yi <= 0) {\n    coords.yl = Math.max(coords.yl, coords.yi);\n    return;\n  }\n\n  this.lpos = coords;\n\n  if (this.border) coords.xi++, coords.xl--, coords.yi++, coords.yl--;\n  if (this.tpadding) {\n    coords.xi += this.padding.left, coords.xl -= this.padding.right;\n    coords.yi += this.padding.top, coords.yl -= this.padding.bottom;\n  }\n\n  var iterator = this.renderer(coords);\n\n  if (this.border) coords.xi--, coords.xl++, coords.yi--, coords.yl++;\n  if (this.tpadding) {\n    coords.xi -= this.padding.left, coords.xl += this.padding.right;\n    coords.yi -= this.padding.top, coords.yl += this.padding.bottom;\n  }\n\n  this.children.forEach(function(el, i) {\n    if (el.screen._ci !== -1) {\n      el.index = el.screen._ci++;\n    }\n    var rendered = iterator(el, i);\n    if (rendered === false) {\n      delete el.lpos;\n      return;\n    }\n    // if (el.screen._rendering) {\n    //   el._rendering = true;\n    // }\n    el.render();\n    // if (el.screen._rendering) {\n    //   el._rendering = false;\n    // }\n  });\n\n  this._emit('render', [coords]);\n\n  return coords;\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Layout;\n"}